# admin.py - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ "–ú–æ–∏ –∑–∞–ø–∏—Å–∏"
import os
import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ContextTypes
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = os.getenv('API_BASE_URL', 'http://localhost:3011')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
admin_states = {}

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤"""
    query = update.callback_query if update.callback_query else None
    user_id = update.effective_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∞—Å—Ç–µ—Ä–æ–º
        response = requests.get(f"{API_BASE_URL}/api/specialists-all")
        if response.json()['message'] != 'success':
            raise Exception("Error fetching specialists")
            
        masters = response.json()['data']
        user_master = next((m for m in masters if m.get('tg_id') == str(user_id)), None)
        
        if not user_master:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Ç–µ—Ä–æ–º
            message_text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"
            keyboard = [[InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if query:
                if query.message.photo:
                    await query.edit_message_caption(caption=message_text, reply_markup=reply_markup)
                else:
                    await query.edit_message_text(text=message_text, reply_markup=reply_markup)
            else:
                await update.message.reply_text(text=message_text, reply_markup=reply_markup)
            return

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Ç–µ—Ä–æ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        photo_url = f"{API_BASE_URL}/photo/images/main.jpg"
        message_text = f"üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –º–∞—Å—Ç–µ—Ä–∞\n\n–ú–∞—Å—Ç–µ—Ä: {user_master['–∏–º—è']}"

        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è", callback_data='admin_add_freetime')],
            [InlineKeyboardButton("üìä –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data='admin_my_records')],
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            photo_response = requests.get(photo_url)
            if photo_response.status_code == 200:
                photo_data = photo_response.content
                if query:
                    media = InputMediaPhoto(media=photo_data, caption=message_text)
                    await query.edit_message_media(media=media, reply_markup=reply_markup)
                else:
                    await update.message.reply_photo(photo=photo_data, caption=message_text, reply_markup=reply_markup)
            else:
                if query:
                    await query.edit_message_text(text=message_text, reply_markup=reply_markup)
                else:
                    await update.message.reply_text(text=message_text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Error showing admin panel: {e}")
            if query:
                await query.edit_message_text(text=message_text, reply_markup=reply_markup)
            else:
                await update.message.reply_text(text=message_text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"Error checking master status: {e}")
        message_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        keyboard = [[InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if query:
            await query.edit_message_text(text=message_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text=message_text, reply_markup=reply_markup)

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = update.effective_user.id

    if data == 'admin_panel':
        await show_admin_panel(update, context)
    elif data == 'admin_add_freetime':
        await start_add_freetime(update, context)
    elif data == 'admin_my_records':
        await show_my_records_menu(update, context, user_id)
    elif data == 'admin_my_appointments':
        await show_master_appointments(update, context, user_id)
    elif data == 'admin_my_freetime':
        await show_master_freetime(update, context, user_id)
    elif data.startswith('admin_select_service_'):
        service_id = data.split('_')[3]
        await select_date_for_freetime(update, context, service_id)
    elif data.startswith('admin_select_date_'):
        date_str = data.split('_')[3]
        await enter_time_for_freetime(update, context, date_str)
    elif data == 'admin_back_to_services':
        await select_service_for_freetime(update, context)
    elif data == 'admin_back_to_records':
        await show_my_records_menu(update, context, user_id)



async def show_my_records_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é '–ú–æ–∏ –∑–∞–ø–∏—Å–∏' —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞"""
    query = update.callback_query
    
    keyboard = [
        [InlineKeyboardButton("‚è∞ –°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è", callback_data='admin_my_freetime')],
        [InlineKeyboardButton("üìã –ó–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data='admin_my_appointments')],
        [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='admin_panel')],
        [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = "üìä –ú–æ–∏ –∑–∞–ø–∏—Å–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:"
    
    try:
        await query.edit_message_caption(
            caption=message_text,
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error showing records menu: {e}")
        await query.edit_message_text(
            text=message_text,
            reply_markup=reply_markup
        )

async def show_master_freetime(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –º–∞—Å—Ç–µ—Ä–∞"""
    query = update.callback_query

    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –ø–æ tg_id
        response = requests.get(f"{API_BASE_URL}/api/specialists-all")
        if response.json()['message'] != 'success':
            raise Exception("Error fetching specialists")
            
        masters = response.json()['data']
        user_master = next((m for m in masters if m.get('tg_id') == str(user_id)), None)
        
        if not user_master:
            await query.edit_message_caption(caption="‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –º–∞—Å—Ç–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –±—É–¥—É—â–µ–µ)
        today = datetime.now().strftime('%Y-%m-%d')
        freetime_response = requests.get(
            f"{API_BASE_URL}/api/freetime-available",
            params={
                'masterId': user_master['id'],
                'fromDate': today
            }
        )

        if freetime_response.json()['message'] != 'success':
            raise Exception("Error fetching free time")

        freetime_data = freetime_response.json()['data']
        
        if not freetime_data:
            message_text = "‚è∞ –£ –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã"
        else:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
            grouped_by_date = {}
            for item in freetime_data:
                if item['–¥–∞—Ç–∞'] not in grouped_by_date:
                    grouped_by_date[item['–¥–∞—Ç–∞']] = []
                grouped_by_date[item['–¥–∞—Ç–∞']].append(item)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            sorted_dates = sorted(grouped_by_date.keys())
            
            message_text = "‚è∞ –í–∞—à–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è:\n\n"
            
            for date in sorted_dates:
                formatted_date = datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')
                message_text += f"üìÖ {formatted_date}:\n"
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                grouped_by_date[date].sort(key=lambda x: x['–≤—Ä–µ–º—è'])
                
                for item in grouped_by_date[date]:
                    message_text += f"   ‚è∞ {item['–≤—Ä–µ–º—è']} - {item['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
                
                message_text += "\n"

        keyboard = [
            [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥ –∫ –∑–∞–ø–∏—Å—è–º", callback_data='admin_back_to_records')],
            [InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')],
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if query.message.photo:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption
            await query.edit_message_caption(
                caption=message_text,
                reply_markup=reply_markup
            )
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await query.edit_message_text(
                text=message_text,
                reply_markup=reply_markup
            )

    except Exception as e:
        logger.error(f"Error showing master free time: {e}")
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if query.message.photo:
            await query.edit_message_caption(caption="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        else:
            await query.edit_message_text(text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")



async def start_add_freetime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    query = update.callback_query
    user_id = update.effective_user.id

    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –ø–æ tg_id
    try:
        response = requests.get(f"{API_BASE_URL}/api/specialists-all")
        if response.json()['message'] != 'success':
            raise Exception("Error fetching specialists")
            
        masters = response.json()['data']
        user_master = next((m for m in masters if m.get('tg_id') == str(user_id)), None)
        
        if not user_master:
            await query.edit_message_text(text="‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–∞—Å—Ç–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        admin_states[user_id] = {
            'step': 'select_service',
            'master_id': user_master['id'],
            'master_name': user_master['–∏–º—è']
        }

        await select_service_for_freetime(update, context)

    except Exception as e:
        logger.error(f"Error starting freetime addition: {e}")
        await query.edit_message_text(text="‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")


# admin.py - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

async def select_service_for_freetime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —É—Å–ª—É–≥–∏ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    user_data = admin_states.get(user_id, {})

    try:
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —É—Å–ª—É–≥–∏ (–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞)
        response = requests.get(f"{API_BASE_URL}/api/services-all")
        if response.json()['message'] != 'success':
            raise Exception("Error fetching services")
            
        services = response.json()['data']
        
        if not services:
            await query.edit_message_caption(
                caption="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='admin_panel')],
                    [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
                ])
            )
            return

        keyboard = []
        for service in services:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            keyboard.append([
                InlineKeyboardButton(
                    f"{service['–Ω–∞–∑–≤–∞–Ω–∏–µ']} - {service['—Ü–µ–Ω–∞']}‚ÇΩ",
                    callback_data=f'admin_select_service_{service["id"]}'
                )
            ])
        
        keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='admin_panel')])
        keyboard.append([InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_caption(
            caption="üéØ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"Error selecting service: {e}")
        await query.edit_message_caption(caption="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥")


async def select_date_for_freetime(update: Update, context: ContextTypes.DEFAULT_TYPE, service_id: str):
    """–í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    user_data = admin_states.get(user_id, {})
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º service_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    user_data['service_id'] = service_id
    admin_states[user_id] = user_data

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
    today = datetime.now().date()
    dates = [(today + timedelta(days=i)) for i in range(7)]
    
    keyboard = []
    row = []
    for i, date in enumerate(dates):
        formatted_date = date.strftime('%d.%m')
        row.append(InlineKeyboardButton(
            formatted_date,
            callback_data=f'admin_select_date_{date.strftime("%Y-%m-%d")}'
        ))
        
        if len(row) == 2 or i == len(dates) - 1:
            keyboard.append(row)
            row = []
    
    keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='admin_back_to_services')])
    keyboard.append([InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_message_caption –≤–º–µ—Å—Ç–æ edit_message_text
    await query.edit_message_caption(
        caption="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:",
        reply_markup=reply_markup
    )





async def enter_time_for_freetime(update: Update, context: ContextTypes.DEFAULT_TYPE, date_str: str):
    """–í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    user_data = admin_states.get(user_id, {})
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    user_data['date'] = date_str
    user_data['step'] = 'enter_time'
    admin_states[user_id] = user_data

    formatted_date = datetime.strptime(date_str, '%Y-%m-%d').strftime('%d.%m.%Y')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å query –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_data['last_message_id'] = query.message.message_id
    admin_states[user_id] = user_data
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await query.message.reply_text(
        f"‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {formatted_date} –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n\n"
        "–ü—Ä–∏–º–µ—Ä: 14:30 –∏–ª–∏ 09:00\n"
        "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–æ 5 –º–∏–Ω—É—Ç–∞–º (00, 05, 10, ..., 55)\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data=f'admin_select_service_{user_data["service_id"]}')],
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ])
    )


async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user_id = update.message.from_user.id
    text = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    if text == '/cancel':
        if user_id in admin_states:
            del admin_states[user_id]
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await show_admin_panel(update, context)
        return

    if user_id in admin_states:
        state = admin_states[user_id]

        if state['step'] == 'enter_time':
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
            if not validate_time(text):
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
                    "–ü—Ä–∏–º–µ—Ä: 14:30 –∏–ª–∏ 09:00\n"
                    "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–æ 5 –º–∏–Ω—É—Ç–∞–º\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
                )
                return

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            try:
                schedule_data = {
                    '–º–∞—Å—Ç–µ—Ä_id': state['master_id'],
                    '—É—Å–ª—É–≥–∞_id': state['service_id'],
                    '–¥–∞—Ç–∞': state['date'],
                    '–≤—Ä–µ–º—è': text,
                    '–¥–æ—Å—Ç—É–ø–Ω–æ': 1
                }

                response = requests.post(
                    f"{API_BASE_URL}/api/schedule",
                    json=schedule_data
                )

                if response.json()['message'] == 'success':
                    formatted_date = datetime.strptime(state['date'], '%Y-%m-%d').strftime('%d.%m.%Y')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    service_response = requests.get(f"{API_BASE_URL}/api/service/{state['service_id']}")
                    service_name = "–£—Å–ª—É–≥–∞"
                    if service_response.json()['message'] == 'success':
                        service_name = service_response.json()['data']['–Ω–∞–∑–≤–∞–Ω–∏–µ']
                    
                    await update.message.reply_text(
                        f"‚úÖ –°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
                        f"‚â£ –î–∞—Ç–∞: {formatted_date}\n"
                        f"‚è∞ –í—Ä–µ–º—è: {text}\n"
                        f"üéØ –£—Å–ª—É–≥–∞: {service_name}\n"
                        f"‚ô¢ –ú–∞—Å—Ç–µ—Ä: {state['master_name']}\n\n"
                        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤—Ä–µ–º—è?",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data='admin_add_freetime')],
                            [InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')],
                            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
                        ])
                    )
                    del admin_states[user_id]
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏")

            except Exception as e:
                logger.error(f"Error adding freetime: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")


                
def validate_time(time_str):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM"""
    import re
    pattern = r'^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$'
    if not re.match(pattern, time_str):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∏–Ω—É—Ç—ã –∫—Ä–∞—Ç–Ω—ã 5
    minutes = int(time_str.split(':')[1])
    return minutes % 5 == 0

async def show_master_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä–∞"""
    query = update.callback_query

    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –ø–æ tg_id
        response = requests.get(f"{API_BASE_URL}/api/specialists-all")
        if response.json()['message'] != 'success':
            raise Exception("Error fetching specialists")
            
        masters = response.json()['data']
        user_master = next((m for m in masters if m.get('tg_id') == str(user_id)), None)
        
        if not user_master:
            await query.edit_message_text(text="‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä–∞ (—Ç–µ–∫—É—â–∏–µ –∏ –±—É–¥—É—â–∏–µ)
        today = datetime.now().strftime('%Y-%m-%d')
        appointments_response = requests.get(
            f"{API_BASE_URL}/api/appointments",
            params={
                'specialistId': user_master['id'],
                'startDate': today
            }
        )

        if appointments_response.json()['message'] != 'success':
            raise Exception("Error fetching appointments")

        appointments = appointments_response.json()['data']
        
        if not appointments:
            message_text = "üìã –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã"
        else:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
            grouped_by_date = {}
            for app in appointments:
                if app['–¥–∞—Ç–∞'] not in grouped_by_date:
                    grouped_by_date[app['–¥–∞—Ç–∞']] = []
                grouped_by_date[app['–¥–∞—Ç–∞']].append(app)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            sorted_dates = sorted(grouped_by_date.keys())
            
            message_text = "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
            
            for date in sorted_dates:
                formatted_date = datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')
                message_text += f"üìÖ {formatted_date}:\n"
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                grouped_by_date[date].sort(key=lambda x: x['–≤—Ä–µ–º—è'])
                
                for app in grouped_by_date[date]:
                    message_text += (
                        f"   ‚è∞ {app['–≤—Ä–µ–º—è']}\n"
                        f"   üë§ {app['–∫–ª–∏–µ–Ω—Ç_–∏–º—è']} ({app['–∫–ª–∏–µ–Ω—Ç_—Ç–µ–ª–µ—Ñ–æ–Ω']})\n"
                        f"   üéØ {app['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
                        f"   üíµ {app['—Ü–µ–Ω–∞']}‚ÇΩ\n"
                        f"   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                    )
                
                message_text += "\n"

        keyboard = [
            [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥ –∫ –∑–∞–ø–∏—Å—è–º", callback_data='admin_back_to_records')],
            [InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')],
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if query.message.photo:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption
            await query.edit_message_caption(
                caption=message_text,
                reply_markup=reply_markup
            )
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await query.edit_message_text(
                text=message_text,
                reply_markup=reply_markup
            )

    except Exception as e:
        logger.error(f"Error showing master appointments: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if query.message.photo:
            await query.edit_message_caption(caption=error_text)
        else:
            await query.edit_message_text(text=error_text)
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä–∞"""
    query = update.callback_query

    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –ø–æ tg_id
        response = requests.get(f"{API_BASE_URL}/api/specialists-all")
        if response.json()['message'] != 'success':
            raise Exception("Error fetching specialists")
            
        masters = response.json()['data']
        user_master = next((m for m in masters if m.get('tg_id') == str(user_id)), None)
        
        if not user_master:
            await query.edit_message_text(text="‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä–∞ (—Ç–µ–∫—É—â–∏–µ –∏ –±—É–¥—É—â–∏–µ)
        today = datetime.now().strftime('%Y-%m-%d')
        appointments_response = requests.get(
            f"{API_BASE_URL}/api/appointments",
            params={
                'specialistId': user_master['id'],
                'startDate': today
            }
        )

        if appointments_response.json()['message'] != 'success':
            raise Exception("Error fetching appointments")

        appointments = appointments_response.json()['data']
        
        if not appointments:
            message_text = "üìã –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã"
        else:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
            grouped_by_date = {}
            for app in appointments:
                if app['–¥–∞—Ç–∞'] not in grouped_by_date:
                    grouped_by_date[app['–¥–∞—Ç–∞']] = []
                grouped_by_date[app['–¥–∞—Ç–∞']].append(app)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            sorted_dates = sorted(grouped_by_date.keys())
            
            message_text = "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
            
            for date in sorted_dates:
                formatted_date = datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')
                message_text += f"üìÖ {formatted_date}:\n"
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                grouped_by_date[date].sort(key=lambda x: x['–≤—Ä–µ–º—è'])
                
                for app in grouped_by_date[date]:
                    message_text += (
                        f"   ‚è∞ {app['–≤—Ä–µ–º—è']}\n"
                        f"   üë§ {app['–∫–ª–∏–µ–Ω—Ç_–∏–º—è']} ({app['–∫–ª–∏–µ–Ω—Ç_—Ç–µ–ª–µ—Ñ–æ–Ω']})\n"
                        f"   üéØ {app['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
                        f"   üíµ {app['—Ü–µ–Ω–∞']}‚ÇΩ\n"
                        f"   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                    )
                
                message_text += "\n"

        keyboard = [
            [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥ –∫ –∑–∞–ø–∏—Å—è–º", callback_data='admin_back_to_records')],
            [InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')],
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text=message_text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"Error showing master appointments: {e}")
        await query.edit_message_text(text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π")
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä–∞"""
    query = update.callback_query

    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –ø–æ tg_id
        response = requests.get(f"{API_BASE_URL}/api/specialists-all")
        if response.json()['message'] != 'success':
            raise Exception("Error fetching specialists")
            
        masters = response.json()['data']
        user_master = next((m for m in masters if m.get('tg_id') == str(user_id)), None)
        
        if not user_master:
            await query.edit_message_text(text="‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä–∞
        today = datetime.now().strftime('%Y-%m-%d')
        appointments_response = requests.get(
            f"{API_BASE_URL}/api/appointments",
            params={
                'specialistId': user_master['id'],
                'startDate': today
            }
        )

        if appointments_response.json()['message'] != 'success':
            raise Exception("Error fetching appointments")

        appointments = appointments_response.json()['data']
        
        if not appointments:
            message_text = "üìã –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã"
        else:
            message_text = "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
            for app in sorted(appointments, key=lambda x: (x['–¥–∞—Ç–∞'], x['–≤—Ä–µ–º—è'])):
                message_text += (
                    f"‚â£ {app['–¥–∞—Ç–∞']} {app['–≤—Ä–µ–º—è']}\n"
                    f"üë§ {app['–∫–ª–∏–µ–Ω—Ç_–∏–º—è']} ({app['–∫–ª–∏–µ–Ω—Ç_—Ç–µ–ª–µ—Ñ–æ–Ω']})\n"
                    f"üéØ {app['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
                    f"‚ÇΩ {app['—Ü–µ–Ω–∞']}‚ÇΩ\n"
                    f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                )

        keyboard = [
            [InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')],
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text=message_text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"Error showing master appointments: {e}")
        await query.edit_message_text(text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π")