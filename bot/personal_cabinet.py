# personal_cabinet.py
import os
import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ContextTypes
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = os.getenv('API_BASE_URL', 'http://localhost:3000')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
personal_states = {}

async def show_personal_cabinet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    query = update.callback_query if update.callback_query else None
    user_id = update.effective_user.id  # Telegram user ID

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ tg_id
        response = requests.get(f"{API_BASE_URL}/api/client/by-tg/{user_id}")
        data = response.json()

        if data['message'] == 'success' and data['data']:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
            await show_cabinet_menu(update, context, user_id)
        else:
            # –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            personal_states[user_id] = {'step': 'enter_phone'}
            message_text = (
                "üîë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!\n\n"
                "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX\n"
                "–ü—Ä–∏–º–µ—Ä: +79255355278"
            )
            keyboard = [
                [InlineKeyboardButton("‚Ü≤ –û—Ç–º–µ–Ω–∞", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            if query:
                await query.edit_message_caption(caption=message_text, reply_markup=reply_markup)
            else:
                await update.message.reply_text(text=message_text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"Error checking user registration: {e}")
        message_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        keyboard = [
            [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if query:
            try:
                await query.edit_message_caption(caption=message_text, reply_markup=reply_markup)
            except Exception as caption_error:
                logger.error(f"Error editing message caption: {caption_error}")
                await query.edit_message_text(text=message_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text=message_text, reply_markup=reply_markup)

async def show_cabinet_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    query = update.callback_query if update.callback_query else None
    photo_url = f"{API_BASE_URL}/photo/images/main.jpg"

    keyboard = [
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π", callback_data='cabinet_history')],
        [InlineKeyboardButton("üìÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏", callback_data='cabinet_current')],
        [InlineKeyboardButton("‚Ü≤ –í—ã–π—Ç–∏", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message_text = (
        "üîë –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    )

    try:
        photo_response = requests.get(photo_url)
        if photo_response.status_code == 200:
            photo_data = photo_response.content
            media = InputMediaPhoto(media=photo_data, caption=message_text)
            if query:
                await query.edit_message_media(media=media, reply_markup=reply_markup)
            else:
                await update.message.reply_photo(photo=photo_data, caption=message_text, reply_markup=reply_markup)
        else:
            if query:
                await query.edit_message_caption(caption=message_text, reply_markup=reply_markup)
            else:
                await update.message.reply_text(text=message_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"Error showing cabinet menu: {e}")
        if query:
            await query.edit_message_caption(caption=message_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text=message_text, reply_markup=reply_markup)

async def handle_personal_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = update.effective_user.id

    if data == 'cabinet_history':
        await show_history(update, context, user_id)
    elif data == 'cabinet_current':
        await show_current_appointments(update, context, user_id)
    elif data == 'personal_cabinet':
        await show_personal_cabinet(update, context)

async def handle_personal_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ"""
    user_id = update.message.from_user.id
    text = update.message.text

    if user_id in personal_states:
        state = personal_states[user_id]

        if state['step'] == 'enter_phone':
            if not validate_phone(text):
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX\n"
                    "–ü—Ä–∏–º–µ—Ä: +79255355278"
                )
                return

            state['phone'] = text
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
            try:
                response = requests.get(f"{API_BASE_URL}/api/client/by-phone/{text}")
                data = response.json()

                if data['message'] == 'success' and data['data']:
                    # –ö–ª–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º tg_id
                    client_id = data['data']['id']
                    update_response = requests.patch(f"{API_BASE_URL}/api/client/{client_id}", json={'tg_id': str(user_id)})
                    if update_response.json()['message'] == 'success':
                        await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.")
                        del personal_states[user_id]
                        await show_cabinet_menu(update, context, user_id)
                    else:
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
                else:
                    # –ö–ª–∏–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å–∏–º –∏–º—è
                    state['step'] = 'enter_name'
                    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

            except Exception as e:
                logger.error(f"Error during phone check: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

        elif state['step'] == 'enter_name':
            if not text.strip():
                await update.message.reply_text("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                return

            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                response = requests.post(f"{API_BASE_URL}/api/client", json={
                    '–∏–º—è': text.strip(),
                    '—Ç–µ–ª–µ—Ñ–æ–Ω': state['phone'],
                    'tg_id': str(user_id)
                })
                if response.json()['message'] == 'success':
                    await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.")
                    del personal_states[user_id]
                    await show_cabinet_menu(update, context, user_id)
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.")

            except Exception as e:
                logger.error(f"Error creating client: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

def validate_phone(phone):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX"""
    import re
    pattern = r'^\+7\d{10}$'
    return re.match(pattern, phone) is not None

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø–∏—Å–µ–π (–ø—Ä–æ—à–ª—ã–µ)"""
    await show_appointments(update, context, user_id, is_history=True)

async def show_current_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–±—É–¥—É—â–∏–µ)"""
    await show_appointments(update, context, user_id, is_history=False)

async def show_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, is_history: bool):
    """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–ø–∏—Å–µ–π"""
    query = update.callback_query
    photo_url = f"{API_BASE_URL}/photo/images/main.jpg"

    try:
        # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º client_id –ø–æ tg_id
        client_response = requests.get(f"{API_BASE_URL}/api/client/by-tg/{user_id}")
        client_data = client_response.json()
        if client_data['message'] != 'success' or not client_data['data']:
            raise Exception("Client not found")

        client_id = client_data['data']['id']

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ client.js)
        response = requests.get(f"{API_BASE_URL}/api/client/{client_id}/appointments")
        data = response.json()

        if data['message'] == 'success':
            appointments = data['data']['appointments']
            now = datetime.now().date()

            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏
            filtered_appointments = [
                app for app in appointments
                if (datetime.strptime(app['–¥–∞—Ç–∞'], '%Y-%m-%d').date() < now) == is_history
            ]

            if not filtered_appointments:
                message_text = "‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ."
            else:
                message_text = f"{'üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π' if is_history else 'üìÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏'}\n\n"
                for app in sorted(filtered_appointments, key=lambda x: x['–¥–∞—Ç–∞'], reverse=not is_history):
                    message_text += (
                        f"üìÜ {app['–¥–∞—Ç–∞']} {app['–≤—Ä–µ–º—è']}\n"
                        f"üéØ {app['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
                        f"üë®‚Äçüíº {app['–º–∞—Å—Ç–µ—Ä_–∏–º—è']}\n"
                        f"üíµ {app['—Ü–µ–Ω–∞']}‚ÇΩ\n\n"
                    )

            keyboard = [
                [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç", callback_data='personal_cabinet')],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            try:
                photo_response = requests.get(photo_url)
                if photo_response.status_code == 200:
                    photo_data = photo_response.content
                    media = InputMediaPhoto(media=photo_data, caption=message_text)
                    await query.edit_message_media(media=media, reply_markup=reply_markup)
                else:
                    await query.edit_message_caption(caption=message_text, reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"Error showing appointments: {e}")
                await query.edit_message_caption(caption=message_text, reply_markup=reply_markup)
        else:
            raise Exception("Error fetching appointments")

    except Exception as e:
        logger.error(f"Error fetching appointments: {e}")
        message_text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π"
        keyboard = [
            [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç", callback_data='personal_cabinet')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_caption(caption=message_text, reply_markup=reply_markup)