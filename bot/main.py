import os
import logging
import requests
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '8456369002:AAFaxelo1bXHy2hzv5vUwwt8pMAUVu5SHlM')
API_BASE_URL = os.getenv('API_BASE_URL', 'http://localhost:3000')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –≤ —Ä—É—Å—Å–∫–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
WEEKDAY_MAP = {
    'Mon': '–ø–Ω',
    'Tue': '–≤—Ç',
    'Wed': '—Å—Ä',
    'Thu': '—á—Ç',
    'Fri': '–ø—Ç',
    'Sat': '—Å–±',
    'Sun': '–≤—Å'
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data='book_appointment')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == 'book_appointment':
        await show_booking_options(query)
    elif data == 'choose_service':
        await show_services(query)
    elif data == 'choose_specialist':
        await show_specialists(query)
    elif data.startswith('service_'):
        service_id = data.split('_')[1]
        await show_specialists_for_service(query, service_id)
    elif data.startswith('specialist_'):
        specialist_id = data.split('_')[1]
        await show_services_for_specialist(query, specialist_id)
    elif data.startswith('date_nav_'):
        parts = data.split('_')
        direction = parts[2]
        target_date_str = parts[3]
        user_data = user_states.get(user_id, {})
        await show_date_selection(query, user_data.get('specialist_id'), user_data.get('service_id'), target_date_str)
    elif data.startswith('select_date_'):
        date_str = data.split('_')[2]
        await show_time_slots(query, date_str)
    elif data.startswith('time_slot_'):
        time_data = data.split('_')[2]
        await confirm_booking(query, time_data)
    elif data == 'view_week_schedule':
        await show_week_schedule(query)
    elif data == 'back_to_main':
        await start_callback(query)
    elif data == 'no_date_available':
        await query.answer("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
    elif data == 'back_to_selection':
        await show_booking_options(query)
    elif data.startswith('select_service_'):
        parts = data.split('_')
        service_id = parts[2]
        specialist_id = parts[3]
        await show_date_selection(query, specialist_id, service_id)
    elif data.startswith('select_specialist_'):
        parts = data.split('_')
        specialist_id = parts[2]
        service_id = parts[3]
        await show_date_selection(query, specialist_id, service_id)
    elif data.startswith('all_specialists_schedule_'):
        service_id = data.split('_')[3]
        await show_all_specialists_schedule(query, service_id)
    elif data == 'no_available_options':
        await query.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
    elif data == 'try_later':
        await query.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    elif data.startswith('week_nav_'):
        parts = data.split('_')
        direction = parts[2]
        target_date_str = parts[3]
        await show_week_schedule(query, target_date_str)
    elif data.startswith('all_schedule_nav_'):
        parts = data.split('_')
        direction = parts[3]
        target_date_str = parts[4]
        service_id = parts[5]
        await show_all_specialists_schedule(query, service_id, target_date_str)
    elif data == 'cancel_to_main':
        await start_callback(query)

async def show_booking_options(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø–∏—Å–∏"""
    keyboard = [
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É", callback_data='choose_service')],
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data='choose_specialist')],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data='view_week_schedule')],
        [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?",
        reply_markup=reply_markup
    )

async def show_services(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/services")
        data = response.json()
        
        if data['message'] == 'success':
            services = data['data']
            keyboard = []
            
            for service in services:
                specialists_response = requests.get(f"{API_BASE_URL}/api/service/{service['id']}/specialists")
                
                if specialists_response.json()['message'] == 'success':
                    specialists = specialists_response.json()['data']
                    
                    has_available_time = False
                    for specialist in specialists:
                        today = datetime.now()
                        start_date = today.strftime('%Y-%m-%d')
                        end_date = (today + timedelta(days=7)).strftime('%Y-%m-%d')
                        
                        dates_response = requests.get(
                            f"{API_BASE_URL}/api/specialist/{specialist['id']}/service/{service['id']}/available-dates",
                            params={'start': start_date, 'end': end_date}
                        )
                        
                        if (dates_response.json()['message'] == 'success' and 
                            dates_response.json()['availableDates']):
                            has_available_time = True
                            break
                    
                    if has_available_time:
                        keyboard.append([
                            InlineKeyboardButton(
                                f"{service['–Ω–∞–∑–≤–∞–Ω–∏–µ']} - {service['—Ü–µ–Ω–∞']}‚ÇΩ",
                                callback_data=f'service_{service["id"]}'
                            )
                        ])
            
            if not keyboard:
                await query.edit_message_text(
                    "‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üë®‚Äçüíº –í—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data='choose_specialist')],
                        [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è", callback_data='view_week_schedule')],
                        [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='book_appointment')],
                        [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
                    ])
                )
                return
            
            keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='book_appointment')])
            keyboard.append([InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥")
            
    except Exception as e:
        logger.error(f"Error fetching services: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

async def show_specialists(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/specialists")
        data = response.json()
        
        if data['message'] == 'success':
            specialists = data['data']
            keyboard = []
            
            for specialist in specialists:
                services_response = requests.get(f"{API_BASE_URL}/api/specialist/{specialist['id']}/services")
                
                if services_response.json()['message'] == 'success':
                    services = services_response.json()['data']
                    
                    has_available_time = False
                    for service in services:
                        today = datetime.now()
                        start_date = today.strftime('%Y-%m-%d')
                        end_date = (today + timedelta(days=7)).strftime('%Y-%m-%d')
                        
                        dates_response = requests.get(
                            f"{API_BASE_URL}/api/specialist/{specialist['id']}/service/{service['id']}/available-dates",
                            params={'start': start_date, 'end': end_date}
                        )
                        
                        if (dates_response.json()['message'] == 'success' and 
                            dates_response.json()['availableDates']):
                            has_available_time = True
                            break
                    
                    if has_available_time:
                        keyboard.append([
                            InlineKeyboardButton(
                                f"{specialist['–∏–º—è']}",
                                callback_data=f'specialist_{specialist["id"]}'
                            )
                        ])
            
            if not keyboard:
                await query.edit_message_text(
                    "‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üéØ –í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É", callback_data='choose_service')],
                        [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è", callback_data='view_week_schedule')],
                        [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='book_appointment')],
                        [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
                    ])
                )
                return
            
            keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='choose_specialist')])
            keyboard.append([InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:",
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤")
            
    except Exception as e:
        logger.error(f"Error fetching specialists: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

async def show_specialists_for_service(query, service_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/service/{service_id}/specialists")
        data = response.json()
        
        if data['message'] == 'success':
            specialists = data['data']
            
            if not specialists:
                await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏")
                return
            
            keyboard = []
            for specialist in specialists:
                today = datetime.now()
                start_date = today.strftime('%Y-%m-%d')
                end_date = (today + timedelta(days=7)).strftime('%Y-%m-%d')
                
                dates_response = requests.get(
                    f"{API_BASE_URL}/api/specialist/{specialist['id']}/service/{service_id}/available-dates",
                    params={'start': start_date, 'end': end_date}
                )
                
                if (dates_response.json()['message'] == 'success' and 
                    dates_response.json()['availableDates']):
                    keyboard.append([
                        InlineKeyboardButton(
                            f"{specialist['–∏–º—è']}",
                            callback_data=f'select_specialist_{specialist["id"]}_{service_id}'
                        )
                    ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤"
            keyboard.append([
                InlineKeyboardButton(
                    "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤",
                    callback_data=f'all_specialists_schedule_{service_id}'
                )
            ])
            
            if not keyboard:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —É—Å–ª—É–≥—É –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ."
                )
                return
            
            keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='choose_service')])
            keyboard.append([InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
            service_response = requests.get(f"{API_BASE_URL}/api/service/{service_id}")
            service_name = service_response.json()['data']['–Ω–∞–∑–≤–∞–Ω–∏–µ'] if service_response.json()['message'] == 'success' else "–£—Å–ª—É–≥–∞"
            
            await query.edit_message_text(
                f"üéØ –£—Å–ª—É–≥–∞: {service_name}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤:",
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤")
            
    except Exception as e:
        logger.error(f"Error fetching specialists for service: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

async def show_all_specialists_schedule(query, service_id, target_date_str=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –Ω–µ–¥–µ–ª—è–º"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        user_states[user_id] = {
            'service_id': service_id
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        today = datetime.now().date()
        if target_date_str:
            current_date = datetime.strptime(target_date_str, '%Y-%m-%d').date()
        else:
            current_date = today
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        start_of_week = current_date - timedelta(days=current_date.weekday())
        end_of_week = start_of_week + timedelta(days=6)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º from_date –Ω–µ —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
        from_date = max(start_of_week, today)
        to_date = end_of_week
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        from_date_str = from_date.strftime('%Y-%m-%d')
        to_date_str = to_date.strftime('%Y-%m-%d')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Å–ª—É–≥–∏
        response = requests.get(
            f"{API_BASE_URL}/api/freetime-available",
            params={'fromDate': from_date_str, 'toDate': to_date_str}
        )
        data = response.json()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
        service_response = requests.get(f"{API_BASE_URL}/api/service/{service_id}")
        service_name = service_response.json()['data']['–Ω–∞–∑–≤–∞–Ω–∏–µ'] if service_response.json()['message'] == 'success' else "–£—Å–ª—É–≥–∞"
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üéØ –£—Å–ª—É–≥–∞: {service_name}\n\n"
            f"üìÖ –°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –Ω–µ–¥–µ–ª—é ({start_of_week.strftime('%d.%m')} - {end_of_week.strftime('%d.%m')}):\n\n"
        )
        
        keyboard = []
        if data['message'] == 'success':
            schedule = [item for item in data['data'] if str(item['—É—Å–ª—É–≥–∞_id']) == str(service_id)]
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            schedule_by_date = {}
            for item in schedule:
                date = item['–¥–∞—Ç–∞']
                if date not in schedule_by_date:
                    schedule_by_date[date] = []
                schedule_by_date[date].append(item)
            
            for date, items in sorted(schedule_by_date.items()):
                formatted_date = datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m')
                message += f"üìÜ {formatted_date}:\n"
                
                for item in items:
                    message += f"   ‚è∞ {item['–≤—Ä–µ–º—è']} - {item['–º–∞—Å—Ç–µ—Ä_–∏–º—è']}\n"
                    keyboard.append([
                        InlineKeyboardButton(
                            f"{formatted_date} {item['–≤—Ä–µ–º—è']} - {item['–º–∞—Å—Ç–µ—Ä_–∏–º—è']}",
                            callback_data=f'time_slot_{item["id"]}'
                        )
                    ])
                
                message += "\n"
            
            if not schedule:
                message += "‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ\n"
        
        else:
            message += "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        prev_week_start = start_of_week - timedelta(days=7)
        next_week_start = start_of_week + timedelta(days=7)
        
        nav_buttons = [
            InlineKeyboardButton(
                "‚¨ÖÔ∏è –ü—Ä–µ–¥. –Ω–µ–¥–µ–ª—è",
                callback_data=f'all_schedule_nav_prev_{prev_week_start.strftime("%Y-%m-%d")}_{service_id}'
            ),
            InlineKeyboardButton(
                "–°–ª–µ–¥. –Ω–µ–¥–µ–ª—è ‚û°Ô∏è",
                callback_data=f'all_schedule_nav_next_{next_week_start.strftime("%Y-%m-%d")}_{service_id}'
            )
        ]
        keyboard.append(nav_buttons)
        
        keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data=f'service_{service_id}')])
        keyboard.append([InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"Error fetching all specialists schedule: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

async def show_services_for_specialist(query, specialist_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/specialist/{specialist_id}/services")
        data = response.json()
        
        if data['message'] == 'success':
            services = data['data']
            
            if not services:
                await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞")
                return
            
            keyboard = []
            for service in services:
                today = datetime.now()
                start_date = today.strftime('%Y-%m-%d')
                end_date = (today + timedelta(days=7)).strftime('%Y-%m-%d')
                
                dates_response = requests.get(
                    f"{API_BASE_URL}/api/specialist/{specialist_id}/service/{service['id']}/available-dates",
                    params={'start': start_date, 'end': end_date}
                )
                
                if (dates_response.json()['message'] == 'success' and 
                    dates_response.json()['availableDates']):
                    keyboard.append([
                        InlineKeyboardButton(
                            f"{service['–Ω–∞–∑–≤–∞–Ω–∏–µ']} - {service['—Ü–µ–Ω–∞']}‚ÇΩ",
                            callback_data=f'select_service_{service["id"]}_{specialist_id}'
                        )
                    ])
            
            if not keyboard:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç —É—Å–ª—É–≥ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ."
                )
                return
            
            keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='choose_specialist')])
            keyboard.append([InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞:",
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥")
            
    except Exception as e:
        logger.error(f"Error fetching services for specialist: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

async def show_date_selection(query, specialist_id, service_id, current_date_str=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏ –∏ –º–∞—Å—Ç–µ—Ä–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –Ω–µ–¥–µ–ª—è–º"""
    try:
        user_id = query.from_user.id
        user_states[user_id] = {
            'specialist_id': specialist_id,
            'service_id': service_id
        }
        
        if current_date_str:
            current_date = datetime.strptime(current_date_str, '%Y-%m-%d')
        else:
            current_date = datetime.now()
        
        start_of_week = current_date - timedelta(days=current_date.weekday())
        end_of_week = start_of_week + timedelta(days=6)
        
        start_date = start_of_week.strftime('%Y-%m-%d')
        end_date = end_of_week.strftime('%Y-%m-%d')
        
        response = requests.get(
            f"{API_BASE_URL}/api/specialist/{specialist_id}/service/{service_id}/available-dates",
            params={'start': start_date, 'end': end_date}
        )
        
        service_response = requests.get(f"{API_BASE_URL}/api/service/{service_id}")
        specialist_response = requests.get(f"{API_BASE_URL}/api/specialist/{specialist_id}")
        
        service_name = service_response.json()['data']['–Ω–∞–∑–≤–∞–Ω–∏–µ'] if service_response.json()['message'] == 'success' else "–£—Å–ª—É–≥–∞"
        specialist_name = specialist_response.json()['data']['–∏–º—è'] if specialist_response.json()['message'] == 'success' else "–ú–∞—Å—Ç–µ—Ä"
        
        keyboard = []
        current_date_obj = start_of_week
        
        if response.json()['message'] == 'success':
            available_dates = response.json()['availableDates'] or []
            
            for i in range(7):
                date_str = current_date_obj.strftime('%Y-%m-%d')
                date_display = current_date_obj.strftime('%d.%m')
                day_name = WEEKDAY_MAP[current_date_obj.strftime('%a')]
                
                if date_str in available_dates:
                    keyboard.append([
                        InlineKeyboardButton(
                            f"üìÖ {date_display} ({day_name})",
                            callback_data=f'select_date_{date_str}'
                        )
                    ])
                else:
                    keyboard.append([
                        InlineKeyboardButton(
                            f"‚ùå {date_display} ({day_name})",
                            callback_data='no_date_available'
                        )
                    ])
                
                current_date_obj += timedelta(days=1)
        else:
            for i in range(7):
                date_str = current_date_obj.strftime('%Y-%m-%d')
                date_display = current_date_obj.strftime('%d.%m')
                day_name = WEEKDAY_MAP[current_date_obj.strftime('%a')]
                
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚ùå {date_display} ({day_name})",
                        callback_data='no_date_available'
                    )
                ])
                current_date_obj += timedelta(days=1)
        
        prev_week_start = start_of_week - timedelta(days=7)
        next_week_start = start_of_week + timedelta(days=7)
        
        nav_buttons = [
            InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥. –Ω–µ–¥–µ–ª—è", callback_data=f'date_nav_prev_{prev_week_start.strftime("%Y-%m-%d")}'),
            InlineKeyboardButton("–°–ª–µ–¥. –Ω–µ–¥–µ–ª—è ‚û°Ô∏è", callback_data=f'date_nav_next_{next_week_start.strftime("%Y-%m-%d")}')
        ]
        keyboard.append(nav_buttons)
        
        keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='back_to_selection')])
        keyboard.append([InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üéØ –£—Å–ª—É–≥–∞: {service_name}\n"
            f"üë®‚Äçüíº –ú–∞—Å—Ç–µ—Ä: {specialist_name}\n\n"
            f"–ù–µ–¥–µ–ª—è: {start_of_week.strftime('%d.%m')} - {end_of_week.strftime('%d.%m')}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏:",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"Error showing date selection: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

async def show_time_slots(query, date_str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    user_id = query.from_user.id
    user_data = user_states.get(user_id, {})
    specialist_id = user_data.get('specialist_id')
    service_id = user_data.get('service_id')
    
    if not specialist_id or not service_id:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –º–∞—Å—Ç–µ—Ä –∏–ª–∏ —É—Å–ª—É–≥–∞")
        return
    
    try:
        response = requests.get(
            f"{API_BASE_URL}/api/specialist/{specialist_id}/service/{service_id}/schedule/{date_str}"
        )
        data = response.json()
        
        if data['message'] == 'success':
            time_slots = data['data']
            
            if not time_slots:
                await query.edit_message_text("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É")
                return
            
            keyboard = []
            for slot in time_slots:
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚è∞ {slot['–≤—Ä–µ–º—è']}",
                        callback_data=f'time_slot_{slot["id"]}'
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data=f'select_date_{date_str}')])
            keyboard.append([InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ {datetime.strptime(date_str, '%Y-%m-%d').strftime('%d.%m.%Y')}:",
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–µ–º–µ–Ω–∏")
            
    except Exception as e:
        logger.error(f"Error fetching time slots: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

async def confirm_booking(query, schedule_id):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/schedule/{schedule_id}")
        data = response.json()
        
        if data['message'] == 'success':
            schedule = data['data']
            
            message = (
                f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n\n"
                f"üìÖ –î–∞—Ç–∞: {datetime.strptime(schedule['–¥–∞—Ç–∞'], '%Y-%m-%d').strftime('%d.%m.%Y')}\n"
                f"‚è∞ –í—Ä–µ–º—è: {schedule['–≤—Ä–µ–º—è']}\n"
                f"üéØ –£—Å–ª—É–≥–∞: {schedule['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
                f"üë®‚Äçüíº –ú–∞—Å—Ç–µ—Ä: {schedule['–º–∞—Å—Ç–µ—Ä_–∏–º—è']}\n"
                f"üíµ –¶–µ–Ω–∞: {schedule['—É—Å–ª—É–≥–∞_—Ü–µ–Ω–∞']}‚ÇΩ\n\n"
                f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
            )
            
            user_states[query.from_user.id] = {
                'schedule_id': schedule_id,
                'service_id': schedule['—É—Å–ª—É–≥–∞_id'],
                'specialist_id': schedule['–º–∞—Å—Ç–µ—Ä_id'],
                'date': schedule['–¥–∞—Ç–∞'],
                'time': schedule['–≤—Ä–µ–º—è'],
                'step': 'name'
            }
            
            keyboard = [
                [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(message, reply_markup=reply_markup)
            
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏")
            
    except Exception as e:
        logger.error(f"Error confirming booking: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

async def show_week_schedule(query, target_date_str=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –Ω–µ–¥–µ–ª—é —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    try:
        today = datetime.now().date()
        
        if target_date_str:
            target_date = datetime.strptime(target_date_str, '%Y-%m-%d').date()
        else:
            target_date = today
        
        start_of_week = target_date - timedelta(days=target_date.weekday())
        end_of_week = start_of_week + timedelta(days=6)
        
        from_date = max(start_of_week, today)
        to_date = end_of_week
        
        from_date_str = from_date.strftime('%Y-%m-%d')
        to_date_str = to_date.strftime('%Y-%m-%d')
        
        response = requests.get(f"{API_BASE_URL}/api/freetime-available?fromDate={from_date_str}&toDate={to_date_str}")
        data = response.json()
        
        message = f"üìÖ –°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –Ω–µ–¥–µ–ª—é ({start_of_week.strftime('%d.%m')} - {end_of_week.strftime('%d.%m')}):\n\n"
        keyboard = []
        
        if data['message'] == 'success':
            schedule = data['data']
            
            schedule_by_date = {}
            for item in schedule:
                date = item['–¥–∞—Ç–∞']
                if date not in schedule_by_date:
                    schedule_by_date[date] = []
                schedule_by_date[date].append(item)
            
            for date, items in sorted(schedule_by_date.items()):
                formatted_date = datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m')
                message += f"üìÜ {formatted_date}:\n"
                
                for item in items:
                    message += f"   ‚è∞ {item['–≤—Ä–µ–º—è']} - {item['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']} ({item['–º–∞—Å—Ç–µ—Ä_–∏–º—è']})\n"
                    keyboard.append([
                        InlineKeyboardButton(
                            f"{formatted_date} {item['–≤—Ä–µ–º—è']} - {item['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}",
                            callback_data=f'time_slot_{item["id"]}'
                        )
                    ])
                
                message += "\n"
            
            if not schedule:
                message += "‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ\n"
        
        else:
            message += "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
        
        prev_week_start = start_of_week - timedelta(days=7)
        next_week_start = start_of_week + timedelta(days=7)
        
        nav_buttons = [
            InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥. –Ω–µ–¥–µ–ª—è", callback_data=f'week_nav_prev_{prev_week_start.strftime("%Y-%m-%d")}'),
            InlineKeyboardButton("–°–ª–µ–¥. –Ω–µ–¥–µ–ª—è ‚û°Ô∏è", callback_data=f'week_nav_next_{next_week_start.strftime("%Y-%m-%d")}')
        ]
        keyboard.append(nav_buttons)
        
        keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='book_appointment')])
        keyboard.append([InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"Error fetching week schedule: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.message.from_user.id
    text = update.message.text
    
    if user_id in user_states:
        user_data = user_states[user_id]
        
        if user_data.get('step') == 'name':
            user_data['client_name'] = text
            user_data['step'] = 'phone'
            await update.message.reply_text(
                "üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:\n\n"
                "–ü—Ä–∏–º–µ—Ä: +79255355278"
            )
            
        elif user_data.get('step') == 'phone':
            if not validate_phone(text):
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX\n"
                    "–ü—Ä–∏–º–µ—Ä: +79255355278"
                )
                return
            
            user_data['client_phone'] = text
            
            try:
                response = requests.post(f"{API_BASE_URL}/api/appointment", json={
                    'specialistId': user_data['specialist_id'],
                    'serviceId': user_data['service_id'],
                    'date': user_data['date'],
                    'time': user_data['time'],
                    'clientName': user_data['client_name'],
                    'clientPhone': user_data['client_phone']
                })
                
                if response.json().get('message') == 'success':
                    await update.message.reply_text(
                        "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                        "–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
                    )
                    
                    requests.patch(f"{API_BASE_URL}/api/schedule/{user_data['schedule_id']}", json={
                        '–¥–æ—Å—Ç—É–ø–Ω–æ': 0
                    })
                    
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")
                    
            except Exception as e:
                logger.error(f"Error creating appointment: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
            
            del user_states[user_id]

def validate_phone(phone):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX"""
    import re
    pattern = r'^\+7\d{10}$'
    return re.match(pattern, phone) is not None

async def start_callback(query):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—É"""
    keyboard = [
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data='book_appointment')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    application.run_polling()

if __name__ == '__main__':
    main()