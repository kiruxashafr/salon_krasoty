# main.py
import os
import logging
import requests
from admin import show_admin_panel, handle_admin_callback, handle_admin_message
from datetime import datetime, timedelta
from personal_cabinet import handle_personal_callback, handle_personal_message
from menu_handlers import show_main_menu, handle_menu_callback
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from admin import handle_admin_message, admin_states
from admin import show_admin_panel, handle_admin_callback, handle_admin_message, admin_states
from personal_cabinet import handle_personal_message, personal_states
from dotenv import load_dotenv
bot = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env')



# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = os.getenv('API_BASE_URL')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
if not API_BASE_URL:
    logger.error("‚ùå API_BASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")




# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –≤ —Ä—É—Å—Å–∫–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
WEEKDAY_MAP = {
    'Mon': '–ø–Ω',
    'Tue': '–≤—Ç',
    'Wed': '—Å—Ä',
    'Thu': '—á—Ç',
    'Fri': '–ø—Ç',
    'Sat': '—Å–±',
    'Sun': '–≤—Å'
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await show_main_menu(update, context)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    print(f"DEBUG: Received callback: {data} from user: {user_id}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –∑–∞–ø—Ä–æ—Å—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    admin_prefixes = [
        'admin_panel', 'admin_add_freetime', 'admin_my_records', 
        'admin_my_appointments', 'admin_my_freetime', 'admin_back_to_records',
        'admin_back_to_services', 'admin_broadcast', 'admin_broadcast_menu',
        'admin_create_broadcast', 'admin_clients_list', 'admin_confirm_broadcast'
    ]
    
    admin_starts_with = [
        'admin_select_service_', 'admin_select_date_'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ callback –∞–¥–º–∏–Ω—Å–∫–∏–º
    is_admin_callback = False
    
    if data in admin_prefixes:
        is_admin_callback = True
    else:
        for prefix in admin_starts_with:
            if data.startswith(prefix):
                is_admin_callback = True
                break
    
    if is_admin_callback:
        await handle_admin_callback(update, context)
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –∑–∞–ø—Ä–æ—Å—ã –º–µ–Ω—é
    if data in ['back_to_main', 'masters_menu', 'services_menu'] or \
       data.startswith('master_detail_') or data.startswith('service_detail_') or \
       data.startswith('book_master_') or data.startswith('book_service_'):
        await handle_menu_callback(update, context)
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –∑–∞–ø—Ä–æ—Å—ã –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –∑–∞–ø—Ä–æ—Å—ã –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    if data in ['personal_cabinet', 'cabinet_history', 'cabinet_current', 'cabinet_logout']:
        await handle_personal_callback(update, context)
        return
    
    # –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if data == 'main_menu':
        await show_main_menu(update, context)
        return
    
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if data == 'view_week_schedule':
        await show_week_calendar(query)
    elif data.startswith('week_calendar_nav_'):
        parts = data.split('_')
        direction = parts[3]
        target_date_str = parts[4]
        await show_week_calendar(query, target_date_str)
    elif data.startswith('view_day_schedule_'):
        date_str = data.split('_')[3]
        await show_day_schedule(query, date_str)
    if data == 'book_appointment':
        await show_booking_options(query)
    elif data == 'choose_service':
        await show_services(query)
    elif data == 'choose_specialist':
        await show_specialists(query)
    elif data.startswith('time_slot_'):
        await confirm_booking(update, context)
    elif data.startswith('confirm_appointment_'):
        await process_confirmed_appointment(update, context)
    elif data.startswith('service_'):
        service_id = data.split('_')[1]
        await show_specialists_for_service(query, service_id)
    elif data.startswith('specialist_'):
        specialist_id = data.split('_')[1]
        await show_services_for_specialist(query, specialist_id)
    elif data.startswith('date_nav_'):
        parts = data.split('_')
        direction = parts[2]
        target_date_str = parts[3]
        user_data = user_states.get(user_id, {})
        await show_date_selection(query, user_data.get('specialist_id'), user_data.get('service_id'), target_date_str)
    elif data.startswith('select_date_'):
        date_str = data.split('_')[2]
        await show_time_slots(query, date_str)
    elif data.startswith('back_to_date_'):
        date_str = data.split('_')[3]
        user_data = user_states.get(user_id, {})
        await show_date_selection(query, user_data.get('specialist_id'), user_data.get('service_id'), date_str)
    elif data.startswith('time_slot_'):
        time_data = data.split('_')[2]
        await confirm_booking(query, time_data)
    elif data == 'view_week_schedule':
        await show_week_schedule(query)
    elif data == 'back_to_main':
        await start_callback(query)
    elif data == 'no_date_available':
        await query.answer("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
    elif data == 'back_to_selection':
        await show_booking_options(query)
    elif data.startswith('select_service_'):
        parts = data.split('_')
        service_id = parts[2]
        specialist_id = parts[3]
        await show_date_selection(query, specialist_id, service_id)
    elif data.startswith('select_specialist_'):
        parts = data.split('_')
        specialist_id = parts[2]
        service_id = parts[3]
        await show_date_selection(query, specialist_id, service_id)
    elif data.startswith('all_specialists_schedule_'):
        service_id = data.split('_')[3]
        await show_all_specialists_schedule(query, service_id)
    elif data == 'no_available_options':
        await query.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
    elif data == 'try_later':
        await query.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    elif data.startswith('week_nav_'):
        parts = data.split('_')
        direction = parts[2]
        target_date_str = parts[3]
        await show_week_schedule(query, target_date_str)

    elif data == 'contacts_menu':
        from menu_handlers import show_contacts_menu
        await show_contacts_menu(update, context)
        return
    elif data.startswith('all_schedule_nav_'):
        parts = data.split('_')
        direction = parts[3]
        target_date_str = parts[4]
        service_id = parts[5]
        await show_all_specialists_schedule(query, service_id, target_date_str)
    elif data == 'cancel_to_main':
        await start_callback(query)


        
# –í —Ñ—É–Ω–∫—Ü–∏–∏ show_booking_options –∑–∞–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É:

async def show_booking_options(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø–∏—Å–∏"""
    keyboard = [
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É", callback_data='choose_service')],
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data='choose_specialist')],
        [InlineKeyboardButton("üóìÔ∏è –í—Å–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è", callback_data='view_week_schedule')],  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message_text = "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?"
    
    photo_url = f"{API_BASE_URL}/photo/images/zapis.jpg"
    
    try:
        photo_response = requests.get(photo_url)
        if photo_response.status_code == 200:
            photo_data = photo_response.content
            media = InputMediaPhoto(media=photo_data, caption=message_text)
            await query.edit_message_media(media=media, reply_markup=reply_markup)
        else:
            await query.edit_message_text(text=message_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"Error in show_booking_options: {e}")
        await query.edit_message_text(text=message_text, reply_markup=reply_markup)


async def show_services(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º (–≤ –±—É–¥—É—â–µ–º)"""
    photo_url = f"{API_BASE_URL}/photo/images/zapis.jpg"
    try:
        response = requests.get(f"{API_BASE_URL}/api/services")
        data = response.json()
        
        if data['message'] == 'success':
            services = data['data']
            keyboard = []
            
            for service in services:
                specialists_response = requests.get(f"{API_BASE_URL}/api/service/{service['id']}/specialists")
                
                if specialists_response.json()['message'] == 'success':
                    specialists = specialists_response.json()['data']
                    
                    has_available_time = False
                    for specialist in specialists:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ)
                        dates_response = requests.get(
                            f"{API_BASE_URL}/api/specialist/{specialist['id']}/service/{service['id']}/available-dates",
                            params={'start': datetime.now().strftime('%Y-%m-%d'), 'end': '2099-12-31'}
                        )
                        
                        if (dates_response.json()['message'] == 'success' and 
                            dates_response.json()['availableDates']):
                            has_available_time = True
                            break
                    
                    if has_available_time:
                        keyboard.append([
                            InlineKeyboardButton(
                                f"{service['–Ω–∞–∑–≤–∞–Ω–∏–µ']} - {service['—Ü–µ–Ω–∞']}‚ÇΩ",
                                callback_data=f'service_{service["id"]}'
                            )
                        ])
            
            if not keyboard:
                message_text = (
                    "‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é:"
                )
                keyboard = [
                    [InlineKeyboardButton("‚ô¢ –í—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data='choose_specialist')],
                    [InlineKeyboardButton("‚â£ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è", callback_data='view_week_schedule')],
                    [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='book_appointment')],
                    [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                try:
                    photo_response = requests.get(photo_url)
                    if photo_response.status_code == 200:
                        photo_data = photo_response.content
                        media = InputMediaPhoto(media=photo_data, caption=message_text)
                        await query.edit_message_media(media=media, reply_markup=reply_markup)
                    else:
                        await query.edit_message_text(text=message_text, reply_markup=reply_markup)
                except Exception as e:
                    logger.error(f"Error in show_services (no services): {e}")
                    await query.edit_message_text(text=message_text, reply_markup=reply_markup)
                return
            
            keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='book_appointment')])
            keyboard.append([InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            message_text = "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:"
            
            try:
                photo_response = requests.get(photo_url)
                if photo_response.status_code == 200:
                    photo_data = photo_response.content
                    media = InputMediaPhoto(media=photo_data, caption=message_text)
                    await query.edit_message_media(media=media, reply_markup=reply_markup)
                else:
                    await query.edit_message_text(text=message_text, reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"Error in show_services: {e}")
                await query.edit_message_text(text=message_text, reply_markup=reply_markup)
        else:
            message_text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥"
            keyboard = [
                [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text=message_text, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"Error fetching services: {e}")
        message_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        keyboard = [
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=message_text, reply_markup=reply_markup)

async def show_specialists(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º (–≤ –±—É–¥—É—â–µ–º)"""
    photo_url = f"{API_BASE_URL}/photo/images/zapis.jpg"
    try:
        response = requests.get(f"{API_BASE_URL}/api/specialists")
        data = response.json()
        
        if data['message'] == 'success':
            specialists = data['data']
            keyboard = []
            
            for specialist in specialists:
                services_response = requests.get(f"{API_BASE_URL}/api/specialist/{specialist['id']}/services")
                
                if services_response.json()['message'] == 'success':
                    services = services_response.json()['data']
                    
                    has_available_time = False
                    for service in services:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ)
                        dates_response = requests.get(
                            f"{API_BASE_URL}/api/specialist/{specialist['id']}/service/{service['id']}/available-dates",
                            params={'start': datetime.now().strftime('%Y-%m-%d'), 'end': '2099-12-31'}
                        )
                        
                        if (dates_response.json()['message'] == 'success' and 
                            dates_response.json()['availableDates']):
                            has_available_time = True
                            break
                    
                    if has_available_time:
                        keyboard.append([
                            InlineKeyboardButton(
                                f"{specialist['–∏–º—è']}",
                                callback_data=f'specialist_{specialist["id"]}'
                            )
                        ])
            
            if not keyboard:
                message_text = (
                    "‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é:"
                )
                keyboard = [
                    [InlineKeyboardButton("üéØ –í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É", callback_data='choose_service')],
                    [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è", callback_data='view_week_schedule')],
                    [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='book_appointment')],
                    [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                try:
                    photo_response = requests.get(photo_url)
                    if photo_response.status_code == 200:
                        photo_data = photo_response.content
                        media = InputMediaPhoto(media=photo_data, caption=message_text)
                        await query.edit_message_media(media=media, reply_markup=reply_markup)
                    else:
                        await query.edit_message_text(text=message_text, reply_markup=reply_markup)
                except Exception as e:
                    logger.error(f"Error in show_specialists (no specialists): {e}")
                    await query.edit_message_text(text=message_text, reply_markup=reply_markup)
                return
            
            keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='back_to_selection')])
            keyboard.append([InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:"
            
            try:
                photo_response = requests.get(photo_url)
                if photo_response.status_code == 200:
                    photo_data = photo_response.content
                    media = InputMediaPhoto(media=photo_data, caption=message_text)
                    await query.edit_message_media(media=media, reply_markup=reply_markup)
                else:
                    await query.edit_message_text(text=message_text, reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"Error in show_specialists: {e}")
                await query.edit_message_text(text=message_text, reply_markup=reply_markup)
        else:
            message_text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤"
            keyboard = [
                [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text=message_text, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"Error fetching specialists: {e}")
        message_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        keyboard = [
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=message_text, reply_markup=reply_markup)

async def handle_cancel_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
    query = update.callback_query
    await query.answer()
    await show_main_menu(update, context)

async def show_specialists_for_service(query, service_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏ (–ø—Ä–æ–≤–µ—Ä—è—è –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º)"""
    photo_url = f"{API_BASE_URL}/photo/images/zapis.jpg"
    try:
        response = requests.get(f"{API_BASE_URL}/api/service/{service_id}/specialists")
        data = response.json()
        
        if data['message'] == 'success':
            specialists = data['data']
            
            if not specialists:
                message_text = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏"
                keyboard = [
                    [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='choose_service')],
                    [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                try:
                    if query.message.photo:
                        await query.edit_message_caption(caption=message_text, reply_markup=reply_markup)
                    else:
                        await query.edit_message_text(text=message_text, reply_markup=reply_markup)
                except Exception as e:
                    logger.error(f"Error editing message (no specialists): {e}")
                    await query.message.reply_text(text=message_text, reply_markup=reply_markup)
                return
            
            keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='choose_service')])
            keyboard.append([InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:"
            
            try:
                photo_response = requests.get(photo_url)
                if photo_response.status_code == 200:
                    photo_data = photo_response.content
                    media = InputMediaPhoto(media=photo_data, caption=message_text)
                    await query.edit_message_media(media=media, reply_markup=reply_markup)
                else:
                    await query.edit_message_text(text=message_text, reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"Error in show_specialists_for_service: {e}")
                await query.edit_message_text(text=message_text, reply_markup=reply_markup)
        else:
            message_text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤"
            keyboard = [
                [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            if query.message.photo:
                await query.edit_message_caption(caption=message_text, reply_markup=reply_markup)
            else:
                await query.edit_message_text(text=message_text, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"Error fetching specialists for service: {e}")
        message_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        keyboard = [
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            if query.message.photo:
                await query.edit_message_caption(caption=message_text, reply_markup=reply_markup)
            else:
                await query.edit_message_text(text=message_text, reply_markup=reply_markup)
        except Exception as edit_error:
            logger.error(f"Error editing error message: {edit_error}")
            await query.message.reply_text(text=message_text, reply_markup=reply_markup)


async def show_services_for_specialist(query, specialist_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ (–ø—Ä–æ–≤–µ—Ä—è—è –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º)"""
    photo_url = f"{API_BASE_URL}/photo/images/zapis.jpg"
    try:
        response = requests.get(f"{API_BASE_URL}/api/specialist/{specialist_id}/services")
        data = response.json()
        
        if data['message'] == 'success':
            services = data['data']
            
            if not services:
                message_text = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞"
                keyboard = [
                    [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='choose_specialist')],
                    [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
                    if query.message.photo:
                        await query.edit_message_caption(caption=message_text, reply_markup=reply_markup)
                    else:
                        await query.edit_message_text(text=message_text, reply_markup=reply_markup)
                except Exception as e:
                    logger.error(f"Error editing message (no services): {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.message.reply_text(text=message_text, reply_markup=reply_markup)
                return
            
            keyboard = []
            for service in services:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
                dates_response = requests.get(
                    f"{API_BASE_URL}/api/specialist/{specialist_id}/service/{service['id']}/available-dates",
                    params={'start': datetime.now().strftime('%Y-%m-%d'), 'end': '2099-12-31'}
                )
                
                if (dates_response.json()['message'] == 'success' and 
                    dates_response.json()['availableDates']):
                    keyboard.append([
                        InlineKeyboardButton(
                            f"{service['–Ω–∞–∑–≤–∞–Ω–∏–µ']} - {service['—Ü–µ–Ω–∞']}‚ÇΩ",
                            callback_data=f'select_service_{service["id"]}_{specialist_id}'
                        )
                    ])
            
            if not keyboard:
                message_text = (
                    "‚ùå –ù–µ—Ç —É—Å–ª—É–≥ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∂–µ."
                )
                keyboard = [
                    [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='choose_specialist')],
                    [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                try:
                    photo_response = requests.get(photo_url)
                    if photo_response.status_code == 200:
                        photo_data = photo_response.content
                        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ñ–æ—Ç–æ
                        try:
                            media = InputMediaPhoto(media=photo_data, caption=message_text)
                            await query.edit_message_media(media=media, reply_markup=reply_markup)
                        except Exception as media_error:
                            logger.error(f"Error editing media (no services): {media_error}")
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞, –ø—Ä–æ–±—É–µ–º –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç/–ø–æ–¥–ø–∏—Å—å
                            if query.message.photo:
                                await query.edit_message_caption(caption=message_text, reply_markup=reply_markup)
                            else:
                                await query.edit_message_text(text=message_text, reply_markup=reply_markup)
                    else:
                        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç/–ø–æ–¥–ø–∏—Å—å
                        if query.message.photo:
                            await query.edit_message_caption(caption=message_text, reply_markup=reply_markup)
                        else:
                            await query.edit_message_text(text=message_text, reply_markup=reply_markup)
                except Exception as e:
                    logger.error(f"Error in show_services_for_specialist (no services): {e}")
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.message.reply_text(text=message_text, reply_markup=reply_markup)
                return
            
            keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='choose_specialist')])
            keyboard.append([InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            message_text = "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:"
            
            try:
                photo_response = requests.get(photo_url)
                if photo_response.status_code == 200:
                    photo_data = photo_response.content
                    media = InputMediaPhoto(media=photo_data, caption=message_text)
                    await query.edit_message_media(media=media, reply_markup=reply_markup)
                else:
                    if query.message.photo:
                        await query.edit_message_caption(caption=message_text, reply_markup=reply_markup)
                    else:
                        await query.edit_message_text(text=message_text, reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"Error in show_services_for_specialist: {e}")
                if query.message.photo:
                    await query.edit_message_caption(caption=message_text, reply_markup=reply_markup)
                else:
                    await query.edit_message_text(text=message_text, reply_markup=reply_markup)
        else:
            message_text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥"
            keyboard = [
                [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            if query.message.photo:
                await query.edit_message_caption(caption=message_text, reply_markup=reply_markup)
            else:
                await query.edit_message_text(text=message_text, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"Error fetching services for specialist: {e}")
        message_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        keyboard = [
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            if query.message.photo:
                await query.edit_message_caption(caption=message_text, reply_markup=reply_markup)
            else:
                await query.edit_message_text(text=message_text, reply_markup=reply_markup)
        except Exception as edit_error:
            logger.error(f"Error editing error message: {edit_error}")
            await query.message.reply_text(text=message_text, reply_markup=reply_markup)



async def show_date_selection(query, specialist_id, service_id, target_date_str=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    photo_url = f"{API_BASE_URL}/photo/images/zapis.jpg"
    user_id = query.from_user.id
    try:
        today = datetime.now().date()

        # –ï—Å–ª–∏ target_date_str –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –∏—â–µ–º –ø–µ—Ä–≤—É—é —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        if target_date_str:
            target_date = datetime.strptime(target_date_str, '%Y-%m-%d').date()
        else:
            target_date = today

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        start_of_week = target_date - timedelta(days=target_date.weekday())
        end_of_week = start_of_week + timedelta(days=6)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_states:
            user_states[user_id] = {}
        user_states[user_id].update({
            'specialist_id': specialist_id,
            'service_id': service_id
        })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        from_date_str = start_of_week.strftime('%Y-%m-%d')
        to_date_str = end_of_week.strftime('%Y-%m-%d')
        response = requests.get(
            f"{API_BASE_URL}/api/specialist/{specialist_id}/service/{service_id}/available-dates",
            params={'start': from_date_str, 'end': to_date_str}
        )
        data = response.json()

        # –ï—Å–ª–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∏—â–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –Ω–µ–¥–µ–ª—é
        if data['message'] != 'success' or not data['availableDates']:
            # –ò—â–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–¥–µ–ª—é —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º (–º–∞–∫—Å–∏–º—É–º 3 –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥)
            max_search_date = today + timedelta(days=90)
            current_start = start_of_week
            found_week = None

            while current_start <= max_search_date and not found_week:
                current_end = current_start + timedelta(days=6)
                response = requests.get(
                    f"{API_BASE_URL}/api/specialist/{specialist_id}/service/{service_id}/available-dates",
                    params={
                        'start': current_start.strftime('%Y-%m-%d'),
                        'end': current_end.strftime('%Y-%m-%d')
                    }
                )
                data = response.json()
                if data['message'] == 'success' and data['availableDates']:
                    found_week = current_start
                current_start += timedelta(days=7)

            if found_week:
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –Ω–µ–¥–µ–ª—è —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—ã
                start_of_week = found_week
                end_of_week = start_of_week + timedelta(days=6)
                from_date_str = start_of_week.strftime('%Y-%m-%d')
                to_date_str = end_of_week.strftime('%Y-%m-%d')
                response = requests.get(
                    f"{API_BASE_URL}/api/specialist/{specialist_id}/service/{service_id}/available-dates",
                    params={'start': from_date_str, 'end': to_date_str}
                )
                data = response.json()
            else:
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤
                message_text = (
                    "‚ùå –ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 –º–µ—Å—è—Ü–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏ –∏ –º–∞—Å—Ç–µ—Ä–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —É—Å–ª—É–≥—É –∏–ª–∏ –º–∞—Å—Ç–µ—Ä–∞."
                )
                keyboard = [
                    [InlineKeyboardButton("üéØ –í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É", callback_data='choose_service')],
                    [InlineKeyboardButton("‚ô¢ –í—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞", callback_data='choose_specialist')],
                    [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                try:
                    photo_response = requests.get(photo_url)
                    if photo_response.status_code == 200:
                        photo_data = photo_response.content
                        media = InputMediaPhoto(media=photo_data, caption=message_text)
                        await query.edit_message_media(media=media, reply_markup=reply_markup)
                    else:
                        await query.edit_message_text(text=message_text, reply_markup=reply_markup)
                except Exception as e:
                    logger.error(f"Error in show_date_selection (no dates): {e}")
                    await query.edit_message_text(text=message_text, reply_markup=reply_markup)
                return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
        message = f"üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É ({start_of_week.strftime('%d.%m')} - {end_of_week.strftime('%d.%m')}):\n\n"

        keyboard = []

        if data['message'] == 'success' and data['availableDates']:
            current_date = start_of_week
            while current_date <= end_of_week:
                date_str = current_date.strftime('%Y-%m-%d')
                date_display = current_date.strftime('%d.%m')
                weekday = WEEKDAY_MAP.get(current_date.strftime('%a'), current_date.strftime('%a'))

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
                if date_str in data['availableDates']:
                    button_text = f"üìÖ {date_display} ({weekday})"
                    keyboard.append([
                        InlineKeyboardButton(
                            button_text,
                            callback_data=f'select_date_{date_str}'
                        )
                    ])
                else:
                    button_text = f"‚ùå {date_display} ({weekday}) - –Ω–µ—Ç –º–µ—Å—Ç"
                    keyboard.append([
                        InlineKeyboardButton(
                            button_text,
                            callback_data='no_date_available'
                        )
                    ])

                current_date += timedelta(days=1)
        else:
            # –≠—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ –Ω–∞—à–ª–∏ –Ω–µ–¥–µ–ª—é —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
            message += "‚ùå –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n"

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –Ω–µ–¥–µ–ª—è–º
        prev_week_start = start_of_week - timedelta(days=7)
        next_week_start = start_of_week + timedelta(days=7)

        nav_buttons = []
        if prev_week_start >= today:
            nav_buttons.append(
                InlineKeyboardButton(
                    "‚¨ÖÔ∏è –ü—Ä–µ–¥. –Ω–µ–¥–µ–ª—è",
                    callback_data=f'date_nav_prev_{prev_week_start.strftime("%Y-%m-%d")}'
                )
            )
        nav_buttons.append(
            InlineKeyboardButton(
                "–°–ª–µ–¥. –Ω–µ–¥–µ–ª—è ‚û°Ô∏è",
                callback_data=f'date_nav_next_{next_week_start.strftime("%Y-%m-%d")}'
            )
        )
        keyboard.append(nav_buttons)

        keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='back_to_selection')])
        keyboard.append([InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')])

        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            photo_response = requests.get(photo_url)
            if photo_response.status_code == 200:
                photo_data = photo_response.content
                media = InputMediaPhoto(media=photo_data, caption=message)
                await query.edit_message_media(media=media, reply_markup=reply_markup)
            else:
                await query.edit_message_text(text=message, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Error in show_date_selection: {e}")
            await query.edit_message_text(text=message, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"Error in show_date_selection: {e}")
        message_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        keyboard = [
            [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='back_to_selection')],
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=message_text, reply_markup=reply_markup)

async def show_time_slots(query, date_str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É (—Ç–æ–ª—å–∫–æ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è +2 —á–∞—Å–∞)"""
    photo_url = f"{API_BASE_URL}/photo/images/zapis.jpg"
    user_id = query.from_user.id
    user_data = user_states.get(user_id, {})
    specialist_id = user_data.get('specialist_id')
    service_id = user_data.get('service_id')
    
    if not specialist_id or not service_id:
        message_text = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –º–∞—Å—Ç–µ—Ä –∏–ª–∏ —É—Å–ª—É–≥–∞"
        keyboard = [
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=message_text, reply_markup=reply_markup)
        return
    
    try:
        response = requests.get(
            f"{API_BASE_URL}/api/specialist/{specialist_id}/service/{service_id}/schedule/{date_str}"
        )
        data = response.json()
        
        if data['message'] == 'success':
            time_slots = data['data']
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 2 —á–∞—Å–∞
            current_datetime = datetime.now()
            filtered_slots = []
            
            for slot in time_slots:
                slot_datetime_str = f"{date_str} {slot['–≤—Ä–µ–º—è']}"
                slot_datetime = datetime.strptime(slot_datetime_str, '%Y-%m-%d %H:%M')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 2 —á–∞—Å–∞
                time_difference = slot_datetime - current_datetime
                if time_difference.total_seconds() > -7200:  # 7200 —Å–µ–∫—É–Ω–¥ = 2 —á–∞—Å–∞
                    filtered_slots.append(slot)
            
            if not filtered_slots:
                message_text = "‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É"
                keyboard = [
                    [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data=f'back_to_date_{date_str}')],
                    [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                    await query.message.reply_photo(
                        photo=photo_url,
                        caption=message_text,
                        reply_markup=reply_markup
                    )
                    await query.delete_message()
                except Exception as e:
                    logger.error(f"Error in show_time_slots (no slots): {e}")
                    await query.edit_message_text(text=message_text, reply_markup=reply_markup)
                return
            
            keyboard = []
            for slot in filtered_slots:
                keyboard.append([
                    InlineKeyboardButton(
                        f" {slot['–≤—Ä–µ–º—è']}",
                        callback_data=f'time_slot_{slot["id"]}'
                    )
                ])
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
            keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data=f'back_to_date_{date_str}')])
            keyboard.append([InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            message_text = f"–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ {datetime.strptime(date_str, '%Y-%m-%d').strftime('%d.%m.%Y')}:"
            
            try:
                photo_response = requests.get(photo_url)
                if photo_response.status_code == 200:
                    photo_data = photo_response.content
                    media = InputMediaPhoto(media=photo_data, caption=message_text)
                    await query.edit_message_media(media=media, reply_markup=reply_markup)
                else:
                    await query.edit_message_text(text=message_text, reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"Error in show_time_slots: {e}")
                await query.edit_message_text(text=message_text, reply_markup=reply_markup)
        else:
            message_text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–µ–º–µ–Ω–∏"
            keyboard = [
                [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data=f'back_to_date_{date_str}')],
                [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text=message_text, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"Error fetching time slots: {e}")
        message_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        keyboard = [
            [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data=f'back_to_date_{date_str}')],
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=message_text, reply_markup=reply_markup)


async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    query = update.callback_query
    user_id = query.from_user.id
    schedule_id = query.data.split('_')[2]  # –ò–∑–≤–ª–µ–∫–∞–µ–º schedule_id –∏–∑ callback_data 'time_slot_{schedule_id}'

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        response = requests.get(f"{API_BASE_URL}/api/schedule/{schedule_id}")
        data = response.json()
        
        if data['message'] == 'success':
            schedule = data['data']
            master_name = schedule['–º–∞—Å—Ç–µ—Ä_–∏–º—è']
            service_name = schedule['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']
            date = schedule['–¥–∞—Ç–∞']
            time = schedule['–≤—Ä–µ–º—è']
            price = schedule['—É—Å–ª—É–≥–∞_—Ü–µ–Ω–∞']
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            formatted_date = datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            client_response = requests.get(f"{API_BASE_URL}/api/client/by-tg/{user_id}")
            client_data = client_response.json()
            
            if client_data['message'] == 'success' and client_data['data']:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
                client = client_data['data']
                name = client['–∏–º—è']
                phone = client['—Ç–µ–ª–µ—Ñ–æ–Ω']
                
                message_text = (
                    f"{name} ({phone}) –∑–∞–ø–∏—Å—ã–≤–∞—é –≤–∞—Å –Ω–∞ —É—Å–ª—É–≥—É:\n\n"
                    f"‚úÆ {service_name}\n"
                    f"‚ô¢ {master_name}\n"
                    f"‚â£ {formatted_date} {time}\n"
                    f"‚ÇΩ {price}‚ÇΩ\n\n"
                    f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?"
                )
                
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f'confirm_appointment_{schedule_id}')],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f'cancel_to_main')],
                    [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                photo_url = f"{API_BASE_URL}/photo/images/zapis.jpg"
                try:
                    photo_response = requests.get(photo_url)
                    if photo_response.status_code == 200:
                        photo_data = photo_response.content
                        media = InputMediaPhoto(media=photo_data, caption=message_text)
                        await query.edit_message_media(media=media, reply_markup=reply_markup)
                    else:
                        await query.edit_message_text(text=message_text, reply_markup=reply_markup)
                except Exception as e:
                    logger.error(f"Error in confirm_booking (authorized): {e}")
                    await query.edit_message_text(text=message_text, reply_markup=reply_markup)
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –∫–∞–∫ —Ä–∞–Ω—å—à–µ
                user_states[user_id] = {
                    'step': 'name',
                    'specialist_id': schedule['–º–∞—Å—Ç–µ—Ä_id'],
                    'service_id': schedule['—É—Å–ª—É–≥–∞_id'],
                    'date': date,
                    'time': time,
                    'schedule_id': schedule_id
                }
                
                message_text = (
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n\n"
                    f"‚úÆ {service_name}\n"
                    f"‚ô¢ {master_name}\n"
                    f"‚â£ {formatted_date} {time}\n"
                    f"‚ÇΩ {price}‚ÇΩ\n\n"
                    f"‚úé –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
                )
                
                keyboard = [
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f'back_to_time_{date}')],
                    [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                photo_url = f"{API_BASE_URL}/photo/images/zapis.jpg"
                try:
                    photo_response = requests.get(photo_url)
                    if photo_response.status_code == 200:
                        photo_data = photo_response.content
                        media = InputMediaPhoto(media=photo_data, caption=message_text)
                        await query.edit_message_media(media=media, reply_markup=reply_markup)
                    else:
                        await query.edit_message_text(text=message_text, reply_markup=reply_markup)
                except Exception as e:
                    logger.error(f"Error in confirm_booking (unauthorized): {e}")
                    await query.edit_message_text(text=message_text, reply_markup=reply_markup)
        else:
            message_text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π"
            keyboard = [
                [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='book_appointment')],
                [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text=message_text, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"Error in confirm_booking: {e}")
        message_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        keyboard = [
            [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='book_appointment')],
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=message_text, reply_markup=reply_markup)



# –ó–∞–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é show_week_schedule –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é:

async def show_week_schedule(query, target_date_str=None):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)"""
    await show_week_calendar(query, target_date_str)


async def show_all_specialists_schedule(query, service_id, target_date_str=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —É—Å–ª—É–≥–∏ (—Ç–æ–ª—å–∫–æ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è +2 —á–∞—Å–∞)"""
    photo_url = f"{API_BASE_URL}/photo/images/zapis.jpg"
    
    try:
        today = datetime.now().date()
        
        if target_date_str:
            try:
                target_date = datetime.strptime(target_date_str, '%Y-%m-%d').date()
            except ValueError:
                logger.error(f"Invalid date format: {target_date_str}")
                message_text = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"
                keyboard = [
                    [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data=f'service_{service_id}')],
                    [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(text=message_text, reply_markup=reply_markup)
                return
        else:
            target_date = today
        
        start_of_week = target_date - timedelta(days=target_date.weekday())
        end_of_week = start_of_week + timedelta(days=6)
        
        from_date = max(start_of_week, today)
        to_date = end_of_week
        
        from_date_str = from_date.strftime('%Y-%m-%d')
        to_date_str = to_date.strftime('%Y-%m-%d')
        
        try:
            response = requests.get(
                f"{API_BASE_URL}/api/freetime-available?fromDate={from_date_str}&toDate={to_date_str}",
                timeout=5
            )
            response.raise_for_status()
            data = response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"Error fetching schedule: {e}")
            message_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
            keyboard = [
                [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data=f'service_{service_id}')],
                [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text=message_text, reply_markup=reply_markup)
            return
        
        try:
            service_response = requests.get(f"{API_BASE_URL}/api/service/{service_id}", timeout=5)
            service_response.raise_for_status()
            service_data = service_response.json()
            service_name = service_data.get('data', {}).get('–Ω–∞–∑–≤–∞–Ω–∏–µ', '–£—Å–ª—É–≥–∞') if service_data.get('message') == 'success' else "–£—Å–ª—É–≥–∞"
        except requests.exceptions.RequestException as e:
            logger.error(f"Error fetching service name for service {service_id}: {e}")
            service_name = "–£—Å–ª—É–≥–∞"
        
        message = f"‚â£ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É—Å–ª—É–≥–∏ '{service_name}' –Ω–∞ –Ω–µ–¥–µ–ª—é ({start_of_week.strftime('%d.%m')} - {end_of_week.strftime('%d.%m')}):\n\n"
        keyboard = []
        
        if data.get('message') == 'success' and isinstance(data.get('data'), list):
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ service_id –∏ –≤—Ä–µ–º–µ–Ω–∏
            current_datetime = datetime.now()
            schedule = []
            
            for item in data['data']:
                if str(item.get('—É—Å–ª—É–≥–∞_id')) == str(service_id):
                    slot_datetime_str = f"{item['–¥–∞—Ç–∞']} {item['–≤—Ä–µ–º—è']}"
                    try:
                        slot_datetime = datetime.strptime(slot_datetime_str, '%Y-%m-%d %H:%M')
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 2 —á–∞—Å–∞
                        time_difference = slot_datetime - current_datetime
                        if time_difference.total_seconds() > -7200:  # 7200 —Å–µ–∫—É–Ω–¥ = 2 —á–∞—Å–∞
                            schedule.append(item)
                    except ValueError:
                        continue
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–∞—Ç–∞–º
            schedule_by_date = {}
            for item in schedule:
                date = item.get('–¥–∞—Ç–∞')
                if date and isinstance(date, str):
                    if date not in schedule_by_date:
                        schedule_by_date[date] = []
                    schedule_by_date[date].append(item)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–æ–∫
            for date, items in sorted(schedule_by_date.items()):
                try:
                    formatted_date = datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m')
                except ValueError:
                    logger.error(f"Invalid date format in schedule: {date}")
                    continue
                message += f"üìÜ {formatted_date}:\n"
                
                for item in items:
                    time = item.get('–≤—Ä–µ–º—è')
                    master_name = item.get('–º–∞—Å—Ç–µ—Ä_–∏–º—è', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä')
                    item_id = item.get('id')
                    service_name_item = item.get('—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ', '–£—Å–ª—É–≥–∞')
                    
                    if time and item_id:
                        message += f"    {time} - {master_name}\n"
                        
                        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å —É—Å–ª—É–≥–æ–π
                        button_text = f"{formatted_date} {time} - {master_name} - {service_name_item}"
                        
                        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                        if len(button_text) > 40:
                            if len(master_name) > 12:
                                master_short = master_name[:10] + "..."
                                button_text = f"{formatted_date} {time} - {master_short} - {service_name_item}"
                            if len(button_text) > 40:
                                service_short = service_name_item[:15] + "..." if len(service_name_item) > 15 else service_name_item
                                button_text = f"{formatted_date} {time} - {master_name[:10]}... - {service_short}"
                        
                        keyboard.append([
                            InlineKeyboardButton(
                                button_text,
                                callback_data=f'time_slot_{item_id}'
                            )
                        ])
                
                message += "\n"
            
            if not schedule:
                message += "‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏\n"
        else:
            message += "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
            logger.error(f"Invalid API response for service {service_id}: {data}")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        prev_week_start = start_of_week - timedelta(days=7)
        next_week_start = start_of_week + timedelta(days=7)
        
        nav_buttons = [
            InlineKeyboardButton(
                "‚¨ÖÔ∏è –ü—Ä–µ–¥. –Ω–µ–¥–µ–ª—è",
                callback_data=f'all_schedule_nav_prev_{prev_week_start.strftime("%Y-%m-%d")}_{service_id}'
            ),
            InlineKeyboardButton(
                "–°–ª–µ–¥. –Ω–µ–¥–µ–ª—è ‚û°Ô∏è",
                callback_data=f'all_schedule_nav_next_{next_week_start.strftime("%Y-%m-%d")}_{service_id}'
            )
        ]
        keyboard.append(nav_buttons)
        
        keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data=f'service_{service_id}')])
        keyboard.append([InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            photo_response = requests.get(photo_url, timeout=5)
            if photo_response.status_code == 200:
                photo_data = photo_response.content
                media = InputMediaPhoto(media=photo_data, caption=message)
                await query.edit_message_media(media=media, reply_markup=reply_markup)
            else:
                logger.warning(f"Failed to download photo: {photo_response.status_code}")
                await query.edit_message_text(text=message, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Error sending message: {e}")
            await query.edit_message_text(text=message, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"Unexpected error in show_all_specialists_schedule: {e}")
        message_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"
        keyboard = [
            [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data=f'service_{service_id}')],
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=message_text, reply_markup=reply_markup)
        
# main.py - –≤ —Ñ—É–Ω–∫—Ü–∏–∏ process_confirmed_appointment –æ–±–Ω–æ–≤–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞

async def process_confirmed_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = query.from_user.id
    schedule_id = query.data.split('_')[2]

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        response = requests.get(f"{API_BASE_URL}/api/schedule/{schedule_id}")
        data = response.json()
        
        if data['message'] == 'success':
            schedule = data['data']
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            client_response = requests.get(f"{API_BASE_URL}/api/client/by-tg/{user_id}")
            client_data = client_response.json()
            
            if client_data['message'] == 'success' and client_data['data']:
                client = client_data['data']
                name = client['–∏–º—è']
                phone = client['—Ç–µ–ª–µ—Ñ–æ–Ω']
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                appointment_response = requests.post(f"{API_BASE_URL}/api/appointment", json={
                    'specialistId': schedule['–º–∞—Å—Ç–µ—Ä_id'],
                    'serviceId': schedule['—É—Å–ª—É–≥–∞_id'],
                    'date': schedule['–¥–∞—Ç–∞'],
                    'time': schedule['–≤—Ä–µ–º—è'],
                    'clientName': name,
                    'clientPhone': phone
                })
                
                if appointment_response.json().get('message') == 'success':
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ
                    requests.patch(f"{API_BASE_URL}/api/schedule/{schedule_id}", json={'–¥–æ—Å—Ç—É–ø–Ω–æ': 0})
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º tg_id –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if not client.get('tg_id'):
                        requests.patch(f"{API_BASE_URL}/api/client/{client['id']}", json={
                            'tg_id': str(user_id)
                        })
                    
                    message_text = (
                        "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                        f"‚úÆ –£—Å–ª—É–≥–∞: {schedule['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
                        f"‚ô¢ –ú–∞—Å—Ç–µ—Ä: {schedule['–º–∞—Å—Ç–µ—Ä_–∏–º—è']}\n"
                        f"‚â£ –î–∞—Ç–∞: {schedule['–¥–∞—Ç–∞']}\n"
                        f"‚è∞ –í—Ä–µ–º—è: {schedule['–≤—Ä–µ–º—è']}\n"
                        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {schedule['—É—Å–ª—É–≥–∞_—Ü–µ–Ω–∞']}‚ÇΩ\n\n"
                        "üìå –ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –æ –∑–∞–ø–∏—Å–∏:\n"
                        "‚Ä¢ –ó–∞ –¥–µ–Ω—å –¥–æ –≤–∏–∑–∏—Ç–∞ (–≤ 18:00)\n" 
                        "‚Ä¢ –ó–∞ —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏\n\n"
                        "üìã –í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ"
                    )
                    
                    keyboard = [
                        [InlineKeyboardButton("üìã –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='personal_cabinet')],
                        [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    photo_url = f"{API_BASE_URL}/photo/images/pusto.jpg"
                    try:
                        photo_response = requests.get(photo_url)
                        if photo_response.status_code == 200:
                            photo_data = photo_response.content
                            media = InputMediaPhoto(media=photo_data, caption=message_text)
                            await query.edit_message_media(media=media, reply_markup=reply_markup)
                        else:
                            await query.edit_message_text(text=message_text, reply_markup=reply_markup)
                    except Exception as e:
                        logger.error(f"Error in process_confirmed_appointment: {e}")
                        await query.edit_message_text(text=message_text, reply_markup=reply_markup)
                else:
                    message_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏"
                    await query.edit_message_text(text=message_text)
            else:
                message_text = "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã"
                await query.edit_message_text(text=message_text)
        else:
            message_text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π"
            await query.edit_message_text(text=message_text)
            
    except Exception as e:
        logger.error(f"Error in process_confirmed_appointment: {e}")
        message_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        await query.edit_message_text(text=message_text)



def validate_phone(phone):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX"""
    import re
    pattern = r'^\+7\d{10}$'
    return re.match(pattern, phone) is not None

# main.py - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π

async def show_week_calendar(query, target_date_str=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    photo_url = f"{API_BASE_URL}/photo/images/zapis.jpg"
    try:
        today = datetime.now().date()
        
        if target_date_str:
            target_date = datetime.strptime(target_date_str, '%Y-%m-%d').date()
        else:
            target_date = today
        
        start_of_week = target_date - timedelta(days=target_date.weekday())
        end_of_week = start_of_week + timedelta(days=6)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é
        from_date_str = start_of_week.strftime('%Y-%m-%d')
        to_date_str = end_of_week.strftime('%Y-%m-%d')
        
        response = requests.get(f"{API_BASE_URL}/api/freetime-available?fromDate={from_date_str}&toDate={to_date_str}")
        data = response.json()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
        message = f"üóìÔ∏è –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n({start_of_week.strftime('%d.%m')} - {end_of_week.strftime('%d.%m')})\n\n"
        
        keyboard = []
        
        if data['message'] == 'success' and data['data']:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –¥–∞—Ç–∞–º
            schedule_by_date = {}
            current_datetime = datetime.now()
            
            for item in data['data']:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è (+2 —á–∞—Å–∞)
                slot_datetime_str = f"{item['–¥–∞—Ç–∞']} {item['–≤—Ä–µ–º—è']}"
                try:
                    slot_datetime = datetime.strptime(slot_datetime_str, '%Y-%m-%d %H:%M')
                    time_difference = slot_datetime - current_datetime
                    if time_difference.total_seconds() > -7200:
                        date = item['–¥–∞—Ç–∞']
                        if date not in schedule_by_date:
                            schedule_by_date[date] = []
                        schedule_by_date[date].append(item)
                except ValueError:
                    continue
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
            current_date = start_of_week
            while current_date <= end_of_week:
                date_str = current_date.strftime('%Y-%m-%d')
                date_display = current_date.strftime('%d.%m')
                weekday = WEEKDAY_MAP.get(current_date.strftime('%a'), current_date.strftime('%a'))
                
                slots_count = len(schedule_by_date.get(date_str, []))
                
                if slots_count > 0:
                    button_text = f"üìÖ {date_display} ({weekday}) - {slots_count} —Å–ª–æ—Ç–æ–≤"
                    keyboard.append([
                        InlineKeyboardButton(
                            button_text,
                            callback_data=f'view_day_schedule_{date_str}'
                        )
                    ])
                else:
                    button_text = f"‚ùå {date_display} ({weekday}) - –Ω–µ—Ç –º–µ—Å—Ç"
                    keyboard.append([
                        InlineKeyboardButton(
                            button_text,
                            callback_data='no_date_available'
                        )
                    ])
                
                current_date += timedelta(days=1)
        else:
            message += "‚ùå –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n"
            keyboard.append([InlineKeyboardButton("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç", callback_data='no_available_options')])
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –Ω–µ–¥–µ–ª—è–º
        prev_week_start = start_of_week - timedelta(days=7)
        next_week_start = start_of_week + timedelta(days=7)
        
        nav_buttons = [
            InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥. –Ω–µ–¥–µ–ª—è", callback_data=f'week_calendar_nav_prev_{prev_week_start.strftime("%Y-%m-%d")}'),
            InlineKeyboardButton("–°–ª–µ–¥. –Ω–µ–¥–µ–ª—è ‚û°Ô∏è", callback_data=f'week_calendar_nav_next_{next_week_start.strftime("%Y-%m-%d")}')
        ]
        keyboard.append(nav_buttons)
        
        keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='book_appointment')])
        keyboard.append([InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            photo_response = requests.get(photo_url)
            if photo_response.status_code == 200:
                photo_data = photo_response.content
                media = InputMediaPhoto(media=photo_data, caption=message)
                await query.edit_message_media(media=media, reply_markup=reply_markup)
            else:
                await query.edit_message_text(text=message, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Error in show_week_calendar: {e}")
            await query.edit_message_text(text=message, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"Error showing week calendar: {e}")
        message_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        keyboard = [
            [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='book_appointment')],
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=message_text, reply_markup=reply_markup)

async def show_day_schedule(query, date_str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
    photo_url = f"{API_BASE_URL}/photo/images/zapis.jpg"
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        response = requests.get(f"{API_BASE_URL}/api/freetime-available?fromDate={date_str}&toDate={date_str}")
        data = response.json()
        
        date_obj = datetime.strptime(date_str, '%Y-%m-%d')
        formatted_date = date_obj.strftime('%d.%m.%Y')
        weekday = WEEKDAY_MAP.get(date_obj.strftime('%a'), date_obj.strftime('%a'))
        
        message = f"üóìÔ∏è –°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ {formatted_date} ({weekday}):\n\n"
        
        keyboard = []
        
        if data['message'] == 'success' and data['data']:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è (+2 —á–∞—Å–∞)
            current_datetime = datetime.now()
            available_slots = []
            
            for item in data['data']:
                slot_datetime_str = f"{item['–¥–∞—Ç–∞']} {item['–≤—Ä–µ–º—è']}"
                try:
                    slot_datetime = datetime.strptime(slot_datetime_str, '%Y-%m-%d %H:%M')
                    time_difference = slot_datetime - current_datetime
                    if time_difference.total_seconds() > -7200:
                        available_slots.append(item)
                except ValueError:
                    continue
            
            if available_slots:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                available_slots.sort(key=lambda x: x['–≤—Ä–µ–º—è'])
                
                for slot in available_slots:
                    service_name = slot.get('—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ', '–£—Å–ª—É–≥–∞')
                    master_name = slot.get('–º–∞—Å—Ç–µ—Ä_–∏–º—è', '–ú–∞—Å—Ç–µ—Ä')
                    time = slot['–≤—Ä–µ–º—è']
                    price = slot.get('—É—Å–ª—É–≥–∞_—Ü–µ–Ω–∞', '?')
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å —É—Å–ª—É–≥–æ–π
                    button_text = f"{time} - {master_name} - {service_name}"
                    
                    # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if len(button_text) > 40:
                        # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if len(service_name) > 15:
                            service_short = service_name[:12] + "..."
                            button_text = f"{time} - {master_name} - {service_short}"
                        elif len(button_text) > 40:
                            button_text = f"{time} - {master_name[:12]}... - {service_name[:15]}..."
                    
                    keyboard.append([
                        InlineKeyboardButton(
                            button_text,
                            callback_data=f'time_slot_{slot["id"]}'
                        )
                    ])
                    
                    message += f"‚è∞ {time} - {master_name}\n"
                    message += f"   ‚úÆ {service_name} - {price}‚ÇΩ\n\n"
            else:
                message += "‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å\n"
        else:
            message += "‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å\n"
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–Ω—è–º
        current_date = datetime.strptime(date_str, '%Y-%m-%d').date()
        prev_day = current_date - timedelta(days=1)
        next_day = current_date + timedelta(days=1)
        
        today = datetime.now().date()
        
        nav_buttons = []
        if prev_day >= today:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –∏ —Ç–µ–∫—É—â–∏–µ –¥–Ω–∏
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥. –¥–µ–Ω—å", callback_data=f'view_day_schedule_{prev_day.strftime("%Y-%m-%d")}'))
        
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥. –¥–µ–Ω—å", callback_data=f'view_day_schedule_{next_day.strftime("%Y-%m-%d")}'))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data='view_week_schedule')])
        keyboard.append([InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            photo_response = requests.get(photo_url)
            if photo_response.status_code == 200:
                photo_data = photo_response.content
                media = InputMediaPhoto(media=photo_data, caption=message)
                await query.edit_message_media(media=media, reply_markup=reply_markup)
            else:
                await query.edit_message_text(text=message, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Error in show_day_schedule: {e}")
            await query.edit_message_text(text=message, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"Error showing day schedule: {e}")
        message_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        keyboard = [
            [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='view_week_schedule')],
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=message_text, reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.message.from_user.id
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if user_id in user_states:
        user_data = user_states[user_id]
        
        if user_data.get('step') == 'name':
            if not text.strip():
                await update.message.reply_text("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                return
            
            user_data['client_name'] = text.strip()
            user_data['step'] = 'phone'
            await update.message.reply_text(
                "üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:\n\n"
                "–ü—Ä–∏–º–µ—Ä: +79255355278"
            )
            return  # –î–æ–±–∞–≤–ª—è–µ–º return —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∫–æ–¥–∞
            
        elif user_data.get('step') == 'phone':
            if not validate_phone(text):
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX\n"
                    "–ü—Ä–∏–º–µ—Ä: +79255355278"
                )
                return
            
            user_data['client_phone'] = text
            
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
                client_check_response = requests.get(f"{API_BASE_URL}/api/client/by-phone/{user_data['client_phone']}")
                client_data = client_check_response.json()
                
                client_id = None
                if client_data['message'] == 'success' and client_data['data']:
                    # –ö–ª–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º tg_id
                    client_id = client_data['data']['id']
                    update_response = requests.patch(f"{API_BASE_URL}/api/client/{client_id}", json={
                        'tg_id': str(user_id)
                    })
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å tg_id
                    create_response = requests.post(f"{API_BASE_URL}/api/client", json={
                        '–∏–º—è': user_data['client_name'],
                        '—Ç–µ–ª–µ—Ñ–æ–Ω': user_data['client_phone'],
                        'tg_id': str(user_id)
                    })
                    if create_response.json()['message'] == 'success':
                        client_id = create_response.json()['data']['id']
                
                if client_id:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                    response = requests.post(f"{API_BASE_URL}/api/appointment", json={
                        'specialistId': user_data['specialist_id'],
                        'serviceId': user_data['service_id'],
                        'date': user_data['date'],
                        'time': user_data['time'],
                        'clientName': user_data['client_name'],
                        'clientPhone': user_data['client_phone']
                    })
                    
                    if response.json().get('message') == 'success':
                        keyboard = [
                            [InlineKeyboardButton("üìã –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='personal_cabinet')],
                            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        
                        await update.message.reply_text(
                            "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                            "üìå –ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –æ –∑–∞–ø–∏—Å–∏:\n"
                            "‚Ä¢ –ó–∞ –¥–µ–Ω—å –¥–æ –≤–∏–∑–∏—Ç–∞ (–≤ 18:00)\n"
                            "‚Ä¢ –ó–∞ —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏\n\n"
                            "üìã –í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ",
                            reply_markup=reply_markup
                        )
                        
                        requests.patch(f"{API_BASE_URL}/api/schedule/{user_data['schedule_id']}", json={
                            '–¥–æ—Å—Ç—É–ø–Ω–æ': 0
                        })
                        
                    else:
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞")
                    
            except Exception as e:
                logger.error(f"Error creating appointment: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
            
            del user_states[user_id]
            return  # –î–æ–±–∞–≤–ª—è–µ–º return —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∫–æ–¥–∞
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    elif user_id in personal_states:
        await handle_personal_message(update, context)
        return  # –î–æ–±–∞–≤–ª—è–µ–º return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    elif user_id in admin_states:
        await handle_admin_message(update, context)
        return  # –î–æ–±–∞–≤–ª—è–µ–º return
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    await update.message.reply_text(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ])
    )


async def start_callback(query):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—É"""
    update = Update(0, callback_query=query)
    await show_main_menu(update, None)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global bot
    bot_token = os.getenv('BOT_TOKEN')
    print(f"DEBUG: Initializing bot with BOT_TOKEN = {bot_token}")
    if not bot_token:
        raise ValueError("BOT_TOKEN is not set or empty in main.py")
    application = Application.builder().token(bot_token.strip()).build()  # Strip to remove any whitespace
    bot = application.bot  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    application.run_polling()

if __name__ == '__main__':
    main()