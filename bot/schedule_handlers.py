# schedule_handlers.py - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —É—Å–ª—É–≥–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
import logging
import requests
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
from config import API_BASE_URL, user_states
from menu_handlers import show_main_menu

logger = logging.getLogger(__name__)

async def show_week_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –Ω–µ–¥–µ–ª—é —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    query = update.callback_query
    await query.answer()
    
    try:
        today = datetime.now().date()
        
        data = query.data
        target_date_str = None
        
        if data.startswith('week_nav_'):
            parts = data.split('_')
            target_date_str = parts[3]
        
        if target_date_str:
            target_date = datetime.strptime(target_date_str, '%Y-%m-%d').date()
        else:
            target_date = today
        
        start_of_week = target_date - timedelta(days=target_date.weekday())
        end_of_week = start_of_week + timedelta(days=6)
        
        from_date = max(start_of_week, today)
        to_date = end_of_week
        
        from_date_str = from_date.strftime('%Y-%m-%d')
        to_date_str = to_date.strftime('%Y-%m-%d')
        
        response = requests.get(f"{API_BASE_URL}/api/freetime-available?fromDate={from_date_str}&toDate={to_date_str}")
        data = response.json()
        
        message = f"üìÖ –°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –Ω–µ–¥–µ–ª—é ({start_of_week.strftime('%d.%m')} - {end_of_week.strftime('%d.%m')}):\n\n"
        keyboard = []
        
        if data.get('message') == 'success':
            schedule = data.get('data', [])
            
            if schedule:
                schedule_by_date = {}
                for item in schedule:
                    date = item['–¥–∞—Ç–∞']
                    if date not in schedule_by_date:
                        schedule_by_date[date] = []
                    schedule_by_date[date].append(item)
                
                for date, items in sorted(schedule_by_date.items()):
                    formatted_date = datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m')
                    message += f"üìÜ {formatted_date}:\n"
                    
                    for item in items:
                        message += f"   ‚è∞ {item['–≤—Ä–µ–º—è']} - {item['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']} ({item['–º–∞—Å—Ç–µ—Ä_–∏–º—è']})\n"
                        keyboard.append([
                            InlineKeyboardButton(
                                f"{formatted_date} {item['–≤—Ä–µ–º—è']} - {item['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}",
                                callback_data=f'time_slot_{item["id"]}'
                            )
                        ])
                    
                    message += "\n"
            else:
                message += "‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ\n"
        else:
            message += "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
        
        prev_week_start = start_of_week - timedelta(days=7)
        next_week_start = start_of_week + timedelta(days=7)
        
        nav_buttons = [
            InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥. –Ω–µ–¥–µ–ª—è", callback_data=f'week_nav_prev_{prev_week_start.strftime("%Y-%m-%d")}'),
            InlineKeyboardButton("–°–ª–µ–¥. –Ω–µ–¥–µ–ª—è ‚û°Ô∏è", callback_data=f'week_nav_next_{next_week_start.strftime("%Y-%m-%d")}')
        ]
        keyboard.append(nav_buttons)
        
        keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='book_appointment')])
        keyboard.append([InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"Error fetching week schedule: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

async def show_all_specialists_schedule(query, service_id, target_date_str=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —É—Å–ª—É–≥–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —É—Å–ª—É–≥–µ"""
    try:
        user_id = query.from_user.id
        user_states[user_id] = {'service_id': service_id}
        
        today = datetime.now().date()
        
        if target_date_str:
            target_date = datetime.strptime(target_date_str, '%Y-%m-%d').date()
        else:
            target_date = today
        
        start_of_week = target_date - timedelta(days=target_date.weekday())
        end_of_week = start_of_week + timedelta(days=6)
        
        from_date = max(start_of_week, today)
        to_date = end_of_week
        
        from_date_str = from_date.strftime('%Y-%m-%d')
        to_date_str = to_date.strftime('%Y-%m-%d')
        
        response = requests.get(
            f"{API_BASE_URL}/api/freetime-available",
            params={'fromDate': from_date_str, 'toDate': to_date_str}
        )
        data = response.json()
        
        service_response = requests.get(f"{API_BASE_URL}/api/service/{service_id}")
        service_name = service_response.json()['data']['–Ω–∞–∑–≤–∞–Ω–∏–µ'] if service_response.json()['message'] == 'success' else "–£—Å–ª—É–≥–∞"
        
        message = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É—Å–ª—É–≥–∏ '{service_name}' ({start_of_week.strftime('%d.%m')} - {end_of_week.strftime('%d.%m')}):\n\n"
        keyboard = []
        
        if data['message'] == 'success':
            schedule = [item for item in data['data'] if str(item['—É—Å–ª—É–≥–∞_id']) == str(service_id)]
            
            schedule_by_date = {}
            for item in schedule:
                date = item['–¥–∞—Ç–∞']
                if date not in schedule_by_date:
                    schedule_by_date[date] = []
                schedule_by_date[date].append(item)
            
            for date, items in sorted(schedule_by_date.items()):
                formatted_date = datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m')
                message += f"üìÜ {formatted_date}:\n"
                
                for item in items:
                    message += f"   ‚è∞ {item['–≤—Ä–µ–º—è']} - {item['–º–∞—Å—Ç–µ—Ä_–∏–º—è']}\n"
                    keyboard.append([
                        InlineKeyboardButton(
                            f"{formatted_date} {item['–≤—Ä–µ–º—è']} - {item['–º–∞—Å—Ç–µ—Ä_–∏–º—è']}",
                            callback_data=f'time_slot_{item["id"]}'
                        )
                    ])
                
                message += "\n"
            
            if not schedule:
                message += "‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ\n"
        
        else:
            message += "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
        
        prev_week_start = start_of_week - timedelta(days=7)
        next_week_start = start_of_week + timedelta(days=7)
        
        nav_buttons = [
            InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥. –Ω–µ–¥–µ–ª—è", callback_data=f'all_schedule_nav_prev_{prev_week_start.strftime("%Y-%m-%d")}_{service_id}'),
            InlineKeyboardButton("–°–ª–µ–¥. –Ω–µ–¥–µ–ª—è ‚û°Ô∏è", callback_data=f'all_schedule_nav_next_{next_week_start.strftime("%Y-%m-%d")}_{service_id}')
        ]
        keyboard.append(nav_buttons)
        
        keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data=f'choose_service')])
        keyboard.append([InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"Error fetching all specialists schedule: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")