# mast_uslugi.py - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
import os
import logging
import requests
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from menu_handlers import show_main_menu
from config import BOT_TOKEN, API_BASE_URL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await show_main_menu(update=update)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == 'masters_menu':
        await show_masters_menu(query)
    elif data == 'services_menu':
        await show_services_menu(query)
    elif data == 'back_to_main':
        await show_main_menu(query)
    elif data.startswith('master_detail_'):
        master_id = data.split('_')[2]
        await show_master_details(query, master_id)
    elif data.startswith('service_detail_'):
        service_id = data.split('_')[2]
        await show_service_details(query, service_id)
    elif data == 'book_from_master':
        await book_appointment_from_details(query)
    elif data == 'book_from_service':
        await book_appointment_from_details(query)

async def show_masters_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–æ–≤ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/specialists")
        data = response.json()
        
        if data['message'] == 'success':
            masters = data['data']
            keyboard = []
            
            for master in masters:
                services_response = requests.get(f"{API_BASE_URL}/api/specialist/{master['id']}/services")
                
                if services_response.json()['message'] == 'success':
                    services = services_response.json()['data']
                    has_available_time = False
                    
                    for service in services:
                        today = datetime.now()
                        start_date = today.strftime('%Y-%m-%d')
                        end_date = (today + timedelta(days=7)).strftime('%Y-%m-%d')
                        
                        dates_response = requests.get(
                            f"{API_BASE_URL}/api/specialist/{master['id']}/service/{service['id']}/available-dates",
                            params={'start': start_date, 'end': end_date}
                        )
                        
                        if (dates_response.json()['message'] == 'success' and 
                            dates_response.json()['availableDates']):
                            has_available_time = True
                            break
                    
                    if has_available_time:
                        keyboard.append([
                            InlineKeyboardButton(
                                f"üë®‚Äçüíº {master['–∏–º—è']}",
                                callback_data=f'master_detail_{master["id"]}'
                            )
                        ])
            
            if not keyboard:
                await query.edit_message_text(
                    "‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üéØ –£—Å–ª—É–≥–∏", callback_data='services_menu')],
                        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data='book_appointment')],
                        [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
                    ])
                )
                return
            
            keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='back_to_main')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üë®‚Äçüíº –ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∞—Å—Ç–µ—Ä–∞ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:",
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤")
            
    except Exception as e:
        logger.error(f"Error fetching masters: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

async def show_services_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É—Å–ª—É–≥ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/services")
        data = response.json()
        
        if data.get('message') == 'success':
            services = data['data']
            keyboard = []
            
            for service in services:
                specialists_response = requests.get(f"{API_BASE_URL}/api/service/{service['id']}/specialists")
                
                if specialists_response.json()['message'] == 'success':
                    specialists = specialists_response.json()['data']
                    has_available_time = False
                    
                    for specialist in specialists:
                        today = datetime.now()
                        start_date = today.strftime('%Y-%m-%d')
                        end_date = (today + timedelta(days=7)).strftime('%Y-%m-%d')
                        
                        dates_response = requests.get(
                            f"{API_BASE_URL}/api/specialist/{specialist['id']}/service/{service['id']}/available-dates",
                            params={'start': start_date, 'end': end_date}
                        )
                        
                        if (dates_response.json()['message'] == 'success' and 
                            dates_response.json()['availableDates']):
                            has_available_time = True
                            break
                    
                    if has_available_time:
                        keyboard.append([
                            InlineKeyboardButton(
                                f"üéØ {service['–Ω–∞–∑–≤–∞–Ω–∏–µ']} - {service['—Ü–µ–Ω–∞']}‚ÇΩ",
                                callback_data=f'service_detail_{service["id"]}'
                            )
                        ])
            
            if not keyboard:
                await query.edit_message_text(
                    "‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üë®‚Äçüíº –ú–∞—Å—Ç–µ—Ä–∞", callback_data='masters_menu')],
                        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data='book_appointment')],
                        [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
                    ])
                )
                return
            
            keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='back_to_main')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üéØ –ù–∞—à–∏ —É—Å–ª—É–≥–∏\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É—Å–ª—É–≥—É —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:",
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥")
            
    except Exception as e:
        logger.error(f"Error fetching services: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

async def show_master_details(query, master_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/specialist/{master_id}")
        data = response.json()
        
        if data['message'] == 'success':
            master = data['data']
            
            message = f"üë®‚Äçüíº {master['–∏–º—è']}\n\n"
            
            if master.get('–æ–ø–∏—Å–∞–Ω–∏–µ'):
                message += f"{master['–æ–ø–∏—Å–∞–Ω–∏–µ']}\n\n"
            
            message += "–ù–∞–∂–º–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è:"
            
            keyboard = [
                [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data='book_appointment')],
                [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥ –∫ –º–∞—Å—Ç–µ—Ä–∞–º", callback_data='masters_menu')],
                [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if master.get('—Ñ–æ—Ç–æ'):
                try:
                    await query.message.reply_photo(
                        photo=master['—Ñ–æ—Ç–æ'],
                        caption=message,
                        reply_markup=reply_markup
                    )
                    await query.delete_message()
                    return
                except Exception as e:
                    logger.error(f"Error sending photo: {e}")
            
            await query.edit_message_text(
                message,
                reply_markup=reply_markup
            )
            
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Å—Ç–µ—Ä–µ")
            
    except Exception as e:
        logger.error(f"Error fetching master details: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

async def show_service_details(query, service_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/service/{service_id}")
        data = response.json()
        
        if response.status_code == 200 and data.get('message') == 'success':
            service = data['data']
            
            message = f"üéØ {service['–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n\n"
            
            if service.get('–∫–∞—Ç–µ–≥–æ—Ä–∏—è'):
                message += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {service['–∫–∞—Ç–µ–≥–æ—Ä–∏—è']}\n"
            
            message += f"–¶–µ–Ω–∞: {service['—Ü–µ–Ω–∞']}‚ÇΩ\n\n"
            
            if service.get('–æ–ø–∏—Å–∞–Ω–∏–µ'):
                message += f"{service['–æ–ø–∏—Å–∞–Ω–∏–µ']}\n\n"
            
            message += "–ù–∞–∂–º–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è:"
            
            keyboard = [
                [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data='book_appointment')],
                [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data='services_menu')],
                [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                reply_markup=reply_markup
            )
            
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ")
            
    except Exception as e:
        logger.error(f"Error fetching service details: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

async def book_appointment_from_details(query):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø–∏—Å–∏ –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    keyboard = [
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data='book_appointment')],
        [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø–∏—Å–∏...\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    application.run_polling()

if __name__ == '__main__':
    main()