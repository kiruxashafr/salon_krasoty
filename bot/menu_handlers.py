import os
import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = os.getenv('API_BASE_URL', 'http://localhost:3000')

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏ –∏ —É—Å–ª—É–≥–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üë®‚Äçüíº –ú–∞—Å—Ç–µ—Ä–∞", callback_data='masters_menu')],
        [InlineKeyboardButton("üéØ –£—Å–ª—É–≥–∏", callback_data='services_menu')],
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data='book_appointment')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=reply_markup
        )

async def show_masters_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–æ–≤"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/specialists")
        data = response.json()
        
        if data['message'] == 'success':
            masters = data['data']
            keyboard = []
            
            for master in masters:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üë®‚Äçüíº {master['–∏–º—è']}",
                        callback_data=f'master_detail_{master["id"]}'
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='back_to_main')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                "üë®‚Äçüíº –ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∞—Å—Ç–µ—Ä–∞ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:",
                reply_markup=reply_markup
            )
        else:
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤")
            
    except Exception as e:
        logger.error(f"Error fetching masters: {e}")
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

async def show_master_detail(update: Update, context: ContextTypes.DEFAULT_TYPE, master_id: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/specialist/{master_id}")
        data = response.json()
        
        if data['message'] == 'success':
            master = data['data']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"üë®‚Äçüíº {master['–∏–º—è']}\n\n"
                f"{master.get('–æ–ø–∏—Å–∞–Ω–∏–µ', '–û–ø—ã—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.')}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if '—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è' in master and master['—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è']:
                message += f"üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {master['—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è']}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if '–æ–ø—ã—Ç' in master and master['–æ–ø—ã—Ç']:
                message += f"üìÖ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {master['–æ–ø—ã—Ç']}\n\n"
            
            keyboard = [
                [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –º–∞—Å—Ç–µ—Ä—É", callback_data=f'book_master_{master_id}')],
                [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥ –∫ –º–∞—Å—Ç–µ—Ä–∞–º", callback_data='masters_menu')],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
            if '—Ñ–æ—Ç–æ' in master and master['—Ñ–æ—Ç–æ']:
                try:
                    await update.callback_query.message.reply_photo(
                        photo=master['—Ñ–æ—Ç–æ'],
                        caption=message,
                        reply_markup=reply_markup
                    )
                    await update.callback_query.delete_message()
                except:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    await update.callback_query.edit_message_text(
                        message,
                        reply_markup=reply_markup
                    )
            else:
                await update.callback_query.edit_message_text(
                    message,
                    reply_markup=reply_markup
                )
                
        else:
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Å—Ç–µ—Ä–µ")
            
    except Exception as e:
        logger.error(f"Error fetching master detail: {e}")
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

async def show_services_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É—Å–ª—É–≥"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/services")
        data = response.json()
        
        if data['message'] == 'success':
            services = data['data']
            keyboard = []
            
            for service in services:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üéØ {service['–Ω–∞–∑–≤–∞–Ω–∏–µ']} - {service['—Ü–µ–Ω–∞']}‚ÇΩ",
                        callback_data=f'service_detail_{service["id"]}'
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='back_to_main')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                "üéØ –ù–∞—à–∏ —É—Å–ª—É–≥–∏\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É—Å–ª—É–≥—É —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:",
                reply_markup=reply_markup
            )
        else:
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥")
            
    except Exception as e:
        logger.error(f"Error fetching services: {e}")
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

async def show_service_detail(update: Update, context: ContextTypes.DEFAULT_TYPE, service_id: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/service/{service_id}")
        data = response.json()
        
        if data['message'] == 'success':
            service = data['data']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"üéØ {service['–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n\n"
                f"üíµ –¶–µ–Ω–∞: {service['—Ü–µ–Ω–∞']}‚ÇΩ\n\n"
                f"{service.get('–æ–ø–∏—Å–∞–Ω–∏–µ', '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª—É–≥–∏.')}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
            if '–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' in service and service['–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å']:
                message += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {service['–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å']} –º–∏–Ω—É—Ç\n\n"
            
            keyboard = [
                [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É", callback_data=f'book_service_{service_id}')],
                [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data='services_menu')],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
            if '—Ñ–æ—Ç–æ' in service and service['—Ñ–æ—Ç–æ']:
                try:
                    await update.callback_query.message.reply_photo(
                        photo=service['—Ñ–æ—Ç–æ'],
                        caption=message,
                        reply_markup=reply_markup
                    )
                    await update.callback_query.delete_message()
                except:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    await update.callback_query.edit_message_text(
                        message,
                        reply_markup=reply_markup
                    )
            else:
                await update.callback_query.edit_message_text(
                    message,
                    reply_markup=reply_markup
                )
                
        else:
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ")
            
    except Exception as e:
        logger.error(f"Error fetching service detail: {e}")
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

async def handle_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == 'back_to_main':
        await show_main_menu(update, context)
    elif data == 'masters_menu':
        await show_masters_menu(update, context)
    elif data == 'services_menu':
        await show_services_menu(update, context)
    elif data.startswith('master_detail_'):
        master_id = data.split('_')[2]
        await show_master_detail(update, context, master_id)
    elif data.startswith('service_detail_'):
        service_id = data.split('_')[2]
        await show_service_detail(update, context, service_id)
    elif data.startswith('book_master_'):
        master_id = data.split('_')[2]
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–ø–∏—Å—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–∞—Å—Ç–µ—Ä–æ–º
        await show_booking_options_with_master(query, master_id)
    elif data.startswith('book_service_'):
        service_id = data.split('_')[2]
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–ø–∏—Å—å —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–æ–π
        await show_booking_options_with_service(query, service_id)
    elif data == 'cancel_to_main':
        await show_main_menu(update, context)
        
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == 'back_to_main':
        await show_main_menu(update, context)
    elif data == 'masters_menu':
        await show_masters_menu(update, context)
    elif data == 'services_menu':
        await show_services_menu(update, context)
    elif data.startswith('master_detail_'):
        master_id = data.split('_')[2]
        await show_master_detail(update, context, master_id)
    elif data.startswith('service_detail_'):
        service_id = data.split('_')[2]
        await show_service_detail(update, context, service_id)
    elif data.startswith('book_master_'):
        master_id = data.split('_')[2]
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–ø–∏—Å—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–∞—Å—Ç–µ—Ä–æ–º
        await show_booking_options_with_master(query, master_id)
    elif data.startswith('book_service_'):
        service_id = data.split('_')[2]
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–ø–∏—Å—å —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–æ–π
        await show_booking_options_with_service(query, service_id)

async def show_booking_options_with_master(query, master_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞"""
    from main import show_services_for_specialist
    await show_services_for_specialist(query, master_id)

async def show_booking_options_with_service(query, service_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏"""
    from main import show_specialists_for_service
    await show_specialists_for_service(query, service_id)