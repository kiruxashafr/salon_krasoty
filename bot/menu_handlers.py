# menu_handlers.py
import os
import logging
import requests
from personal_cabinet import show_personal_cabinet, handle_personal_callback
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram import InputMediaPhoto

from dotenv import load_dotenv
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = os.getenv('API_BASE_URL')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
if not API_BASE_URL:
    logger.error("‚ùå API_BASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏ –∏ —É—Å–ª—É–≥–∞–º–∏"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∞—Å—Ç–µ—Ä–æ–º
    is_master = False
    try:
        response = requests.get(f"{API_BASE_URL}/api/specialists-all")
        if response.json()['message'] == 'success':
            masters = response.json()['data']
            is_master = any(m.get('tg_id') == str(user_id) for m in masters)
    except:
        pass
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÆ –ú–∞—Å—Ç–µ—Ä–∞", callback_data='masters_menu'),
            InlineKeyboardButton("‚åò –£—Å–ª—É–≥–∏", callback_data='services_menu')
        ],
        [InlineKeyboardButton("‚úé –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data='book_appointment')],
        [InlineKeyboardButton("üõà –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts_menu')],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        [InlineKeyboardButton("‚éã –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='personal_cabinet')]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∞—Å—Ç–µ—Ä
    if is_master:
        keyboard.append([InlineKeyboardButton("‚ôî –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    message_text = "‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    
    photo_url = f"{API_BASE_URL}/photo/images/main.jpg"
    
    if hasattr(update, 'callback_query') and update.callback_query:
        query = update.callback_query
        try:
            photo_response = requests.get(photo_url)
            if photo_response.status_code == 200:
                photo_data = photo_response.content
                media = InputMediaPhoto(media=photo_data, caption=message_text)
                await query.edit_message_media(media=media, reply_markup=reply_markup)
            else:
                await query.edit_message_text(text=message_text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Error editing main menu: {e}")
            await query.edit_message_text(text=message_text, reply_markup=reply_markup)
    else:
        try:
            photo_response = requests.get(photo_url)
            if photo_response.status_code == 200:
                photo_data = photo_response.content
                await update.message.reply_photo(
                    photo=photo_data,
                    caption=message_text,
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    text=message_text,
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"Error in show_main_menu (no query): {e}")
            await update.message.reply_text(
                text=message_text,
                reply_markup=reply_markup
            )

async def show_contacts_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        response = requests.get(f"{API_BASE_URL}/api/links")
        data = response.json()
        
        if data['message'] == 'success':
            links = data['data']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
            message = "üõà –ö–æ–Ω—Ç–∞–∫—Ç—ã\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if links.get('phone_contact'):
                phone = links['phone_contact']
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥–µ–ª–∞–µ–º –µ–≥–æ –∫–æ–ø–∏—Ä—É–µ–º—ã–º
                formatted_phone = format_phone_number(phone)
                message += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω:\n<code>{formatted_phone}</code>\n\n"
            
            message += "üí¨ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\n"
            
            # Telegram
            if links.get('telegram_contact'):
                telegram_url = links['telegram_contact'].strip()
                if telegram_url.startswith('@'):
                    telegram_url = f"https://t.me/{telegram_url[1:]}"
                elif not telegram_url.startswith(('https://', 'http://')):
                    telegram_url = f"https://t.me/{telegram_url}"
                message += f"üì¢ Telegram: {telegram_url}\n"
            
            # WhatsApp
            if links.get('whatsapp_contact'):
                whatsapp_url = links['whatsapp_contact'].strip()
                message += f"üíö WhatsApp: {whatsapp_url}\n"
            
            # VK
            if links.get('vk_contact'):
                vk_url = links['vk_contact'].strip()
                message += f"üë• –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: {vk_url}\n"
            
            # Email
            if links.get('email_contact'):
                email = links['email_contact'].strip()
                message += f"üìß Email: {email}\n"
            
            # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
            keyboard = [[InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ç–æ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            photo_url = f"{API_BASE_URL}/photo/images/contakts.jpg"
            
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
                photo_response = requests.get(photo_url)
                if photo_response.status_code == 200:
                    photo_data = photo_response.content
                    await query.message.reply_photo(
                        photo=photo_data,
                        caption=message,
                        reply_markup=reply_markup,
                        parse_mode='HTML'  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML
                    )
                    await query.delete_message()
                else:
                    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.message.reply_text(
                        text=message, 
                        reply_markup=reply_markup,
                        parse_mode='HTML'  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML
                    )
                    await query.delete_message()
                    
            except Exception as e:
                logger.error(f"Error sending contacts with photo: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                try:
                    await query.message.reply_text(
                        text=message, 
                        reply_markup=reply_markup,
                        parse_mode='HTML'  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML
                    )
                    await query.delete_message()
                except Exception as e2:
                    logger.error(f"Error sending contacts text: {e2}")
                    await query.message.reply_text(
                        text=message, 
                        reply_markup=reply_markup,
                        parse_mode='HTML'  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML
                    )
                    await query.delete_message()
                    
        else:
            message = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"
            keyboard = [[InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(text=message, reply_markup=reply_markup)
            await query.delete_message()
            
    except Exception as e:
        logger.error(f"Error fetching contacts: {e}")
        message = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        keyboard = [[InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(text=message, reply_markup=reply_markup)
        await query.delete_message()



def format_phone_number(phone):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleaned = ''.join(filter(str.isdigit, phone))
    
    if cleaned.startswith('7') and len(cleaned) == 11:
        return f"+7 ({cleaned[1:4]}) {cleaned[4:7]}-{cleaned[7:9]}-{cleaned[9:]}"
    elif cleaned.startswith('8') and len(cleaned) == 11:
        return f"+7 ({cleaned[1:4]}) {cleaned[4:7]}-{cleaned[7:9]}-{cleaned[9:]}"
    else:
        return phone
    


async def show_master_detail(update: Update, context: ContextTypes.DEFAULT_TYPE, master_id: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ"""
    query = update.callback_query
    try:
        response = requests.get(f"{API_BASE_URL}/api/specialist/{master_id}")
        data = response.json()
        
        if data['message'] == 'success':
            master = data['data']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"‚ô¢ {master['–∏–º—è']}\n\n"
                f"{master.get('–æ–ø–∏—Å–∞–Ω–∏–µ', '–û–ø—ã—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.')}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if '—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è' in master and master['—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è']:
                message += f"‚úÆ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {master['—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è']}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if '–æ–ø—ã—Ç' in master and master['–æ–ø—ã—Ç']:
                message += f"‚â£ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {master['–æ–ø—ã—Ç']}\n\n"
            
            keyboard = [
                [InlineKeyboardButton("‚â£ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –º–∞—Å—Ç–µ—Ä—É", callback_data=f'book_master_{master_id}')],
                [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥ –∫ –º–∞—Å—Ç–µ—Ä–∞–º", callback_data='masters_menu')],
                [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
            if '—Ñ–æ—Ç–æ' in master and master['—Ñ–æ—Ç–æ'] and master['—Ñ–æ—Ç–æ'] != 'photo/—Ä–∞–±–æ—Ç–Ω–∏–∫–∏/default.jpg':
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –∫ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ API —Å–µ—Ä–≤–µ—Ä–∞
                    photo_url = f"{API_BASE_URL}/{master['—Ñ–æ—Ç–æ']}"
                    logger.info(f"Trying to edit with photo from URL: {photo_url}")
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
                    photo_response = requests.get(photo_url)
                    if photo_response.status_code == 200:
                        photo_data = photo_response.content
                        media = InputMediaPhoto(media=photo_data, caption=message)
                        await query.edit_message_media(media=media, reply_markup=reply_markup)
                    else:
                        logger.error(f"Failed to download photo: {photo_response.status_code}")
                        await query.edit_message_text(text=message, reply_markup=reply_markup)
                except Exception as photo_error:
                    logger.error(f"Error editing with photo: {photo_error}")
                    await query.edit_message_text(text=message, reply_markup=reply_markup)
            else:
                await query.edit_message_text(text=message, reply_markup=reply_markup)
                
        else:
            message = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Å—Ç–µ—Ä–µ"
            keyboard = [
                [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='masters_menu')],
                [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text=message, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"Error fetching master detail: {e}")
        message = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        keyboard = [
            [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='masters_menu')],
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=message, reply_markup=reply_markup)

async def show_masters_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–æ–≤"""
    query = update.callback_query
    photo_url = f"{API_BASE_URL}/photo/images/master.jpg"
    try:
        response = requests.get(f"{API_BASE_URL}/api/specialists")
        data = response.json()
        
        if data['message'] == 'success':
            masters = data['data']
            keyboard = []
            
            for master in masters:
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚ô¢ {master['–∏–º—è']}",
                        callback_data=f'master_detail_{master["id"]}'
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='back_to_main')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            message_text = (
                "‚ô¢ –ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∞—Å—Ç–µ—Ä–∞ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:"
            )
            
            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
                photo_response = requests.get(photo_url)
                if photo_response.status_code == 200:
                    photo_data = photo_response.content
                    media = InputMediaPhoto(media=photo_data, caption=message_text)
                    await query.edit_message_media(media=media, reply_markup=reply_markup)
                else:
                    await query.edit_message_text(text=message_text, reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"Error in show_masters_menu: {e}")
                await query.edit_message_text(text=message_text, reply_markup=reply_markup)
        else:
            message_text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤"
            keyboard = [[InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text=message_text, reply_markup=reply_markup)
                
    except Exception as e:
        logger.error(f"Error fetching masters: {e}")
        message_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        keyboard = [[InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=message_text, reply_markup=reply_markup)

async def show_services_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É—Å–ª—É–≥"""
    query = update.callback_query
    photo_url = f"{API_BASE_URL}/photo/images/services.jpg"
    try:
        response = requests.get(f"{API_BASE_URL}/api/services")
        data = response.json()
        
        if data['message'] == 'success':
            services = data['data']
            keyboard = []
            
            for service in services:
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚úÆ {service['–Ω–∞–∑–≤–∞–Ω–∏–µ']} - {service['—Ü–µ–Ω–∞']}‚ÇΩ",
                        callback_data=f'service_detail_{service["id"]}'
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='back_to_main')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            message_text = (
                "‚úÆ –ù–∞—à–∏ —É—Å–ª—É–≥–∏\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É—Å–ª—É–≥—É —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:"
            )
            
            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
                photo_response = requests.get(photo_url)
                if photo_response.status_code == 200:
                    photo_data = photo_response.content
                    media = InputMediaPhoto(media=photo_data, caption=message_text)
                    await query.edit_message_media(media=media, reply_markup=reply_markup)
                else:
                    await query.edit_message_text(text=message_text, reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"Error in show_services_menu: {e}")
                await query.edit_message_text(text=message_text, reply_markup=reply_markup)
        else:
            message_text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥"
            keyboard = [[InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text=message_text, reply_markup=reply_markup)
                
    except Exception as e:
        logger.error(f"Error fetching services: {e}")
        message_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        keyboard = [[InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=message_text, reply_markup=reply_markup)

async def show_service_detail(update: Update, context: ContextTypes.DEFAULT_TYPE, service_id: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ"""
    query = update.callback_query
    try:
        response = requests.get(f"{API_BASE_URL}/api/service/{service_id}")
        data = response.json()
        
        if data['message'] == 'success':
            service = data['data']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"‚úÆ {service['–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n\n"
                f"‚ÇΩ –¶–µ–Ω–∞: {service['—Ü–µ–Ω–∞']}‚ÇΩ\n\n"
                f"{service.get('–æ–ø–∏—Å–∞–Ω–∏–µ', '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª—É–≥–∏.')}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
            if '–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' in service and service['–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å']:
                message += f"‚óã –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {service['–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å']} –º–∏–Ω—É—Ç\n\n"
            
            keyboard = [
                [InlineKeyboardButton("‚â£ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É", callback_data=f'book_service_{service_id}')],
                [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data='services_menu')],
                [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
            if '—Ñ–æ—Ç–æ' in service and service['—Ñ–æ—Ç–æ'] and service['—Ñ–æ—Ç–æ'] != 'photo/—É—Å–ª—É–≥–∏/default.jpg':
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –∫ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ API —Å–µ—Ä–≤–µ—Ä–∞
                    photo_url = f"{API_BASE_URL}/{service['—Ñ–æ—Ç–æ']}"
                    logger.info(f"Trying to edit with service photo from URL: {photo_url}")
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
                    photo_response = requests.get(photo_url)
                    if photo_response.status_code == 200:
                        photo_data = photo_response.content
                        media = InputMediaPhoto(media=photo_data, caption=message)
                        await query.edit_message_media(media=media, reply_markup=reply_markup)
                    else:
                        logger.error(f"Failed to download service photo: {photo_response.status_code}")
                        await query.edit_message_text(text=message, reply_markup=reply_markup)
                except Exception as photo_error:
                    logger.error(f"Error editing with service photo: {photo_error}")
                    await query.edit_message_text(text=message, reply_markup=reply_markup)
            else:
                await query.edit_message_text(text=message, reply_markup=reply_markup)
                
        else:
            message = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ"
            keyboard = [
                [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='services_menu')],
                [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text=message, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"Error fetching service detail: {e}")
        message = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        keyboard = [
            [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='services_menu')],
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=message, reply_markup=reply_markup)

async def handle_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == 'back_to_main':
        await show_main_menu(update, context)
    elif data == 'masters_menu':
        await show_masters_menu(update, context)
    elif data == 'services_menu':
        await show_services_menu(update, context)
    elif data == 'contacts_menu':  # –ù–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        await show_contacts_menu(update, context)
    elif data.startswith('master_detail_'):
        master_id = data.split('_')[2]
        await show_master_detail(update, context, master_id)
    elif data.startswith('service_detail_'):
        service_id = data.split('_')[2]
        await show_service_detail(update, context, service_id)
    elif data.startswith('book_master_'):
        master_id = data.split('_')[2]
        await show_booking_options_with_master(query, master_id)
    elif data.startswith('book_service_'):
        service_id = data.split('_')[2]
        await show_booking_options_with_service(query, service_id)
    elif data == 'cancel_to_main':
        await show_main_menu(update, context)
    elif data == 'personal_cabinet':
        await show_personal_cabinet(update, context)



async def show_booking_options_with_master(query, master_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞"""
    from main import show_services_for_specialist
    try:
        await show_services_for_specialist(query, master_id)
    except Exception as e:
        logger.error(f"Error in show_booking_options_with_master: {e}")
        message_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Å–ª—É–≥ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞"
        keyboard = [
            [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='masters_menu')],
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=message_text, reply_markup=reply_markup)

async def show_booking_options_with_service(query, service_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏"""
    from main import show_specialists_for_service
    try:
        await show_specialists_for_service(query, service_id)
    except Exception as e:
        logger.error(f"Error in show_booking_options_with_service: {e}")
        message_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —É—Å–ª—É–≥–∏"
        keyboard = [
            [InlineKeyboardButton("‚Ü≤ –ù–∞–∑–∞–¥", callback_data='services_menu')],
            [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='cancel_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=message_text, reply_markup=reply_markup)