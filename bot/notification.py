import os
import logging
import asyncio
import requests
from datetime import datetime, timedelta
from telegram import Bot, InputMediaPhoto, InlineKeyboardButton, InlineKeyboardMarkup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv('.env')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = os.getenv('API_BASE_URL')
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not API_BASE_URL:
    logger.error("‚ùå API_BASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å Moscow (UTC+3)
TIMEZONE = pytz.timezone('Europe/Moscow')

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
def get_moscow_time():
    """–í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è"""
    return datetime.now(TIMEZONE)

def get_moscow_date():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    return get_moscow_time().date()

def get_moscow_datetime():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    return get_moscow_time()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot = None
scheduler = None
notification_loop = None

def initialize_notifications():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global bot, scheduler, notification_loop
    
    try:
        bot_token = os.getenv('BOT_TOKEN')
        print(f"DEBUG: Initializing notifications with BOT_TOKEN = {bot_token}")
        if not bot_token:
            raise ValueError("BOT_TOKEN is not set or empty")
        bot = Bot(token=bot_token.strip())
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π event loop –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_loop = asyncio.new_event_loop()
        asyncio.set_event_loop(notification_loop)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–∫–∞–∑—ã–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler = AsyncIOScheduler(event_loop=notification_loop, timezone=TIMEZONE)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤ 18:00 –ø–æ –ú–û–°–ö–û–í–°–ö–û–ú–£ –≤—Ä–µ–º–µ–Ω–∏
        scheduler.add_job(
            send_daily_master_notifications,
            CronTrigger(hour=16, minute=38, timezone=TIMEZONE),  # –î–û–ë–ê–í–õ–ï–ù–û timezone
            id='daily_master_notifications'
        )
        
        scheduler.add_job(
            send_daily_user_notifications,
            CronTrigger(hour=16, minute=39, timezone=TIMEZONE),  # –î–û–ë–ê–í–õ–ï–ù–û timezone
            id='daily_user_notifications'
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ —á–∞—Å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        scheduler.add_job(
            send_hourly_notifications,
            'interval',
            minutes=1,
            id='hourly_notifications_check'
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        scheduler.add_job(
            check_new_appointments,
            'interval',
            minutes=1,
            id='new_appointments_check'
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        scheduler.add_job(
            check_new_master_appointments,
            'interval',
            minutes=1,
            id='new_master_appointments_check'
        )
        
        scheduler.start()
        current_time = get_moscow_time()
        logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {current_time}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

async def send_notification_with_photo(chat_id: int, message: str, is_client: bool = True):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        if is_client:
            # –î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚éã –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")],
                [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        else:
            # –î–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤: –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        
        # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo_url = f"{API_BASE_URL}/photo/images/notif.jpg"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        photo_response = requests.get(photo_url)
        if photo_response.status_code == 200:
            photo_data = photo_response.content
            await bot.send_photo(
                chat_id=chat_id, 
                photo=photo_data, 
                caption=message,
                reply_markup=keyboard
            )
            return True
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await bot.send_message(
                chat_id=chat_id, 
                text=message,
                reply_markup=keyboard
            )
            logger.warning(f"–§–æ—Ç–æ notif.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            if is_client:
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚éã –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")],
                    [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            else:
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
                
            await bot.send_message(
                chat_id=chat_id, 
                text=message,
                reply_markup=keyboard
            )
            return True
        except Exception as text_error:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {text_error}")
            return False
        

async def send_notification_without_photo(chat_id: int, message: str, is_client: bool = True):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–µ–∑ —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        if is_client:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚éã –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")],
                [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        else:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        
        await bot.send_message(
            chat_id=chat_id, 
            text=message,
            reply_markup=keyboard
        )
        return True
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False 


async def check_new_master_appointments():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è)"""
    try:
        current_time = get_moscow_time()
        logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤. –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {current_time}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        today_date = get_moscow_date().strftime('%Y-%m-%d')
        
        response = requests.get(
            f"{API_BASE_URL}/api/appointments",
            params={'startDate': today_date, 'endDate': today_date}
        )
        
        if response.status_code != 200 or response.json().get('message') != 'success':
            logger.error(f"–û—à–∏–±–∫–∞ API appointments: {response.status_code} - {response.text}")
            return
            
        appointments = response.json().get('data', [])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è (–ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è)
        today_appointments = []
        for appointment in appointments:
            created_at = appointment.get('created_at', '')
            if created_at.startswith(today_date):
                today_appointments.append(appointment)
        
        new_master_notifications_sent = 0
        
        for appointment in today_appointments:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ masternew —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                check_notification_response = requests.get(
                    f"{API_BASE_URL}/api/check-notification",
                    params={
                        '–∑–∞–ø–∏—Å—å_id': appointment['id'],
                        '—Ç–∏–ø': 'masternew'
                    }
                )
                
                # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                should_send = True
                if (check_notification_response.status_code == 200 and 
                    check_notification_response.json().get('message') == 'success' and 
                    check_notification_response.json().get('sent', False)):
                    should_send = False
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ masternew –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment['id']} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                
                if should_send and appointment.get('–º–∞—Å—Ç–µ—Ä_tg_id'):
                    await send_master_new_appointment_notification(appointment)
                    new_master_notifications_sent += 1
                    await asyncio.sleep(0.5)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {appointment.get('id')}: {e}")
                continue
                
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {new_master_notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–∞—Å—Ç–µ—Ä–∞–º –æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö (—Å–µ–≥–æ–¥–Ω—è)")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤: {e}")

async def send_master_new_appointment_notification(appointment):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä—É"""
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        appointment_date = datetime.strptime(appointment['–¥–∞—Ç–∞'], '%Y-%m-%d')
        formatted_date = appointment_date.strftime('%d.%m.%Y')
        
        message = (
            "‚äπ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n\n"
            f"‚ô¢ –ö–ª–∏–µ–Ω—Ç: {appointment['–∫–ª–∏–µ–Ω—Ç_–∏–º—è']} ({appointment['–∫–ª–∏–µ–Ω—Ç_—Ç–µ–ª–µ—Ñ–æ–Ω']})\n"
            f"‚ô¢ –£—Å–ª—É–≥–∞: {appointment['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
            f"‚ô¢ –î–∞—Ç–∞: {formatted_date}\n"
            f"‚ô¢ –í—Ä–µ–º—è: {appointment['–≤—Ä–µ–º—è']}\n"
            f"‚ô¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {appointment['—Ü–µ–Ω–∞']}‚ÇΩ\n\n"
            f"‚ô¢ –°–æ–∑–¥–∞–Ω–æ: {appointment.get('created_at', '—Ç–æ–ª—å–∫–æ —á—Ç–æ')}"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å —Ñ–æ—Ç–æ
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å —Ñ–æ—Ç–æ, is_client=False –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
        success = await send_notification_with_photo(
            chat_id=appointment['–º–∞—Å—Ç–µ—Ä_tg_id'], 
            message=message,
            is_client=False  # –ú–ê–°–¢–ï–† - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
        )
        
        if success:
            # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            mark_response = requests.post(f"{API_BASE_URL}/api/notification-sent", json={
                '–∑–∞–ø–∏—Å—å_id': appointment['id'],
                '—Ç–∏–ø': 'masternew'
            })
            
            if mark_response.status_code == 200 and mark_response.json().get('message') == 'success':
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä—É {appointment['–º–∞—Å—Ç–µ—Ä_tg_id']}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ: {mark_response.text}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä—É: {e}")

async def send_daily_user_notifications():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        current_time = get_moscow_time()
        logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {current_time}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π endpoint
        response = requests.get(f"{API_BASE_URL}/api/appointments-for-daily-simple")
        
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return
            
        result = response.json()
        if result.get('message') != 'success':
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API: {result}")
            return
            
        appointments = result.get('data', [])
        
        daily_notifications_sent = 0
        
        for appointment in appointments:
            try:
                await send_user_daily_notification(appointment)
                daily_notifications_sent += 1
                await asyncio.sleep(0.5)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {appointment.get('id')}: {e}")
                continue
                
        if daily_notifications_sent > 0:
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {daily_notifications_sent} –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        else:
            logger.info("‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è daily —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")


def get_salon_phone():
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–∞–ª–æ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/links")
        if response.status_code == 200:
            data = response.json()
            if data.get('message') == 'success':
                phone = data.get('data', {}).get('phone_contact')
                if phone:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    return format_phone_number(phone)
        return "+7 (XXX) XXX-XX-XX"  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–∞–ª–æ–Ω–∞: {e}")
        return "+7 (XXX) XXX-XX-XX"

def format_phone_number(phone):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79711990304"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleaned = ''.join(filter(str.isdigit, phone))
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏–ª–∏ 8 –∏ –∏–º–µ–µ—Ç 11 —Ü–∏—Ñ—Ä (—Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä)
    if cleaned.startswith(('7', '8')) and len(cleaned) == 11:
        return f"+{cleaned}" if cleaned.startswith('7') else f"+7{cleaned[1:]}"
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +7)
    elif cleaned.startswith('7') and len(cleaned) == 11:
        return f"+{cleaned}"
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –∫–æ—Ä–æ—Ç–∫–∏–π (–≤–æ–∑–º–æ–∂–Ω–æ, –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã)
    elif len(cleaned) == 10:
        return f"+7{cleaned}"
    # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    else:
        return f"+{cleaned}" if cleaned and not cleaned.startswith('+') else cleaned

    


async def send_user_daily_notification(appointment):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        salon_phone = get_salon_phone()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        appointment_date = datetime.strptime(appointment['–¥–∞—Ç–∞'], '%Y-%m-%d')
        formatted_date = appointment_date.strftime('%d.%m.%Y')
        
        message = (
            "‚úÆ  –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –ó–ê–í–¢–†–ê –£ –í–ê–° –ó–ê–ü–ò–°–¨!\n\n"
            f"‚ô¢ –î–∞—Ç–∞: {formatted_date}\n"
            f"‚ô¢ –í—Ä–µ–º—è: {appointment['–≤—Ä–µ–º—è']}\n"
            f"‚ô¢ –£—Å–ª—É–≥–∞: {appointment['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
            f"‚ô¢ –ú–∞—Å—Ç–µ—Ä: {appointment['–º–∞—Å—Ç–µ—Ä_–∏–º—è']}\n"
            f"‚ô¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {appointment['—Ü–µ–Ω–∞']}‚ÇΩ\n\n"
            " –ú—ã —Ç–∞–∫–∂–µ –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º:\n"
            "‚Ä¢ –ó–∞ 1 —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏\n\n"
            "‚â£ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ–ø–∞–∑–¥—ã–≤–∞–π—Ç–µ!\n"
            f"‚â£ –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–∞–ª–æ–Ω–∞: {salon_phone}"
        )
                
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å —Ñ–æ—Ç–æ, is_client=True –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        success = await send_notification_with_photo(
            chat_id=appointment['–∫–ª–∏–µ–Ω—Ç_tg_id'], 
            message=message,
            is_client=True
        )
        
        if success:
            # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            mark_response = requests.post(f"{API_BASE_URL}/api/notification-sent", json={
                '–∑–∞–ø–∏—Å—å_id': appointment['id'],
                '—Ç–∏–ø': 'daily'
            })
            
            if mark_response.status_code == 200 and mark_response.json().get('message') == 'success':
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ daily —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {appointment['–∫–ª–∏–µ–Ω—Ç_tg_id']} –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment['id']}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ daily —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {mark_response.text}")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å daily —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {appointment['–∫–ª–∏–µ–Ω—Ç_tg_id']}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ daily —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")




async def send_hourly_notifications():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏"""
    try:
        current_time = get_moscow_time()
        logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏. –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {current_time}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π endpoint
        response = requests.get(f"{API_BASE_URL}/api/appointments-for-hourly-simple")
        
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return
            
        result = response.json()
        if result.get('message') != 'success':
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API: {result}")
            return
            
        appointments = result.get('data', [])
        
        hourly_notifications_sent = 0
        
        for appointment in appointments:
            try:
                await send_user_hourly_notification(appointment)
                hourly_notifications_sent += 1
                await asyncio.sleep(0.5)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {appointment.get('id')}: {e}")
                continue
                
        if hourly_notifications_sent > 0:
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {hourly_notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏")
        else:
            logger.info("‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è hourly —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏: {e}")

async def send_user_hourly_notification(appointment):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞ —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏"""
    try:
        salon_phone = get_salon_phone()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        appointment_date = datetime.strptime(appointment['–¥–∞—Ç–∞'], '%Y-%m-%d')
        formatted_date = appointment_date.strftime('%d.%m.%Y')
        
        message = (
            "‚äπ –ß–ê–° –î–û –ó–ê–ü–ò–°–ò!\n\n"
            f"‚ô¢ –°–µ–≥–æ–¥–Ω—è –≤ {appointment['–≤—Ä–µ–º—è']}\n"
            f"‚ô¢ –£—Å–ª—É–≥–∞: {appointment['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
            f"‚ô¢ –ú–∞—Å—Ç–µ—Ä: {appointment['–º–∞—Å—Ç–µ—Ä_–∏–º—è']}\n"
            f"‚ô¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {appointment['—Ü–µ–Ω–∞']}‚ÇΩ\n\n"
            "‚ô¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–µ–∑–∂–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ!\n"
            f"‚ô¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–∞–ª–æ–Ω–∞: {salon_phone}"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å —Ñ–æ—Ç–æ, is_client=True –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        success = await send_notification_with_photo(
            chat_id=appointment['–∫–ª–∏–µ–Ω—Ç_tg_id'], 
            message=message,
            is_client=True
        )
        
        if success:
            # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            mark_response = requests.post(f"{API_BASE_URL}/api/notification-sent", json={
                '–∑–∞–ø–∏—Å—å_id': appointment['id'],
                '—Ç–∏–ø': 'hourly'
            })
            
            if mark_response.status_code == 200 and mark_response.json().get('message') == 'success':
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ hourly —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {appointment['–∫–ª–∏–µ–Ω—Ç_tg_id']} –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment['id']}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ hourly —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {mark_response.text}")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å hourly —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {appointment['–∫–ª–∏–µ–Ω—Ç_tg_id']}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ hourly —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")




async def send_daily_master_notifications():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–∞—Å—Ç–µ—Ä–∞–º"""
    try:
        current_time = get_moscow_time()
        logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–∞—Å—Ç–µ—Ä–∞–º. –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {current_time}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –¥–∞—Ç—É –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        tomorrow = (get_moscow_date() + timedelta(days=1)).strftime('%Y-%m-%d')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
        response = requests.get(f"{API_BASE_URL}/api/specialists-all")
        if response.json().get('message') != 'success':
            logger.error(f"–û—à–∏–±–∫–∞ API specialists-all: {response.json()}")
            return
            
        masters = response.json().get('data', [])
        
        master_notifications_sent = 0
        
        for master in masters:
            if master.get('tg_id'):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                    appointments_response = requests.get(
                        f"{API_BASE_URL}/api/appointments",
                        params={
                            'specialistId': master['id'],
                            'startDate': tomorrow,
                            'endDate': tomorrow
                        }
                    )
                    
                    if appointments_response.json().get('message') != 'success':
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master['id']}")
                        continue
                    
                    appointments = appointments_response.json().get('data', [])
                    
                    # –ï–°–õ–ò –ù–ï–¢ –ó–ê–ü–ò–°–ï–ô - –ü–†–û–ü–£–°–¢–ò–¢–¨ –≠–¢–û–ì–û –ú–ê–°–¢–ï–†–ê
                    if not appointments:
                        logger.info(f"‚ÑπÔ∏è –£ –º–∞—Å—Ç–µ—Ä–∞ {master['id']} –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
                        continue
                    
                    # –ï—Å—Ç—å –∑–∞–ø–∏—Å–∏ - —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = f"‚â£ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow}):\n\n"
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                    appointments.sort(key=lambda x: x['–≤—Ä–µ–º—è'])
                    
                    for app in appointments:
                        message += (
                            f"‚è∞ {app['–≤—Ä–µ–º—è']}\n"
                            f"üë§ {app['–∫–ª–∏–µ–Ω—Ç_–∏–º—è']} ({app['–∫–ª–∏–µ–Ω—Ç_—Ç–µ–ª–µ—Ñ–æ–Ω']})\n"
                            f"üéØ {app['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
                            f"üíµ {app['—Ü–µ–Ω–∞']}‚ÇΩ\n"
                            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                        )
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å —Ñ–æ—Ç–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤, is_client=False
                    success = await send_notification_with_photo(
                        chat_id=master['tg_id'], 
                        message=message,
                        is_client=False
                    )
                    
                    if success:
                        master_notifications_sent += 1
                        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É {master['id']}")
                    
                    await asyncio.sleep(0.5)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä—É {master.get('id')}: {e}")
                    continue
                
        if master_notifications_sent > 0:
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {master_notifications_sent} –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–∞—Å—Ç–µ—Ä–∞–º")
        else:
            logger.info("‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–∞—Å—Ç–µ—Ä–æ–≤ —Å –∑–∞–ø–∏—Å—è–º–∏ –¥–ª—è daily —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–∞—Å—Ç–µ—Ä–∞–º: {e}")

async def send_master_daily_notification(master_id, tg_id, date):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º–∞—Å—Ç–µ—Ä—É –æ –∑–∞–ø–∏—Å—è—Ö –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    try:
        response = requests.get(
            f"{API_BASE_URL}/api/appointments",
            params={
                'specialistId': master_id,
                'startDate': date,
                'endDate': date
            }
        )
        
        if response.json()['message'] != 'success':
            logger.error(f"–û—à–∏–±–∫–∞ API appointments –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}: {response.json()}")
            return
            
        appointments = response.json()['data']
        
        if not appointments:
            message = f"‚â£ –ù–∞ {datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')} —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π"
        else:
            message = f"‚â£ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ {datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')}:\n\n"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            appointments.sort(key=lambda x: x['–≤—Ä–µ–º—è'])
            
            for app in appointments:
                message += (
                    f"‚â£ {app['–≤—Ä–µ–º—è']}\n"
                    f"‚â£ {app['–∫–ª–∏–µ–Ω—Ç_–∏–º—è']} ({app['–∫–ª–∏–µ–Ω—Ç_—Ç–µ–ª–µ—Ñ–æ–Ω']})\n"
                    f"‚â£ {app['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
                    f"‚â£ {app['—Ü–µ–Ω–∞']}‚ÇΩ\n"
                    f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å —Ñ–æ—Ç–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
        success = await send_notification_with_photo(chat_id=tg_id, message=message)
        
        if success:
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É {master_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä—É {master_id}: {e}")

async def check_new_appointments():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è)"""
    try:
        current_time = get_moscow_time()
        logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤. –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {current_time}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        today_date = get_moscow_date().strftime('%Y-%m-%d')
        
        response = requests.get(
            f"{API_BASE_URL}/api/appointments",
            params={'startDate': today_date, 'endDate': today_date}
        )
        
        if response.status_code != 200 or response.json().get('message') != 'success':
            logger.error(f"–û—à–∏–±–∫–∞ API appointments: {response.status_code} - {response.text}")
            return
            
        appointments = response.json().get('data', [])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è (–ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è)
        today_appointments = []
        for appointment in appointments:
            created_at = appointment.get('created_at', '')
            if created_at.startswith(today_date):
                today_appointments.append(appointment)
        
        new_client_notifications_sent = 0
        
        for appointment in today_appointments:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ immediate —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                check_notification_response = requests.get(
                    f"{API_BASE_URL}/api/check-notification",
                    params={
                        '–∑–∞–ø–∏—Å—å_id': appointment['id'],
                        '—Ç–∏–ø': 'immediate'
                    }
                )
                
                # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                should_send = True
                if (check_notification_response.status_code == 200 and 
                    check_notification_response.json().get('message') == 'success' and 
                    check_notification_response.json().get('sent', False)):
                    should_send = False
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ immediate –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment['id']} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                
                if should_send and appointment.get('–∫–ª–∏–µ–Ω—Ç_tg_id'):
                    await send_immediate_client_notification(appointment)
                    new_client_notifications_sent += 1
                    await asyncio.sleep(0.5)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {appointment.get('id')}: {e}")
                continue
                
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {new_client_notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º –æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö (—Å–µ–≥–æ–¥–Ω—è)")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")

async def send_immediate_client_notification(appointment):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É –æ successful –∑–∞–ø–∏—Å–∏"""
    try:
        salon_phone = get_salon_phone()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        appointment_date = datetime.strptime(appointment['–¥–∞—Ç–∞'], '%Y-%m-%d')
        formatted_date = appointment_date.strftime('%d.%m.%Y')
        
        message = (
            "‚äπ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"‚úÆ –£—Å–ª—É–≥–∞: {appointment['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
            f"‚ô¢ –ú–∞—Å—Ç–µ—Ä: {appointment['–º–∞—Å—Ç–µ—Ä_–∏–º—è']}\n"
            f"‚â£ –î–∞—Ç–∞: {formatted_date}\n"
            f"‚â£ –í—Ä–µ–º—è: {appointment['–≤—Ä–µ–º—è']}\n"
            f"‚â£ –°—Ç–æ–∏–º–æ—Å—Ç—å: {appointment['—Ü–µ–Ω–∞']}‚ÇΩ\n\n"
            "‚â£ –ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –æ –∑–∞–ø–∏—Å–∏:\n"
            "‚Ä¢ –ó–∞ –¥–µ–Ω—å –¥–æ –≤–∏–∑–∏—Ç–∞ (–≤ 18:00)\n"
            "‚Ä¢ –ó–∞ —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏\n\n"
            f"‚â£ –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–∞–ª–æ–Ω–∞: {salon_phone}\n\n"
            "‚â£ –í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å —Ñ–æ—Ç–æ, is_client=True –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        success = await send_notification_with_photo(
            chat_id=appointment['–∫–ª–∏–µ–Ω—Ç_tg_id'], 
            message=message,
            is_client=True
        )
            
        if success:
            # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            mark_response = requests.post(f"{API_BASE_URL}/api/notification-sent", json={
                '–∑–∞–ø–∏—Å—å_id': appointment['id'],
                '—Ç–∏–ø': 'immediate'
            })
            
            if mark_response.status_code == 200 and mark_response.json().get('message') == 'success':
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {appointment['–∫–ª–∏–µ–Ω—Ç_tg_id']} —Å –∫–Ω–æ–ø–∫–æ–π –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ immediate —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {mark_response.text}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {e}")

def shutdown_notifications():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global scheduler, notification_loop
    
    if scheduler:
        try:
            scheduler.shutdown()
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    if notification_loop:
        try:
            notification_loop.stop()
            notification_loop.close()
            logger.info("‚úÖ Event loop —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ event loop: {e}")