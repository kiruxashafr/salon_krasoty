# notification.py
import os
import logging
import asyncio
import requests
from datetime import datetime, timedelta
from telegram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = os.getenv('API_BASE_URL', 'http://localhost:3000')
BOT_TOKEN = os.getenv('BOT_TOKEN', '8456369002:AAFaxelo1bXHy2hzv5vUwwt8pMAUVu5SHlM')

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å Moscow (UTC+3)
TIMEZONE = pytz.timezone('Europe/Moscow')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot = None
scheduler = None
last_check_time = datetime.now(TIMEZONE)  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ MSK

def initialize_notifications():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global bot, scheduler
    
    try:
        bot = Bot(token=BOT_TOKEN)
        scheduler = AsyncIOScheduler(timezone=TIMEZONE)
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ 18:00 –ø–æ MSK
        scheduler.add_job(
            send_daily_notifications,
            CronTrigger(hour=18, minute=0, timezone=TIMEZONE),
            id='daily_notifications'
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        scheduler.add_job(
            check_new_appointments,
            'interval',
            minutes=1,
            id='new_appointments_check'
        )
        
        scheduler.start()
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

async def send_daily_notifications():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–∞—Å—Ç–µ—Ä–∞–º –æ –∑–∞–ø–∏—Å—è—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    try:
        now = datetime.now(TIMEZONE)
        tomorrow = (now + timedelta(days=1)).strftime('%Y-%m-%d')
        
        response = requests.get(f"{API_BASE_URL}/api/specialists-all")
        if response.json()['message'] != 'success':
            logger.error(f"–û—à–∏–±–∫–∞ API specialists-all: {response.json()}")
            return
            
        masters = response.json()['data']
        
        for master in masters:
            if master.get('tg_id'):
                await send_master_daily_notification(master['id'], master['tg_id'], tomorrow)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

async def send_master_daily_notification(master_id, tg_id, date):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º–∞—Å—Ç–µ—Ä—É"""
    try:
        response = requests.get(
            f"{API_BASE_URL}/api/appointments",
            params={
                'specialistId': master_id,
                'startDate': date,
                'endDate': date
            }
        )
        
        if response.json()['message'] != 'success':
            logger.error(f"–û—à–∏–±–∫–∞ API appointments –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}: {response.json()}")
            return
            
        appointments = response.json()['data']
        
        if not appointments:
            message = f"‚â£ –ù–∞ {datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')} —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π"
        else:
            message = f"‚â£ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ {datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')}:\n\n"
            
            for app in sorted(appointments, key=lambda x: x['–≤—Ä–µ–º—è']):
                message += (
                    f"‚è∞ {app['–≤—Ä–µ–º—è']}\n"
                    f"üë§ {app['–∫–ª–∏–µ–Ω—Ç_–∏–º—è']} ({app['–∫–ª–∏–µ–Ω—Ç_—Ç–µ–ª–µ—Ñ–æ–Ω']})\n"
                    f"üéØ {app['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
                    f"üíµ {app['—Ü–µ–Ω–∞']}‚ÇΩ\n"
                    f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                )
        
        await bot.send_message(chat_id=tg_id, text=message)
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É {master_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä—É {master_id}: {e}")

async def check_new_appointments():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    global last_check_time
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        logger.info(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π, last_check_time: {last_check_time}")
        
        response = requests.get(f"{API_BASE_URL}/api/specialists-all")
        if response.json()['message'] != 'success':
            logger.error(f"–û—à–∏–±–∫–∞ API specialists-all: {response.json()}")
            return
            
        masters = response.json()['data']
        masters_with_tg = [m for m in masters if m.get('tg_id')]
        
        if not masters_with_tg:
            logger.info("–ù–µ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤ —Å tg_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
            
        for master in masters_with_tg:
            await check_master_new_appointments(master['id'], master['tg_id'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º last_check_time –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        new_check_time = datetime.now(TIMEZONE)
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ last_check_time —Å {last_check_time} –Ω–∞ {new_check_time}")
        last_check_time = new_check_time
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")

async def check_master_new_appointments(master_id, tg_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞"""
    global last_check_time
    
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        since_time = last_check_time.strftime('%Y-%m-%d %H:%M:%S')
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id} —Å createdSince: {since_time}")
        
        response = requests.get(
            f"{API_BASE_URL}/api/appointments",
            params={
                'specialistId': master_id,
                'createdSince': since_time
            }
        )
        
        if response.json()['message'] != 'success':
            logger.error(f"–û—à–∏–±–∫–∞ API appointments –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}: {response.json()}")
            return
            
        appointments = response.json()['data']
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(appointments)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}")
        
        for app in appointments:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤–∞—è
            created_at = app.get('created_at')
            if created_at:
                created_at_dt = datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S').replace(tzinfo=TIMEZONE)
                if created_at_dt <= last_check_time:
                    logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}: {created_at}")
                    continue
                
            message = (
                "üîî –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {app['–∫–ª–∏–µ–Ω—Ç_–∏–º—è']} ({app['–∫–ª–∏–µ–Ω—Ç_—Ç–µ–ª–µ—Ñ–æ–Ω']})\n"
                f"üéØ –£—Å–ª—É–≥–∞: {app['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
                f"‚â£ –î–∞—Ç–∞: {app['–¥–∞—Ç–∞']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {app['–≤—Ä–µ–º—è']}\n"
                f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {app['—Ü–µ–Ω–∞']}‚ÇΩ\n"
                f"üïê –°–æ–∑–¥–∞–Ω–æ: {app['created_at']}"
            )
            
            await bot.send_message(chat_id=tg_id, text=message)
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä—É {master_id}, created_at: {app['created_at']}")
            
            await asyncio.sleep(1)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}: {e}")

async def send_immediate_notification(master_id, appointment_data):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/specialist/{master_id}")
        if response.json()['message'] != 'success':
            logger.error(f"–û—à–∏–±–∫–∞ API specialist/{master_id}: {response.json()}")
            return
            
        master = response.json()['data']
        
        if not master.get('tg_id'):
            logger.info(f"–ú–∞—Å—Ç–µ—Ä {master_id} –Ω–µ –∏–º–µ–µ—Ç tg_id")
            return
            
        message = (
            "üîî –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {appointment_data['clientName']} ({appointment_data['clientPhone']})\n"
            f"üéØ –£—Å–ª—É–≥–∞: {appointment_data['serviceName']}\n"
            f"‚â£ –î–∞—Ç–∞: {appointment_data['date']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {appointment_data['time']}\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {appointment_data['price']}‚ÇΩ"
        )
        
        await bot.send_message(chat_id=master['tg_id'], text=message)
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É {master_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def shutdown_notifications():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global scheduler
    
    if scheduler:
        scheduler.shutdown()
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")