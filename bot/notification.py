import os
import logging
import asyncio
import requests
from datetime import datetime, timedelta
from telegram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = os.getenv('API_BASE_URL', 'http://localhost:3011')
BOT_TOKEN = os.getenv('BOT_TOKEN', '8456369002:AAFaxelo1bXHy2hzv5vUwwt8pMAUVu5SHlM')

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å Moscow (UTC+3)
TIMEZONE = pytz.timezone('Europe/Moscow')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot = None
scheduler = None
notification_loop = None

def initialize_notifications():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global bot, scheduler, notification_loop
    
    try:
        bot = Bot(token=BOT_TOKEN)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π event loop –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_loop = asyncio.new_event_loop()
        asyncio.set_event_loop(notification_loop)
        
        scheduler = AsyncIOScheduler(event_loop=notification_loop, timezone=TIMEZONE)
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º –≤ 18:00 –ø–æ MSK
        scheduler.add_job(
            send_daily_master_notifications,
            CronTrigger(hour=18, minute=0, timezone=TIMEZONE),
            id='daily_master_notifications'
        )
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ 18:00 –ø–æ MSK
        scheduler.add_job(
            send_daily_user_notifications,
            CronTrigger(hour=18, minute=0, timezone=TIMEZONE),
            id='daily_user_notifications'
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ —á–∞—Å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        scheduler.add_job(
            send_hourly_notifications,
            'interval',
            minutes=1,
            id='hourly_notifications_check'
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        scheduler.add_job(
            check_new_appointments,
            'interval',
            minutes=1,
            id='new_appointments_check'
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        scheduler.add_job(
            check_new_master_appointments,
            'interval',
            minutes=1,
            id='new_master_appointments_check'
        )
        
        scheduler.start()
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

async def check_new_master_appointments():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è)"""
    try:
        logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤ (—Å–µ–≥–æ–¥–Ω—è)")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
        today_date = datetime.now(TIMEZONE).strftime('%Y-%m-%d')
        
        response = requests.get(
            f"{API_BASE_URL}/api/appointments",
            params={'startDate': today_date, 'endDate': today_date}
        )
        
        if response.status_code != 200 or response.json().get('message') != 'success':
            logger.error(f"–û—à–∏–±–∫–∞ API appointments: {response.status_code} - {response.text}")
            return
            
        appointments = response.json().get('data', [])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è (–ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è)
        today_appointments = []
        for appointment in appointments:
            created_at = appointment.get('created_at', '')
            if created_at.startswith(today_date):
                today_appointments.append(appointment)
        
        new_master_notifications_sent = 0
        
        for appointment in today_appointments:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ masternew —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                check_notification_response = requests.get(
                    f"{API_BASE_URL}/api/check-notification",
                    params={
                        '–∑–∞–ø–∏—Å—å_id': appointment['id'],
                        '—Ç–∏–ø': 'masternew'
                    }
                )
                
                # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                should_send = True
                if (check_notification_response.status_code == 200 and 
                    check_notification_response.json().get('message') == 'success' and 
                    check_notification_response.json().get('sent', False)):
                    should_send = False
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ masternew –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment['id']} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                
                if should_send and appointment.get('–º–∞—Å—Ç–µ—Ä_tg_id'):
                    await send_master_new_appointment_notification(appointment)
                    new_master_notifications_sent += 1
                    await asyncio.sleep(0.5)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {appointment.get('id')}: {e}")
                continue
                
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {new_master_notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–∞—Å—Ç–µ—Ä–∞–º –æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö (—Å–µ–≥–æ–¥–Ω—è)")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤: {e}")

async def send_master_new_appointment_notification(appointment):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä—É"""
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        appointment_date = datetime.strptime(appointment['–¥–∞—Ç–∞'], '%Y-%m-%d')
        formatted_date = appointment_date.strftime('%d.%m.%Y')
        
        message = (
            "üîî –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {appointment['–∫–ª–∏–µ–Ω—Ç_–∏–º—è']} ({appointment['–∫–ª–∏–µ–Ω—Ç_—Ç–µ–ª–µ—Ñ–æ–Ω']})\n"
            f"üéØ –£—Å–ª—É–≥–∞: {appointment['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
            f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {appointment['–≤—Ä–µ–º—è']}\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {appointment['—Ü–µ–Ω–∞']}‚ÇΩ\n\n"
            f"üïê –°–æ–∑–¥–∞–Ω–æ: {appointment.get('created_at', '—Ç–æ–ª—å–∫–æ —á—Ç–æ')}"
        )
        
        await bot.send_message(chat_id=appointment['–º–∞—Å—Ç–µ—Ä_tg_id'], text=message)
        
        # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
        mark_response = requests.post(f"{API_BASE_URL}/api/notification-sent", json={
            '–∑–∞–ø–∏—Å—å_id': appointment['id'],
            '—Ç–∏–ø': 'masternew'
        })
        
        if mark_response.status_code == 200 and mark_response.json().get('message') == 'success':
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä—É {appointment['–º–∞—Å—Ç–µ—Ä_tg_id']}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ: {mark_response.text}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä—É: {e}")

async def send_daily_user_notifications():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –∑–∞–ø–∏—Å—è—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    try:
        logger.info("üîÑ –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
        tomorrow = (datetime.now(TIMEZONE) + timedelta(days=1)).strftime('%Y-%m-%d')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        response = requests.get(
            f"{API_BASE_URL}/api/appointments-with-notifications",
            params={'startDate': tomorrow, 'endDate': tomorrow}
        )
        
        if response.status_code != 200 or response.json().get('message') != 'success':
            logger.error(f"–û—à–∏–±–∫–∞ API appointments: {response.status_code} - {response.text}")
            return
            
        appointments = response.json().get('data', [])
        
        user_notifications_sent = 0
        
        for appointment in appointments:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ daily —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏
                check_notification_response = requests.get(
                    f"{API_BASE_URL}/api/check-notification",
                    params={
                        '–∑–∞–ø–∏—Å—å_id': appointment['id'],
                        '—Ç–∏–ø': 'daily'
                    }
                )
                
                # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
                should_send = True
                if (check_notification_response.status_code == 200 and 
                    check_notification_response.json().get('message') == 'success' and 
                    check_notification_response.json().get('sent', False)):
                    should_send = False
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ daily –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment['id']} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                
                if should_send and appointment.get('–∫–ª–∏–µ–Ω—Ç_tg_id'):
                    await send_user_daily_notification(appointment)
                    user_notifications_sent += 1
                    await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {appointment.get('id')}: {e}")
                continue
                
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_notifications_sent} –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {e}")

async def send_hourly_notifications():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞ —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏"""
    try:
        logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 1 —á–∞—Å
        one_hour_later = datetime.now(TIMEZONE) + timedelta(hours=1)
        current_time_str = datetime.now(TIMEZONE).strftime('%Y-%m-%d %H:%M:%S')
        one_hour_later_str = one_hour_later.strftime('%Y-%m-%d %H:%M:%S')
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 1 —á–∞—Å
        response = requests.get(
            f"{API_BASE_URL}/api/appointments-for-hourly",
            params={
                'startTime': current_time_str,
                'endTime': one_hour_later_str
            }
        )
        
        if response.json()['message'] != 'success':
            logger.error(f"–û—à–∏–±–∫–∞ API appointments-for-hourly: {response.json()}")
            return
            
        appointments = response.json()['data']
        
        hourly_notifications_sent = 0
        
        for appointment in appointments:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ hourly —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                check_notification_response = requests.get(
                    f"{API_BASE_URL}/api/check-notification",
                    params={
                        '–∑–∞–ø–∏—Å—å_id': appointment['id'],
                        '—Ç–∏–ø': 'hourly'
                    }
                )
                
                # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                should_send = True
                if (check_notification_response.json().get('message') == 'success' and 
                    check_notification_response.json().get('sent', False)):
                    should_send = False
                
                if should_send and appointment.get('–∫–ª–∏–µ–Ω—Ç_tg_id'):
                    await send_user_hourly_notification(appointment)
                    hourly_notifications_sent += 1
                    await asyncio.sleep(0.5)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {appointment.get('id')}: {e}")
                continue
                
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {hourly_notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏: {e}")

async def send_user_daily_notification(appointment):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        appointment_date = datetime.strptime(appointment['–¥–∞—Ç–∞'], '%Y-%m-%d')
        formatted_date = appointment_date.strftime('%d.%m.%Y')
        
        message = (
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏!\n\n"
            f"üìÖ –£ –≤–∞—Å –∑–∞–ø–∏—Å—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({formatted_date})\n"
            f"‚è∞ –í—Ä–µ–º—è: {appointment['–≤—Ä–µ–º—è']}\n"
            f"üéØ –£—Å–ª—É–≥–∞: {appointment['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
            f"üë®‚Äçüíº –ú–∞—Å—Ç–µ—Ä: {appointment['–º–∞—Å—Ç–µ—Ä_–∏–º—è']}\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {appointment['—Ü–µ–Ω–∞']}‚ÇΩ\n\n"
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ–ø–∞–∑–¥—ã–≤–∞–π—Ç–µ!"
        )
        
        await bot.send_message(chat_id=appointment['–∫–ª–∏–µ–Ω—Ç_tg_id'], text=message)
        
        # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
        mark_response = requests.post(f"{API_BASE_URL}/api/notification-sent", json={
            '–∑–∞–ø–∏—Å—å_id': appointment['id'],
            '—Ç–∏–ø': 'daily'
        })
        
        if mark_response.status_code == 200 and mark_response.json().get('message') == 'success':
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {appointment['–∫–ª–∏–µ–Ω—Ç_tg_id']}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ: {mark_response.text}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

async def send_user_hourly_notification(appointment):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞ —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏"""
    try:
        message = (
            "‚è∞ –°–∫–æ—Ä–æ –∑–∞–ø–∏—Å—å!\n\n"
            f"üìÖ –£ –≤–∞—Å –∑–∞–ø–∏—Å—å —Å–µ–≥–æ–¥–Ω—è –≤ {appointment['–≤—Ä–µ–º—è']}\n"
            f"üéØ –£—Å–ª—É–≥–∞: {appointment['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
            f"üë®‚Äçüíº –ú–∞—Å—Ç–µ—Ä: {appointment['–º–∞—Å—Ç–µ—Ä_–∏–º—è']}\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {appointment['—Ü–µ–Ω–∞']}‚ÇΩ\n\n"
            "üöó –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–µ–∑–∂–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ!"
        )
        
        await bot.send_message(chat_id=appointment['–∫–ª–∏–µ–Ω—Ç_tg_id'], text=message)
        
        # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
        requests.post(f"{API_BASE_URL}/api/notification-sent", json={
            '–∑–∞–ø–∏—Å—å_id': appointment['id'],
            '—Ç–∏–ø': 'hourly'
        })
        
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ —á–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {appointment['–∫–ª–∏–µ–Ω—Ç_tg_id']}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ —á–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        
async def send_daily_master_notifications():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–∞—Å—Ç–µ—Ä–∞–º –æ –∑–∞–ø–∏—Å—è—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    try:
        now = datetime.now(TIMEZONE)
        tomorrow = (now + timedelta(days=1)).strftime('%Y-%m-%d')
        
        response = requests.get(f"{API_BASE_URL}/api/specialists-all")
        if response.json()['message'] != 'success':
            logger.error(f"–û—à–∏–±–∫–∞ API specialists-all: {response.json()}")
            return
            
        masters = response.json()['data']
        
        for master in masters:
            if master.get('tg_id'):
                await send_master_daily_notification(master['id'], master['tg_id'], tomorrow)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–∞—Å—Ç–µ—Ä–∞–º: {e}")

async def send_master_daily_notification(master_id, tg_id, date):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º–∞—Å—Ç–µ—Ä—É"""
    try:
        response = requests.get(
            f"{API_BASE_URL}/api/appointments",
            params={
                'specialistId': master_id,
                'startDate': date,
                'endDate': date
            }
        )
        
        if response.json()['message'] != 'success':
            logger.error(f"–û—à–∏–±–∫–∞ API appointments –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}: {response.json()}")
            return
            
        appointments = response.json()['data']
        
        if not appointments:
            message = f"‚â£ –ù–∞ {datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')} —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π"
        else:
            message = f"‚â£ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ {datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')}:\n\n"
            
            for app in sorted(appointments, key=lambda x: x['–≤—Ä–µ–º—è']):
                message += (
                    f"‚è∞ {app['–≤—Ä–µ–º—è']}\n"
                    f"üë§ {app['–∫–ª–∏–µ–Ω—Ç_–∏–º—è']} ({app['–∫–ª–∏–µ–Ω—Ç_—Ç–µ–ª–µ—Ñ–æ–Ω']})\n"
                    f"üéØ {app['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
                    f"üíµ {app['—Ü–µ–Ω–∞']}‚ÇΩ\n"
                    f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                )
        
        await bot.send_message(chat_id=tg_id, text=message)
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É {master_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä—É {master_id}: {e}")

async def check_new_appointments():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è)"""
    try:
        logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Å–µ–≥–æ–¥–Ω—è)")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è
        today_date = datetime.now(TIMEZONE).strftime('%Y-%m-%d')
        
        response = requests.get(
            f"{API_BASE_URL}/api/appointments",
            params={'startDate': today_date, 'endDate': today_date}
        )
        
        if response.status_code != 200 or response.json().get('message') != 'success':
            logger.error(f"–û—à–∏–±–∫–∞ API appointments: {response.status_code} - {response.text}")
            return
            
        appointments = response.json().get('data', [])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è (–ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è)
        today_appointments = []
        for appointment in appointments:
            created_at = appointment.get('created_at', '')
            if created_at.startswith(today_date):
                today_appointments.append(appointment)
        
        new_client_notifications_sent = 0
        
        for appointment in today_appointments:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ immediate —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                check_notification_response = requests.get(
                    f"{API_BASE_URL}/api/check-notification",
                    params={
                        '–∑–∞–ø–∏—Å—å_id': appointment['id'],
                        '—Ç–∏–ø': 'immediate'
                    }
                )
                
                # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                should_send = True
                if (check_notification_response.status_code == 200 and 
                    check_notification_response.json().get('message') == 'success' and 
                    check_notification_response.json().get('sent', False)):
                    should_send = False
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ immediate –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment['id']} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                
                if should_send and appointment.get('–∫–ª–∏–µ–Ω—Ç_tg_id'):
                    await send_immediate_client_notification(appointment)
                    new_client_notifications_sent += 1
                    await asyncio.sleep(0.5)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {appointment.get('id')}: {e}")
                continue
                
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {new_client_notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º –æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö (—Å–µ–≥–æ–¥–Ω—è)")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")

async def send_immediate_client_notification(appointment):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É –æ successful –∑–∞–ø–∏—Å–∏"""
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        appointment_date = datetime.strptime(appointment['–¥–∞—Ç–∞'], '%Y-%m-%d')
        formatted_date = appointment_date.strftime('%d.%m.%Y')
        
        message = (
            "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"‚úÆ –£—Å–ª—É–≥–∞: {appointment['—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
            f"‚ô¢ –ú–∞—Å—Ç–µ—Ä: {appointment['–º–∞—Å—Ç–µ—Ä_–∏–º—è']}\n"
            f"‚â£ –î–∞—Ç–∞: {formatted_date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {appointment['–≤—Ä–µ–º—è']}\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {appointment['—Ü–µ–Ω–∞']}‚ÇΩ\n\n"
            "üìå –ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –æ –∑–∞–ø–∏—Å–∏:\n"
            "‚Ä¢ –ó–∞ –¥–µ–Ω—å –¥–æ –≤–∏–∑–∏—Ç–∞ (–≤ 18:00)\n"
            "‚Ä¢ –ó–∞ —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏\n\n"
            "üìã –í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ"
        )
        
        await bot.send_message(chat_id=appointment['–∫–ª–∏–µ–Ω—Ç_tg_id'], text=message)
        
        # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
        mark_response = requests.post(f"{API_BASE_URL}/api/notification-sent", json={
            '–∑–∞–ø–∏—Å—å_id': appointment['id'],
            '—Ç–∏–ø': 'immediate'
        })
        
        if mark_response.status_code == 200 and mark_response.json().get('message') == 'success':
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {appointment['–∫–ª–∏–µ–Ω—Ç_tg_id']}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ immediate —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {mark_response.text}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {e}")

def shutdown_notifications():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global scheduler, notification_loop
    
    if scheduler:
        try:
            scheduler.shutdown()
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    if notification_loop:
        try:
            notification_loop.stop()
            notification_loop.close()
            logger.info("‚úÖ Event loop —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ event loop: {e}")