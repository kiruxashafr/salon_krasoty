// master.js
class MastersManager {
constructor() {
    this.currentMasterId = null;
    this.isEditMode = false;
    this.noPhoto = false; // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥
    this.init();
}

    init() {
        this.loadMasters();
        this.setupEventListeners();
    }

    async loadMasters() {
        try {
            this.showLoading();
            const response = await fetch('/api/specialists-all');
            
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤');
            }
            
            const data = await response.json();
            
            if (data.message === 'success') {
                // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤ —Å –¥–æ—Å—Ç—É–ø–µ–Ω != 0
                const activeMasters = data.data.filter(master => master.–¥–æ—Å—Ç—É–ø–µ–Ω !== 0);
                this.displayMasters(activeMasters);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤');
        }
    }

    displayMasters(masters) {
        const container = document.getElementById('mastersContainer');
        
        if (!masters || masters.length === 0) {
            container.innerHTML = `
                <div class="no-masters">
                    <h3>–ú–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</h3>
                    <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞"</p>
                </div>
            `;
            return;
        }

        container.innerHTML = masters.map(master => this.createMasterCard(master)).join('');
    }

    createMasterCard(master) {
            let photoUrl = master.—Ñ–æ—Ç–æ || 'photo/—Ä–∞–±–æ—Ç–Ω–∏–∫–∏/default.jpg';
    if (photoUrl.startsWith('data:')) {
        photoUrl = 'photo/—Ä–∞–±–æ—Ç–Ω–∏–∫–∏/default.jpg';
    }
        const isHidden = master.–¥–æ—Å—Ç—É–ø–µ–Ω === 2;
        const statusText = isHidden ? '–°–∫—Ä—ã—Ç' : '–ê–∫—Ç–∏–≤–µ–Ω';
        const statusClass = isHidden ? 'hidden' : '';

        return `
            <div class="master-card ${statusClass}" data-master-id="${master.id}">
                <div class="master-header">
                    <img src="${master.—Ñ–æ—Ç–æ || 'photo/—Ä–∞–±–æ—Ç–Ω–∏–∫–∏/default.jpg'}" 
                         alt="${master.–∏–º—è}" 
                         class="master-image"
                         onerror="this.src='photo/—Ä–∞–±–æ—Ç–Ω–∏–∫–∏/default.jpg'">
                    <div class="master-info">
                        <h3 class="master-name">
                            ${master.–∏–º—è}
                            <span class="master-status">${statusText}</span>
                        </h3>
                        <p class="master-description">${master.–æ–ø–∏—Å–∞–Ω–∏–µ || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
                    </div>
                </div>
                
                <div class="master-actions">
                    <button class="action-btn btn-edit" onclick="mastersManager.editMaster(${master.id})">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    
                    ${isHidden ? `
                        <button class="action-btn btn-restore" onclick="mastersManager.toggleMasterVisibility(${master.id}, 1)">
                            üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å
                        </button>
                    ` : `
                        <button class="action-btn btn-hide" onclick="mastersManager.toggleMasterVisibility(${master.id}, 2)">
                            üëÅÔ∏è –°–∫—Ä—ã—Ç—å
                        </button>
                    `}
                    
                    <button class="action-btn btn-delete" onclick="mastersManager.deleteMaster(${master.id})">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
    }

    showAddForm() {
        this.isEditMode = false;
        this.currentMasterId = null;
        this.renderMasterForm();
    }

    async editMaster(masterId) {
        try {
            this.showFormLoading();
            const response = await fetch(`/api/specialist/${masterId}`);
            
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–∞');
            }
            
            const data = await response.json();
            
            if (data.message === 'success') {
                this.isEditMode = true;
                this.currentMasterId = masterId;
                this.renderMasterForm(data.data);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞');
        }
    }

renderMasterForm(masterData = null) {
    const hasPhoto = masterData?.—Ñ–æ—Ç–æ && masterData.—Ñ–æ—Ç–æ !== 'photo/—Ä–∞–±–æ—Ç–Ω–∏–∫–∏/default.jpg';
    
    const formHTML = `
        <div class="master-form-container">
            <div class="form-header">
                <h3 class="form-title">${this.isEditMode ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞' : '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞'}</h3>
                <button class="close-form-btn" onclick="mastersManager.closeForm()">
                    ‚úï –ó–∞–∫—Ä—ã—Ç—å
                </button>
            </div>
            
            <form class="master-form" id="masterForm" onsubmit="mastersManager.handleSubmit(event)" enctype="multipart/form-data">
                <div class="form-row">
                    <div class="form-group">
                        <label for="masterName">–ò–º—è –º–∞—Å—Ç–µ—Ä–∞ *</label>
                        <input type="text" id="masterName" name="name" class="form-control" 
                               value="${masterData?.–∏–º—è || ''}" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="masterPhoto">–§–æ—Ç–æ –º–∞—Å—Ç–µ—Ä–∞</label>
                        <input type="file" id="masterPhoto" name="photo" class="form-control" 
                               accept="image/*" onchange="mastersManager.handleFileSelect(event)">
                        <small>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, GIF</small>
                        <button type="button" class="btn-no-photo" onclick="mastersManager.setNoPhoto()">
                            üö´ –ë–µ–∑ —Ñ–æ—Ç–æ
                        </button>
                    </div>
                </div>
                
                ${hasPhoto ? `
                    <div class="form-group">
                        <label>–¢–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ:</label>
                        <img src="${masterData.—Ñ–æ—Ç–æ}" class="image-preview" 
                             onerror="this.style.display='none'">
                        <button type="button" class="btn-remove-photo" onclick="mastersManager.removePhoto()">
                            ‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ
                        </button>
                    </div>
                ` : ''}
                
                <div class="form-group">
                    <label for="masterDescription">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                    <textarea id="masterDescription" name="description" class="form-control" 
                              rows="4" placeholder="–û–ø–∏—à–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º–∞—Å—Ç–µ—Ä–∞...">${masterData?.–æ–ø–∏—Å–∞–Ω–∏–µ || ''}</textarea>
                </div>
                
                <button type="submit" class="submit-btn">
                    ${this.isEditMode ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞'}
                </button>
            </form>
        </div>
    `;

    document.getElementById('mastersContainer').insertAdjacentHTML('beforeend', formHTML);
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ñ–æ—Ä–º–µ
    document.querySelector('.master-form-container').scrollIntoView({ 
        behavior: 'smooth', 
        block: 'start' 
    });
}






    handleFileSelect(event) {
        const file = event.target.files[0];
        if (file) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const reader = new FileReader();
            reader.onload = function(e) {
                const previewContainer = document.querySelector('.image-preview-container') || 
                    document.createElement('div');
                previewContainer.className = 'image-preview-container';
                
                previewContainer.innerHTML = `
                    <label>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</label>
                    <img src="${e.target.result}" class="image-preview" style="max-width: 200px; max-height: 200px;">
                `;
                
                const form = document.getElementById('masterForm');
                form.querySelector('.form-group:last-child').after(previewContainer);
            };
            reader.readAsDataURL(file);
        }
    }


// –í –º–µ—Ç–æ–¥–µ handleSubmit
async handleSubmit(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const name = formData.get('name').trim();
    const description = formData.get('description').trim();
    const photoFile = formData.get('photo');

    if (!name) {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞');
        return;
    }

    try {
        this.showFormLoading();
        
        let photoPath = null;
        
        if (this.noPhoto) {
            photoPath = null;
        } else if (photoFile && photoFile.size > 0) {
            photoPath = await this.uploadPhoto(photoFile);
        } else if (this.isEditMode) {
            const currentPreview = document.querySelector('.image-preview');
            if (currentPreview && !currentPreview.src.startsWith('data:')) {
                photoPath = currentPreview.src;
            } else {
                photoPath = null;
            }
        }

        const masterData = {
            –∏–º—è: name,
            –æ–ø–∏—Å–∞–Ω–∏–µ: description,
            —Ñ–æ—Ç–æ: photoPath
        };

        const url = this.isEditMode 
            ? `/api/specialist/${this.currentMasterId}` 
            : '/api/specialists';
            
        const method = this.isEditMode ? 'PUT' : 'POST';
        
        const response = await fetch(url, {
            method: method,
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(masterData)
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }

        const data = await response.json();
        
        if (data.message === 'success') {
            showSuccess(this.isEditMode ? '–ú–∞—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!' : '–ú–∞—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
            this.closeForm();
            this.loadMasters();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: ' + error.message);
    } finally {
        this.hideFormLoading();
        this.noPhoto = false;
    }
}

// –í –º–µ—Ç–æ–¥–µ toggleMasterVisibility
async toggleMasterVisibility(masterId, status) {
    const action = status === 1 ? '–ø–æ–∫–∞–∑–∞—Ç—å' : '—Å–∫—Ä—ã—Ç—å';
    
    showConfirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ ${action} —ç—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞?`, (confirmed) => {
        if (confirmed) {
            this.performToggleVisibility(masterId, status, action);
        }
    });
}


async performToggleVisibility(masterId, status, action) {
    try {
        const response = await fetch(`/api/specialist/${masterId}/visibility`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ –¥–æ—Å—Ç—É–ø–µ–Ω: status })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏');
        }

        const data = await response.json();
        
        if (data.message === 'success') {
            showSuccess(`–ú–∞—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ ${action === '–ø–æ–∫–∞–∑–∞—Ç—å' ? '–ø–æ–∫–∞–∑–∞–Ω' : '—Å–∫—Ä—ã—Ç'}!`);
            this.loadMasters();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –º–∞—Å—Ç–µ—Ä–∞: ' + error.message);
    }
}


async deleteMaster(masterId) {
    showConfirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!', (confirmed) => {
        if (confirmed) {
            this.performDelete(masterId);
        }
    });
}

async performDelete(masterId) {
    try {
        const response = await fetch(`/api/specialist/${masterId}`, {
            method: 'DELETE'
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞');
        }

        const data = await response.json();
        
        if (data.message === 'success') {
            showSuccess('–ú–∞—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
            this.loadMasters();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞');
    }
}

// –í –º–µ—Ç–æ–¥–µ setNoPhoto
setNoPhoto() {
    this.noPhoto = true;
    const fileInput = document.getElementById('masterPhoto');
    if (fileInput) {
        fileInput.value = '';
    }
    showInfo('–§–æ—Ç–æ –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ');
}

// –í –º–µ—Ç–æ–¥–µ removePhoto
removePhoto() {
    this.noPhoto = true;
    const preview = document.querySelector('.image-preview');
    if (preview) {
        preview.style.display = 'none';
    }
    const removeBtn = document.querySelector('.btn-remove-photo');
    if (removeBtn) {
        removeBtn.style.display = 'none';
    }
    showInfo('–¢–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ');
}
// master.js - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è uploadPhoto
async uploadPhoto(file) {
    const formData = new FormData();
    formData.append('photo', file);
    
    try {
        const response = await fetch('/api/upload-photo', {
            method: 'POST',
            body: formData
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ');
        }
        
        const data = await response.json();
        return data.filePath;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: ' + error.message);
        return 'photo/—Ä–∞–±–æ—Ç–Ω–∏–∫–∏/default.jpg';
    }
}




    closeForm() {
        const formContainer = document.querySelector('.master-form-container');
        if (formContainer) {
            formContainer.remove();
        }
    }

    showLoading() {
        const container = document.getElementById('mastersContainer');
        container.innerHTML = `
            <div class="loading" style="text-align: center; padding: 2rem;">
                <div class="spinner"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤...</p>
            </div>
        `;
    }

    showFormLoading() {
        const form = document.getElementById('masterForm');
        if (form) {
            const submitBtn = form.querySelector('.submit-btn');
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<div class="spinner" style="width: 20px; height: 20px;"></div> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
            
            // –î–æ–±–∞–≤–ª—è–µ–º overlay –ø–æ–≤–µ—Ä—Ö —Ñ–æ—Ä–º—ã
            const formContainer = document.querySelector('.master-form-container');
            formContainer.style.position = 'relative';
            
            const overlay = document.createElement('div');
            overlay.className = 'loading-overlay';
            overlay.innerHTML = '<div class="spinner"></div>';
            formContainer.appendChild(overlay);
        }
    }

    hideFormLoading() {
        const form = document.getElementById('masterForm');
        if (form) {
            const submitBtn = form.querySelector('.submit-btn');
            submitBtn.disabled = false;
            submitBtn.textContent = this.isEditMode ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞';
            
            // –£–±–∏—Ä–∞–µ–º overlay
            const overlay = document.querySelector('.loading-overlay');
            if (overlay) overlay.remove();
        }
    }

    showError(message) {
        const container = document.getElementById('mastersContainer');
        container.innerHTML = `
            <div class="error" style="text-align: center; padding: 2rem; color: #e74c3c;">
                <h3>–û—à–∏–±–∫–∞</h3>
                <p>${message}</p>
                <button onclick="mastersManager.loadMasters()" class="btn btn-primary">
                    ‚ü≥ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        `;
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        document.getElementById('addMasterBtn')?.addEventListener('click', () => {
            this.showAddForm();
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
let mastersManager;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
function loadMastersSection() {
    const contentContainer = document.getElementById('contentContainer');
    contentContainer.innerHTML = `
        <div class="masters-management">
            <div class="masters-header">
                <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º–∏</h2>
                <button id="addMasterBtn" class="add-master-btn">
                    ‚úö –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞
                </button>
            </div>
            
            <div id="mastersContainer">
                <div class="loading">
                    <div class="spinner"></div>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤...</p>
                </div>
            </div>
        </div>
    `;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –º–∞—Å—Ç–µ—Ä–æ–≤
    mastersManager = new MastersManager();
}



