// freetime.js
class FreeTimeManager {
    constructor() {
        this.currentScheduleId = null;
        this.isEditMode = false;
        this.specialists = [];
        this.services = [];
        this.init();
    }

    init() {
        this.loadFreeTime();
        this.setupEventListeners();
    }

// freetime.js - –æ–±–Ω–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ loadFreeTime

async loadFreeTime() {
    try {
        this.showLoading();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        const today = new Date().toISOString().split('T')[0];
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π endpoint
        const response = await fetch(`/api/freetime-available?fromDate=${today}`);
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏');
        }
        
        const data = await response.json();
        
        if (data.message === 'success') {
            this.displayFreeTime(data.data);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è');
    }
}

    displayFreeTime(scheduleData) {
        const container = document.getElementById('freeTimeContainer');
        
        if (!scheduleData || scheduleData.length === 0) {
            container.innerHTML = `
                <div class="no-free-time">
                    <h3>–°–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç</h3>
                    <p>–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è"</p>
                </div>
            `;
            return;
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
        const groupedByDate = this.groupScheduleByDate(scheduleData);
        container.innerHTML = this.createScheduleCalendar(groupedByDate);
    }

    groupScheduleByDate(scheduleData) {
        const grouped = {};
        
        scheduleData.forEach(item => {
            if (!grouped[item.–¥–∞—Ç–∞]) {
                grouped[item.–¥–∞—Ç–∞] = [];
            }
            grouped[item.–¥–∞—Ç–∞].push(item);
        });
        
        return grouped;
    }

    createScheduleCalendar(groupedData) {
        const dates = Object.keys(groupedData).sort();
        
        return `
            <div class="schedule-calendar">
                ${dates.map(date => this.createDateSection(date, groupedData[date])).join('')}
            </div>
        `;
    }

    createDateSection(date, scheduleItems) {
        const dateObj = new Date(date);
        const formattedDate = dateObj.toLocaleDateString('ru-RU', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
        
        return `
            <div class="date-section" data-date="${date}">
                <div class="date-header">
                    <h3>${formattedDate}</h3>
                    <button class="add-date-time-btn" onclick="freeTimeManager.showAddFormForDate('${date}')">
                        ‚úö –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è
                    </button>
                </div>
                <div class="schedule-items">
                    ${scheduleItems.map(item => this.createScheduleItem(item)).join('')}
                </div>
            </div>
        `;
    }

    createScheduleItem(item) {
        return `
            <div class="schedule-item" data-schedule-id="${item.id}">
                <div class="schedule-info">
                    <div class="schedule-time">${item.–≤—Ä–µ–º—è}</div>
                    <div class="schedule-details">
                        <div class="schedule-master">–ú–∞—Å—Ç–µ—Ä: ${item.–º–∞—Å—Ç–µ—Ä_–∏–º—è}</div>
                        <div class="schedule-service">–£—Å–ª—É–≥–∞: ${item.—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ}</div>
                        <div class="schedule-price">–¶–µ–Ω–∞: ${item.—É—Å–ª—É–≥–∞_—Ü–µ–Ω–∞} ‚ÇΩ</div>
                    </div>
                </div>
                <div class="schedule-actions">
                    <button class="action-btn btn-edit" onclick="freeTimeManager.editSchedule(${item.id})">
                        ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å
                    </button>
                    <button class="action-btn btn-delete" onclick="freeTimeManager.deleteSchedule(${item.id})">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
    }

    showAddForm() {
        this.isEditMode = false;
        this.currentScheduleId = null;
        this.renderScheduleForm();
    }

    showAddFormForDate(date) {
        this.isEditMode = false;
        this.currentScheduleId = null;
        this.renderScheduleForm(null, date);
    }

    async editSchedule(scheduleId) {
        try {
            this.showFormLoading();
            const response = await fetch(`/api/schedule/${scheduleId}`);
            
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
            }
            
            const data = await response.json();
            
            if (data.message === 'success') {
                this.isEditMode = true;
                this.currentScheduleId = scheduleId;
                this.renderScheduleForm(data.data);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
        }
    }

    async renderScheduleForm(scheduleData = null, presetDate = null) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ —É—Å–ª—É–≥–∏
        await this.loadSpecialistsAndServices();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        const today = new Date().toISOString().split('T')[0];
        const dateValue = presetDate || scheduleData?.–¥–∞—Ç–∞ || today;
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        let hours = '09';
        let minutes = '00';
        
        if (scheduleData?.–≤—Ä–µ–º—è) {
            const [h, m] = scheduleData.–≤—Ä–µ–º—è.split(':');
            hours = h;
            minutes = m;
        }
        
        const formHTML = `
            <div class="modal-overlay" id="scheduleModal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">${this.isEditMode ? '–ò–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è' : '–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è'}</h3>
                        <button class="close-modal-btn" onclick="freeTimeManager.closeModal()">
                            ‚úï
                        </button>
                    </div>
                    
                    <form class="schedule-form" id="scheduleForm" onsubmit="freeTimeManager.handleSubmit(event)">
                        <div class="form-group">
                            <label for="scheduleDate">–î–∞—Ç–∞ *</label>
                            <input type="date" id="scheduleDate" name="date" class="form-control" 
                                   value="${dateValue}" min="${today}" required>
                        </div>
                        
                        <div class="form-group">
                            <label>–í—Ä–µ–º—è *</label>
                            <div class="time-inputs">
                                <select id="scheduleHours" name="hours" class="form-control time-select" required>
                                    ${this.generateTimeOptions(5, 23, hours, '—á–∞—Å—ã')}
                                </select>
                                <span>:</span>
                                <select id="scheduleMinutes" name="minutes" class="form-control time-select" required>
                                    ${this.generateTimeOptions(0, 55, minutes, '–º–∏–Ω—É—Ç—ã', 5)}
                                </select>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="scheduleSpecialist">–ú–∞—Å—Ç–µ—Ä *</label>
                            <select id="scheduleSpecialist" name="specialistId" class="form-control" required>
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞</option>
                                ${this.specialists.map(spec => `
                                    <option value="${spec.id}" ${scheduleData?.–º–∞—Å—Ç–µ—Ä_id === spec.id ? 'selected' : ''}>
                                        ${spec.–∏–º—è}
                                    </option>
                                `).join('')}
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="scheduleService">–£—Å–ª—É–≥–∞ *</label>
                            <select id="scheduleService" name="serviceId" class="form-control" required>
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É</option>
                                ${this.services.map(service => `
                                    <option value="${service.id}" ${scheduleData?.—É—Å–ª—É–≥–∞_id === service.id ? 'selected' : ''}>
                                        ${service.–Ω–∞–∑–≤–∞–Ω–∏–µ} - ${service.—Ü–µ–Ω–∞} ‚ÇΩ
                                    </option>
                                `).join('')}
                            </select>
                        </div>
                        
                        <div class="modal-actions">
                            <button type="button" class="btn btn-secondary" onclick="freeTimeManager.closeModal()">
                                –û—Ç–º–µ–Ω–∞
                            </button>
                            <button type="submit" class="btn btn-primary submit-btn">
                                ${this.isEditMode ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–î–æ–±–∞–≤–∏—Ç—å'}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', formHTML);
    }

    generateTimeOptions(start, end, selectedValue, placeholder, step = 1) {
        let options = `<option value="">${placeholder}</option>`;
        for (let i = start; i <= end; i += step) {
            const value = i.toString().padStart(2, '0');
            const selected = value === selectedValue ? 'selected' : '';
            options += `<option value="${value}" ${selected}>${value}</option>`;
        }
        return options;
    }

    async loadSpecialistsAndServices() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤
            const specResponse = await fetch('/api/specialists');
            if (specResponse.ok) {
                const specData = await specResponse.json();
                if (specData.message === 'success') {
                    this.specialists = specData.data;
                }
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏
            const servResponse = await fetch('/api/services');
            if (servResponse.ok) {
                const servData = await servResponse.json();
                if (servData.message === 'success') {
                    this.services = servData.data;
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
// –í –º–µ—Ç–æ–¥–µ handleSubmit
async handleSubmit(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const date = formData.get('date');
    const hours = formData.get('hours');
    const minutes = formData.get('minutes');
    const specialistId = formData.get('specialistId');
    const serviceId = formData.get('serviceId');

    if (!date || !hours || !minutes || !specialistId || !serviceId) {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return;
    }

    const time = `${hours}:${minutes}`;

    try {
        this.showFormLoading();
        
        const scheduleData = {
            –¥–∞—Ç–∞: date,
            –≤—Ä–µ–º—è: time,
            –º–∞—Å—Ç–µ—Ä_id: parseInt(specialistId),
            —É—Å–ª—É–≥–∞_id: parseInt(serviceId),
            –¥–æ—Å—Ç—É–ø–Ω–æ: 1
        };

        const url = this.isEditMode 
            ? `/api/schedule/${this.currentScheduleId}` 
            : '/api/schedule';
            
        const method = this.isEditMode ? 'PUT' : 'POST';
        
        const response = await fetch(url, {
            method: method,
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(scheduleData)
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }

        const data = await response.json();
        
        if (data.message === 'success') {
            showSuccess(this.isEditMode ? '–°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!' : '–°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
            this.closeModal();
            this.loadFreeTime();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: ' + error.message);
    } finally {
        this.hideFormLoading();
    }
}

// –í –º–µ—Ç–æ–¥–µ deleteSchedule
async deleteSchedule(scheduleId) {
    showConfirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?', (confirmed) => {
        if (confirmed) {
            this.performDelete(scheduleId);
        }
    });
}

async performDelete(scheduleId) {
    try {
        const response = await fetch(`/api/schedule/${scheduleId}`, {
            method: 'DELETE'
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏');
        }

        const data = await response.json();
        
        if (data.message === 'success') {
            showSuccess('–°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!');
            this.loadFreeTime();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è');
    }
}

    closeModal() {
        const modal = document.getElementById('scheduleModal');
        if (modal) {
            modal.remove();
        }
    }

    showLoading() {
        const container = document.getElementById('freeTimeContainer');
        container.innerHTML = `
            <div class="loading" style="text-align: center; padding: 2rem;">
                <div class="spinner"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...</p>
            </div>
        `;
    }

    showFormLoading() {
        const form = document.getElementById('scheduleForm');
        if (form) {
            const submitBtn = form.querySelector('.submit-btn');
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<div class="spinner" style="width: 20px; height: 20px;"></div> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
        }
    }

    hideFormLoading() {
        const form = document.getElementById('scheduleForm');
        if (form) {
            const submitBtn = form.querySelector('.submit-btn');
            submitBtn.disabled = false;
            submitBtn.textContent = this.isEditMode ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–î–æ–±–∞–≤–∏—Ç—å';
        }
    }

    showError(message) {
        const container = document.getElementById('freeTimeContainer');
        container.innerHTML = `
            <div class="error" style="text-align: center; padding: 2rem; color: #e74c3c;">
                <h3>–û—à–∏–±–∫–∞</h3>
                <p>${message}</p>
                <button onclick="freeTimeManager.loadFreeTime()" class="btn btn-primary">
                    ‚ü≥ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        `;
    }

    setupEventListeners() {
        document.getElementById('addFreeTimeBtn')?.addEventListener('click', () => {
            this.showAddForm();
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
let freeTimeManager;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
function loadFreeTimeSection() {
    const contentContainer = document.getElementById('contentContainer');
    contentContainer.innerHTML = `
        <div class="free-time-management">
            <div class="free-time-header">
                <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º</h2>
                <button id="addFreeTimeBtn" class="add-free-time-btn">
                    ‚úö –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
                </button>
            </div>
            
            <div id="freeTimeContainer">
                <div class="loading">
                    <div class="spinner"></div>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...</p>
                </div>
            </div>
        </div>
    `;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    freeTimeManager = new FreeTimeManager();
}