class ScheduleManager {
    constructor() {
        this.currentView = 'specialist'; // —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ 'specialist'
        this.currentType = 'appointments'; // 'appointments' –∏–ª–∏ 'freetime'
        this.selectedSpecialistId = null; // null –±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å "–í—Å–µ –º–∞—Å—Ç–µ—Ä–∞"
        this.startDate = null;
        this.endDate = null;
        this.specialists = [];
        this.init();
    }

    async init() {
        await this.loadSpecialists();
        this.setupEventListeners();
        this.setDefaultDates();
        this.loadSchedule();
    }

    async loadSpecialists() {
        try {
            const response = await fetch('/api/specialists');
            if (response.ok) {
                const data = await response.json();
                if (data.message === 'success') {
                    this.specialists = data.data;
                    this.updateUI();
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤:', error);
        }
    }

    setupEventListeners() {
        // –£–±—Ä–∞–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –æ–±—â–∏–º –∏ –º–∞—Å—Ç–µ—Ä–æ–º
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏ –∏ —Å–≤–æ–±–æ–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        document.getElementById('appointmentsType').addEventListener('click', () => {
            this.currentType = 'appointments';
            this.updateUI();
            this.loadSchedule();
        });

        document.getElementById('freetimeType').addEventListener('click', () => {
            this.currentType = 'freetime';
            this.updateUI();
            this.loadSchedule();
        });

        // –í—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞
        document.getElementById('specialistSelect').addEventListener('change', (e) => {
            this.selectedSpecialistId = e.target.value === 'all' ? null : e.target.value;
            this.loadSchedule();
        });

        // –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–∞—Ç
        document.getElementById('todayBtn').addEventListener('click', () => {
            this.setToday();
            this.loadSchedule();
        });

        document.getElementById('weekBtn').addEventListener('click', () => {
            this.setWeek();
            this.loadSchedule();
        });

        // –í—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
        document.getElementById('startDate').addEventListener('change', (e) => {
            this.startDate = e.target.value;
            this.loadSchedule();
        });

        document.getElementById('endDate').addEventListener('change', (e) => {
            this.endDate = e.target.value;
            this.loadSchedule();
        });
    }


    setDefaultDates() {
        const today = new Date();
        this.startDate = today.toISOString().split('T')[0];
        
        const endDate = new Date(today);
        endDate.setDate(today.getDate() + 6); // +6 –¥–Ω–µ–π = –Ω–µ–¥–µ–ª—è
        this.endDate = endDate.toISOString().split('T')[0];
        
        this.updateDateInputs();
    }

    setToday() {
        const today = new Date();
        this.startDate = today.toISOString().split('T')[0];
        this.endDate = today.toISOString().split('T')[0];
        this.updateDateInputs();
    }

    setWeek() {
        const today = new Date();
        this.startDate = today.toISOString().split('T')[0];
        
        const endDate = new Date(today);
        endDate.setDate(today.getDate() + 6);
        this.endDate = endDate.toISOString().split('T')[0];
        
        this.updateDateInputs();
    }

    updateDateInputs() {
        document.getElementById('startDate').value = this.startDate;
        document.getElementById('endDate').value = this.endDate;
    }

    updateUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–±—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
        document.querySelectorAll('.type-tabs .schedule-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        document.getElementById(`${this.currentType}Type`).classList.add('active');

        // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞
        const specialistSelector = document.getElementById('specialistSelector');
        specialistSelector.style.display = 'flex';
        this.populateSpecialistSelect();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const title = document.getElementById('scheduleTitle');
        if (this.currentType === 'appointments') {
            title.textContent = `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π ${this.selectedSpecialistId ? '(–ü–æ –º–∞—Å—Ç–µ—Ä—É)' : '(–í—Å–µ –º–∞—Å—Ç–µ—Ä–∞)'}`;
        } else {
            title.textContent = `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ${this.selectedSpecialistId ? '(–ü–æ –º–∞—Å—Ç–µ—Ä—É)' : '(–í—Å–µ –º–∞—Å—Ç–µ—Ä–∞)'}`;
        }
    }

    populateSpecialistSelect() {
        const select = document.getElementById('specialistSelect');
        select.innerHTML = '<option value="all">–í—Å–µ –º–∞—Å—Ç–µ—Ä–∞</option>';
        
        this.specialists.forEach(specialist => {
            const option = document.createElement('option');
            option.value = specialist.id;
            option.textContent = specialist.–∏–º—è;
            if (specialist.id == this.selectedSpecialistId) {
                option.selected = true;
            }
            select.appendChild(option);
        });
        
        // –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä, –≤—ã–±–∏—Ä–∞–µ–º "–í—Å–µ –º–∞—Å—Ç–µ—Ä–∞"
        if (!this.selectedSpecialistId) {
            select.value = 'all';
        }
    }

    async loadSchedule() {
        const container = document.getElementById('scheduleContainer');
        container.innerHTML = `
            <div class="loading-schedule">
                <div class="loading-spinner"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...</p>
            </div>
        `;

        try {
            let data;
            if (this.currentType === 'appointments') {
                data = await this.loadAppointments();
            } else {
                data = await this.loadFreeTime();
            }
            
            this.displaySchedule(data);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
            container.innerHTML = `
                <div class="empty-schedule">
                    <div class="empty-schedule-icon">‚ö†Ô∏è</div>
                    <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                    <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</p>
                    <button onclick="scheduleManager.loadSchedule()" class="btn btn-primary">
                        ‚ü≥ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                </div>
            `;
        }
    }

    async loadAppointments() {
        try {
            let url = '/api/appointments?';
            const params = [];
            
            if (this.currentView === 'specialist' && this.selectedSpecialistId) {
                params.push(`specialistId=${this.selectedSpecialistId}`);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∞—Ç—ã
            params.push(`startDate=${this.startDate}`);
            params.push(`endDate=${this.endDate}`);
            
            url += params.join('&');
            
            const response = await fetch(url);
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π');
            
            const data = await response.json();
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–∞–º
            const groupedByDate = {};
            if (data.message === 'success' && data.data) {
                data.data.forEach(appointment => {
                    if (!groupedByDate[appointment.–¥–∞—Ç–∞]) {
                        groupedByDate[appointment.–¥–∞—Ç–∞] = [];
                    }
                    groupedByDate[appointment.–¥–∞—Ç–∞].push(appointment);
                });
            }
            
            return groupedByDate;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π:', error);
            return {};
        }
    }

    async loadFreeTime() {
        let url = '/api/schedule-available?';
        
        if (this.currentView === 'specialist' && this.selectedSpecialistId) {
            url += `specialistId=${this.selectedSpecialistId}&`;
        }
        
        url += `startDate=${this.startDate}&endDate=${this.endDate}`;
        
        const response = await fetch(url);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏');
        
        const data = await response.json();
        return data.message === 'success' ? data.data : [];
    }

    displaySchedule(data) {
        const container = document.getElementById('scheduleContainer');
        
        if (this.currentType === 'appointments') {
            this.displayAppointments(data, container);
        } else {
            this.displayFreeTime(data, container);
        }
    }

    displayAppointments(appointmentsByDate, container) {
        const dates = Object.keys(appointmentsByDate).sort();
        
        if (dates.length === 0) {
            container.innerHTML = `
                <div class="empty-schedule">
                    <div class="empty-schedule-icon">üìÖ</div>
                    <h3>–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç</h3>
                    <p>–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
                </div>
            `;
            return;
        }

        let html = '<div class="schedule-grid">';
        
        dates.forEach(date => {
            const dateObj = new Date(date);
            const formattedDate = dateObj.toLocaleDateString('ru-RU', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            
            const appointments = appointmentsByDate[date];
            
            html += `
                <div class="schedule-day">
                    <div class="day-header">
                        <h3 class="day-title">${formattedDate}</h3>
                    </div>
                    <div class="day-appointments">
                        ${this.getAppointmentsForDate(appointments)}
                    </div>
                </div>
            `;
        });
        
        html += '</div>';
        container.innerHTML = html;
    }

getAppointmentsForDate(appointments) {
    if (!appointments || appointments.length === 0) {
        return '<p>–ó–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç</p>';
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    appointments.sort((a, b) => a.–≤—Ä–µ–º—è.localeCompare(b.–≤—Ä–µ–º—è));
    
    return appointments.map(appointment => {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è (—É–±–∏—Ä–∞–µ–º —Å–µ–∫—É–Ω–¥—ã –µ—Å–ª–∏ –µ—Å—Ç—å)
        const time = appointment.–≤—Ä–µ–º—è.includes(':') ? 
                    appointment.–≤—Ä–µ–º—è.split(':').slice(0, 2).join(':') : 
                    appointment.–≤—Ä–µ–º—è;
        
        return `
            <div class="appointment-item">
            <div class="appointment-time">${time}</div>
            <div class="appointment-details">
                <div class="appointment-service">${appointment.—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ}</div>
                <div class="appointment-master">–ú–∞—Å—Ç–µ—Ä: ${appointment.–º–∞—Å—Ç–µ—Ä_–∏–º—è}</div>
                <div class="appointment-client">
                <span class="client-name">–ö–ª–∏–µ–Ω—Ç: ${appointment.–∫–ª–∏–µ–Ω—Ç_–∏–º—è}</span>
                &nbsp;&nbsp;
                <span class="client-phone">${appointment.–∫–ª–∏–µ–Ω—Ç_—Ç–µ–ª–µ—Ñ–æ–Ω}</span>
                </div>
            </div>
            <div class="appointment-price">${appointment.—Ü–µ–Ω–∞} ‚ÇΩ</div>
            </div>
        `;
    }).join('');
}

    displayFreeTime(freeTimeData, container) {
        if (!freeTimeData || freeTimeData.length === 0) {
            container.innerHTML = `
                <div class="empty-schedule">
                    <div class="empty-schedule-icon">‚è∞</div>
                    <h3>–°–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç</h3>
                    <p>–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
                </div>
            `;
            return;
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
        const groupedByDate = {};
        freeTimeData.forEach(item => {
            if (!groupedByDate[item.–¥–∞—Ç–∞]) {
                groupedByDate[item.–¥–∞—Ç–∞] = [];
            }
            groupedByDate[item.–¥–∞—Ç–∞].push(item);
        });

        const dates = Object.keys(groupedByDate).sort();
        
        let html = '<div class="schedule-grid">';
        
        dates.forEach(date => {
            const dateObj = new Date(date);
            const formattedDate = dateObj.toLocaleDateString('ru-RU', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            groupedByDate[date].sort((a, b) => a.–≤—Ä–µ–º—è.localeCompare(b.–≤—Ä–µ–º—è));
            
            html += `
                <div class="schedule-day">
                    <div class="day-header">
                        <h3 class="day-title">${formattedDate}</h3>
                    </div>
                    <div class="day-appointments">
                        ${groupedByDate[date].map(item => `
                            <div class="free-time-item">
                                <div class="appointment-time">${item.–≤—Ä–µ–º—è}</div>
                                <div class="appointment-details">
                                    <div class="free-time-service">${item.—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ}</div>
                                    <div class="free-time-master">–ú–∞—Å—Ç–µ—Ä: ${item.–º–∞—Å—Ç–µ—Ä_–∏–º—è}</div>
                                </div>
                                <div class="appointment-price">${item.—É—Å–ª—É–≥–∞_—Ü–µ–Ω–∞} ‚ÇΩ</div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
        });
        
        html += '</div>';
        container.innerHTML = html;
    }
}

function loadScheduleSection() {
    const contentContainer = document.getElementById('contentContainer');
    contentContainer.innerHTML = `
        <div class="schedule-management">
            <div class="schedule-header">
                <h2 id="scheduleTitle">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π (–í—Å–µ –º–∞—Å—Ç–µ—Ä–∞)</h2>
            </div>
            
            <!-- –£–±—Ä–∞–ª–∏ –≤–∫–ª–∞–¥–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ -->

            <div class="schedule-tabs type-tabs">
                <button id="appointmentsType" class="schedule-tab active">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π</button>
                <button id="freetimeType" class="schedule-tab">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</button>
            </div>
            
            <div class="schedule-controls">
                <div class="date-range-selector">
                    <label>–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å:</label>
                    <input type="date" id="startDate" class="date-input">
                    <label>–ø–æ:</label>
                    <input type="date" id="endDate" class="date-input">
                </div>
                
                <div class="quick-buttons">
                    <button id="todayBtn" class="btn-date">–°–µ–≥–æ–¥–Ω—è</button>
                    <button id="weekBtn" class="btn-date active">–ù–µ–¥–µ–ª—è</button>
                </div>
                
                <div id="specialistSelector" class="specialist-selector">
                    <label>–ú–∞—Å—Ç–µ—Ä:</label>
                    <select id="specialistSelect" class="specialist-dropdown">
                        <option value="all">–í—Å–µ –º–∞—Å—Ç–µ—Ä–∞</option>
                    </select>
                </div>
            </div>
            
            <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ -->
            <div class="photo-generator-container">
                <button id="generatePhotoBtn" class="btn-photo-generator">
                    üì∑ –°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                </button>
            </div>
            
            <div id="scheduleContainer">
                <div class="loading-schedule">
                    <div class="loading-spinner"></div>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...</p>
                </div>
            </div>
        </div>
    `;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    window.scheduleManager = new ScheduleManager();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ
    document.getElementById('generatePhotoBtn').addEventListener('click', openPhotoGenerator);
}