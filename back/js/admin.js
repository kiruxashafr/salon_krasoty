let currentActiveSection = 'journal'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–∫—Ç–∏–≤–µ–Ω –∂—É—Ä–Ω–∞–ª
let currentView = 'journal'; // 'journal' –∏–ª–∏ 'history'
let lastViewedTimestamp = Date.now();


document.addEventListener('DOMContentLoaded', function() {
    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const menuToggle = document.getElementById('menuToggle');
    const mainMenu = document.getElementById('mainMenu');
    const sidebar = document.querySelector('.sidebar');
    const mainContent = document.querySelector('.main-content');
    const menuLinks = document.querySelectorAll('.main-menu a');
    const contentContainer = document.getElementById('contentContainer');
    const currentSection = document.getElementById('currentSection');
    const closeMenuBtn = document.getElementById('closeMenu');
    const sidebarOverlay = document.getElementById('sidebarOverlay');

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    let isMenuOpen = false;
    

    // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—é
    function toggleMenu() {
        isMenuOpen = !isMenuOpen;
        sidebar.classList.toggle('open', isMenuOpen);
        menuToggle.classList.toggle('active', isMenuOpen);
        
        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Ç–µ–ª–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º –º–µ–Ω—é –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
        if (window.innerWidth < 1024) {
            document.body.classList.toggle('menu-open', isMenuOpen);
            sidebarOverlay.style.display = isMenuOpen ? 'block' : 'none';
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
    closeMenuBtn.addEventListener('click', function() {
        if (isMenuOpen) {
            toggleMenu();
        }
    });

    sidebarOverlay.addEventListener('click', function() {
        if (isMenuOpen) {
            toggleMenu();
        }
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    if (window.innerWidth >= 1024) {
        sidebar.classList.add('open');
        isMenuOpen = true;
    } else {
        sidebar.classList.remove('open');
        isMenuOpen = false;
        sidebarOverlay.style.display = 'none';
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
    function updateActiveMenu(sectionName) {
        menuLinks.forEach(link => {
            link.classList.remove('active');
            if (link.dataset.section === sectionName) {
                link.classList.add('active');
            }
        });
    }

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞–∑–¥–µ–ª–∞
// –û–±–Ω–æ–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é loadSection –≤ admin.js
function loadSection(sectionName) {
    if (window.innerWidth < 768) {
        showLoading();
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–∞–∑–¥–µ–ª–∞
    if (autoUpdateInterval) {
        clearInterval(autoUpdateInterval);
        autoUpdateInterval = null;
    }
    
    if (historyUpdateInterval) {
        stopHistoryAutoUpdate();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é
    updateActiveMenu(sectionName);
    currentActiveSection = sectionName;

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    if (window.innerWidth < 1024 && isMenuOpen) {
        toggleMenu();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const sectionTitle = Array.from(menuLinks).find(link => 
        link.dataset.section === sectionName
    ).textContent;
    currentSection.textContent = sectionTitle;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–¥–µ–ª–∞
    switch(sectionName) {
        case 'journal':
            loadJournalContent();
            setTimeout(() => startAutoUpdate(), 1000);
            break;
        case 'history':
            loadAppointmentsHistory();
            break;
        case 'schedule':
            loadScheduleSection();
            setTimeout(() => startAutoUpdate(), 1000);
            break;
        case 'freetime':
            loadFreeTimeSection();
            setTimeout(() => startAutoUpdate(), 1000);
            break;
        case 'specialists':
            loadMastersSection();
            break;
        case 'services':
            loadServicesSection();
            break;
        case 'clients':
            loadClientsSection();
            break;
        case 'settings':
            loadSettingsSection();
            break;
        case 'statistics':
            loadStatisticsSection();
            break;
        default:
            contentContainer.innerHTML = '<p>–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</p>';
    }
}

// –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –∫–ª–∏–∫–æ–≤ –ø–æ –º–µ–Ω—é –¥–æ–±–∞–≤–∏–º –∑–∞–∫—Ä—ã—Ç–∏–µ - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ö–û–î
menuLinks.forEach(link => {
    link.addEventListener('click', function(e) {
        e.preventDefault();
        const section = this.dataset.section;
        if (section) {
            loadSection(section);
            // –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
            if (window.innerWidth < 1024 && isMenuOpen) {
                toggleMenu();
            }
        }
    });
});

  let resizeTimeout;
let lastWindowWidth = window.innerWidth;

window.addEventListener('resize', function() {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(function() {
        const currentWidth = window.innerWidth;
        const wasMobile = lastWindowWidth < 1024;
        const isMobile = currentWidth < 1024;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É –º–æ–±–∏–ª—å–Ω—ã–º –∏ –¥–µ—Å–∫—Ç–æ–ø–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
        if ((wasMobile && !isMobile) || (!wasMobile && isMobile)) {
            if (isMobile) {
                // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–æ–±–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
                sidebar.classList.remove('open');
                menuToggle.classList.remove('active');
                isMenuOpen = false;
                sidebarOverlay.style.display = 'none';
                document.body.classList.remove('menu-open');
            } else {
                // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–µ—Å–∫—Ç–æ–ø–Ω—ã–π —Ä–µ–∂–∏–º
                sidebar.classList.add('open');
                menuToggle.classList.remove('active');
                isMenuOpen = true;
                sidebarOverlay.style.display = 'none';
                document.body.classList.remove('menu-open');
            }
            
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (–∞–∫—Ç–∏–≤–µ–Ω –∂—É—Ä–Ω–∞–ª)
            if (currentActiveSection === 'journal' && window.selectedDate) {
                loadAppointmentsForDate(window.selectedDate);
            }
        }
        
        lastWindowWidth = currentWidth;
        
    }, 250); // –ó–∞–¥–µ—Ä–∂–∫–∞ 250ms –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–æ–∫
});

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    menuToggle.addEventListener('click', toggleMenu);


// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è, –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç.–¥.) –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
// [–ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ admin.js]

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∂—É—Ä–Ω–∞–ª–∞
function loadJournalContent() {
    contentContainer.innerHTML = `
        <div class="journal-content">
            <div class="view-toggle-container">
                <button class="view-toggle-btn active" data-view="journal">
                    üìÖ –¢–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏
                </button>
                <button class="view-toggle-btn" data-view="history">
                    üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π
                </button>
            </div>
            
            <div id="journalView" class="view-content">
                <div class="specialists-selection">
                    <h2>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞</h2>

                    <div class="specialists-list" id="specialistsList">
                        <!-- –ú–∞—Å—Ç–µ—Ä–∞ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                        
                    </div>
                                        <div class="specialists-actions">
                        <button class="all-masters-btn" id="allMastersBtn">
                             –í—Å–µ –º–∞—Å—Ç–µ—Ä–∞
                        </button>
                    </div>
                </div>
                
                <div class="calendar-section" id="calendarSection" style="display: none;">
                    <div class="month-navigation">
                        <button class="month-nav-btn" onclick="changeMonth(-1)">‚Üê</button>
                        <span class="current-month" id="currentMonth"></span>
                        <button class="month-nav-btn" onclick="changeMonth(1)">‚Üí</button>
                    </div>
                    <div class="date-grid" id="dateGrid"></div>
                </div>
                
                <div class="appointments-list" id="appointmentsList" style="display: none;">
                    <h3>–ó–∞–ø–∏—Å–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É</h3>
                    <div id="appointmentsContainer">
                        <!-- –ó–∞–ø–∏—Å–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                    </div>
                </div>
            </div>
            
            <div id="historyView" class="view-content" style="display: none;">
                <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∑–¥–µ—Å—å -->
            </div>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    setupViewToggleButtons();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤
    loadSpecialistsForJournal();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—Å–µ –º–∞—Å—Ç–µ—Ä–∞"
    document.getElementById('allMastersBtn').addEventListener('click', selectAllMasters);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∂—É—Ä–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    showJournalView();
}


// –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
function selectAllMasters() {
    window.currentSpecialistId = null; // null –æ–∑–Ω–∞—á–∞–µ—Ç "–≤—Å–µ –º–∞—Å—Ç–µ—Ä–∞"
    window.currentSpecialistName = '–í—Å–µ –º–∞—Å—Ç–µ—Ä–∞';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    document.getElementById('allMastersBtn').classList.add('active');
    
    // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
    document.querySelectorAll('.specialist-card-admin').forEach(card => {
        card.classList.remove('selected');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    const calendarSection = document.getElementById('calendarSection');
    calendarSection.style.display = 'block';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    initCalendar();
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
    setTimeout(() => {
        calendarSection.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
        });
    }, 100);
}

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞
    function loadSpecialistsForJournal() {
        fetch('/api/specialists')
            .then(response => {
                if (!response.ok) {
                    throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤');
                }
                return response.json();
            })
            .then(data => {
                if (data.message === 'success') {
                    displaySpecialistsForSelection(data.data);
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞:', error);
                showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤');
            });
    }

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    function displaySpecialistsForSelection(specialists) {
        const specialistsList = document.getElementById('specialistsList');
        
        if (!specialists || specialists.length === 0) {
            specialistsList.innerHTML = '<p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤</p>';
            return;
        }

        specialistsList.innerHTML = '';
        
        specialists.forEach(specialist => {
            const specialistCard = document.createElement('div');
            specialistCard.className = 'specialist-card-admin';
            specialistCard.dataset.specialistId = specialist.id;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
            const imageUrl = specialist.—Ñ–æ—Ç–æ || 'photo/—Ä–∞–±–æ—Ç–Ω–∏–∫–∏/default.jpg';
            
            specialistCard.innerHTML = `
                <div class="specialist-image" style="background-image: url('${imageUrl}')"></div>
                <div class="specialist-info">
                    <h4>${specialist.–∏–º—è}</h4>
                    <p>${specialist.–æ–ø–∏—Å–∞–Ω–∏–µ || '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Ç–µ—Ä'}</p>
                </div>
            `;
            
            specialistCard.addEventListener('click', () => {
                selectSpecialistForJournal(specialist.id, specialist.–∏–º—è);
            });
            
            specialistsList.appendChild(specialistCard);
        });
    }

// –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞
function selectSpecialistForJournal(specialistId, specialistName) {
    window.currentSpecialistId = specialistId;
    window.currentSpecialistName = specialistName;
    
    // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∏ "–í—Å–µ –º–∞—Å—Ç–µ—Ä–∞"
    document.getElementById('allMastersBtn').classList.remove('active');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
    document.querySelectorAll('.specialist-card-admin').forEach(card => {
        card.classList.remove('selected');
    });
    document.querySelector(`[data-specialist-id="${specialistId}"]`).classList.add('selected');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    const calendarSection = document.getElementById('calendarSection');
    calendarSection.style.display = 'block';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    initCalendar();
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
    setTimeout(() => {
        calendarSection.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
        });
    }, 100);
}



    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª
    loadSection('journal');
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function initCalendar() {
    window.currentMonth = new Date().getMonth();
    window.currentYear = new Date().getFullYear();
    generateCalendar();
}

function changeMonth(direction) {
    window.currentMonth += direction;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –≥–æ–¥–∞
    if (window.currentMonth < 0) {
        window.currentMonth = 11;
        window.currentYear--;
    } else if (window.currentMonth > 11) {
        window.currentMonth = 0;
        window.currentYear++;
    }
    
    generateCalendar();
}
let appointmentsByDate = {};
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏
async function loadAppointmentDays(year, month) {
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–í—Å–µ –º–∞—Å—Ç–µ—Ä–∞", –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ specialistId
    const specialistFilter = window.currentSpecialistId ? 
        `&specialistId=${window.currentSpecialistId}` : '';
    
    const startDate = `${year}-${(month + 1).toString().padStart(2, '0')}-01`;
    const endDate = `${year}-${(month + 1).toString().padStart(2, '0')}-${new Date(year, month + 1, 0).getDate()}`;
    
    try {
        const response = await fetch(`/api/appointments?startDate=${startDate}&endDate=${endDate}${specialistFilter}`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏');
        
        const data = await response.json();
        if (data.message === 'success') {
            return data.data.reduce((acc, appointment) => {
                const date = appointment.–¥–∞—Ç–∞;
                if (!acc[date]) acc[date] = 0;
                acc[date]++;
                return acc;
            }, {});
        }
        return {};
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        return {};
    }
}
async function generateCalendar() {
    const dateGrid = document.getElementById('dateGrid');
    const currentMonthElement = document.getElementById('currentMonth');
    
    // –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
    const monthNames = [
        '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
        '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    ];
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    currentMonthElement.textContent = `${monthNames[window.currentMonth]} ${window.currentYear}`;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–Ω–∏ —Å –∑–∞–ø–∏—Å—è–º–∏
    appointmentsByDate = await loadAppointmentDays(window.currentYear, window.currentMonth);
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É –¥–∞—Ç
    dateGrid.innerHTML = '';
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
    const firstDay = new Date(window.currentYear, window.currentMonth, 1);
    const lastDay = new Date(window.currentYear, window.currentMonth + 1, 0);
    const daysInMonth = lastDay.getDate();
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    const dayNames = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
    dayNames.forEach(day => {
        const dayHeader = document.createElement('div');
        dayHeader.className = 'day-header';
        dayHeader.textContent = day;
        dateGrid.appendChild(dayHeader);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –¥–Ω–µ–π –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –¥–Ω–µ–º –º–µ—Å—è—Ü–∞
    for (let i = 0; i < (firstDay.getDay() === 0 ? 6 : firstDay.getDay() - 1); i++) {
        const emptyCell = document.createElement('div');
        emptyCell.className = 'date-cell empty';
        dateGrid.appendChild(emptyCell);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫–∏ —Å –¥–∞—Ç–∞–º–∏
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    for (let day = 1; day <= daysInMonth; day++) {
        const dateCell = document.createElement('div');
        dateCell.className = 'date-cell';
        
        const currentDate = new Date(window.currentYear, window.currentMonth, day);
        const formattedDate = `${window.currentYear}-${(window.currentMonth + 1).toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–µ–¥—à–∞—è –ª–∏ —ç—Ç–æ –¥–∞—Ç–∞
        if (currentDate < today) {
            dateCell.classList.add('past-date');
            dateCell.textContent = day;
            
            // –î–µ–ª–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏, –Ω–æ —Å –¥—Ä—É–≥–∏–º —Å—Ç–∏–ª–µ–º
            dateCell.onclick = () => selectDate(formattedDate, day);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
            if (appointmentsByDate[formattedDate]) {
                dateCell.classList.add('has-appointments');
                dateCell.title = `${appointmentsByDate[formattedDate]} –∑–∞–ø–∏—Å–µ–π`;
            } else {
                dateCell.title = '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π';
            }
        } 
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É (–±—É–¥—É—â–∏–µ –¥–Ω–∏)
        else if (appointmentsByDate[formattedDate]) {
            dateCell.classList.add('has-appointments');
            dateCell.textContent = day;
            dateCell.onclick = () => selectDate(formattedDate, day);
            dateCell.title = `${appointmentsByDate[formattedDate]} –∑–∞–ø–∏—Å–µ–π`;
        }
        // –î–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º –±–µ–∑ –∑–∞–ø–∏—Å–µ–π
        else {
            dateCell.classList.add('available-date');
            dateCell.textContent = day;
            dateCell.onclick = () => selectDate(formattedDate, day);
            dateCell.title = '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π';
        }
        
        dateGrid.appendChild(dateCell);
    }
}




function loadAppointmentsForDate(date) {
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–í—Å–µ –º–∞—Å—Ç–µ—Ä–∞", –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ specialistId
    const specialistFilter = window.currentSpecialistId ? 
        `&specialistId=${window.currentSpecialistId}` : '';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const dateObj = new Date(date);
    const formattedDate = dateObj.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'long',
        year: 'numeric'
    });
    
    const masterInfo = window.currentSpecialistName ? ` - ${window.currentSpecialistName}` : '';
    
    const appointmentsHeader = document.querySelector('#appointmentsList h3');
    if (appointmentsHeader) {
        appointmentsHeader.textContent = `–ó–∞–ø–∏—Å–∏ –Ω–∞ ${formattedDate}${masterInfo}`;
    }
    
    // –ó–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –º–∞—Å—Ç–µ—Ä—É (–∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ)
    fetch(`/api/appointments?startDate=${date}&endDate=${date}${specialistFilter}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π');
            }
            return response.json();
        })
        .then(data => {
            if (data.message === 'success') {
                displayAppointments(data.data, formattedDate);
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π
                setTimeout(() => {
                    const appointmentsList = document.getElementById('appointmentsList');
                    if (appointmentsList) {
                        appointmentsList.scrollIntoView({ 
                            behavior: 'smooth', 
                            block: 'start' 
                        });
                    }
                }, 100);
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞:', error);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–∏—Å–∏');
        });
}

function displayAppointments(appointments, selectedDate = null) {
    const appointmentsContainer = document.getElementById('appointmentsContainer');
    if (!appointmentsContainer) return;
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const sortedAppointments = [...appointments].sort((a, b) => {
        return a.–≤—Ä–µ–º—è.localeCompare(b.–≤—Ä–µ–º—è);
    });
    
    const displayDate = selectedDate || new Date().toLocaleDateString('ru-RU');
    const masterInfo = window.currentSpecialistName ? ` - ${window.currentSpecialistName}` : '';
    
    let appointmentsHTML = `
        <div class="appointments-container">
            <div class="appointments-header">
                <h3 class="appointments-title">–ó–∞–ø–∏—Å–∏ –Ω–∞ ${displayDate}${masterInfo}</h3>
            </div>
    `;

    if (sortedAppointments.length === 0) {
        appointmentsHTML += `
            <div class="empty-appointments">
                <div>–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É</div>
                <small>–ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å" —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å</small>
            </div>
        `;
    } else {
        appointmentsHTML += '<div class="appointments-grid">';
        
        sortedAppointments.forEach((appointment, index) => {
            const formattedPhone = appointment.–∫–ª–∏–µ–Ω—Ç_—Ç–µ–ª–µ—Ñ–æ–Ω?.replace('+7', '') || 
                                 appointment.–∫–ª–∏–µ–Ω—Ç_—Ç–µ–ª–µfono?.replace('+7', '') || '';
            
            const time = appointment.–≤—Ä–µ–º—è.includes(':') ? 
                        appointment.–≤—Ä–µ–º—è.split(':').slice(0, 2).join(':') : 
                        appointment.–≤—Ä–µ–º—è;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ, –µ—Å–ª–∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
            const masterInfo = !window.currentSpecialistId ? 
                `<div class="master-info">–ú–∞—Å—Ç–µ—Ä: ${appointment.–º–∞—Å—Ç–µ—Ä_–∏–º—è}</div>` : '';
            
            appointmentsHTML += `
                <div class="appointment-card" data-appointment-id="${appointment.id}">
                    <div class="appointment-content">
                        <div class="appointment-time">${time}</div>
                        <div class="appointment-details">
                            <div class="client-info">
                                <div class="client-name">${appointment.–∫–ª–∏–µ–Ω—Ç_–∏–º—è}</div>
                                <div class="client-phone">${formattedPhone}</div>
                            </div>
                            <div class="service-info">
                                <div class="service-name">${appointment.—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ}</div>
                                <div class="service-price">${appointment.—Ü–µ–Ω–∞}‚ÇΩ</div>
                            </div>
                            ${masterInfo}
                        </div>
                    </div>
                    <div class="appointment-actions">
                        <button class="edit-btn" onclick="showEditAppointmentForm(${JSON.stringify(appointment).replace(/"/g, '&quot;')})">
                            ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å
                        </button>
                        <button class="cancel-btn" onclick="cancelAppointment(${appointment.id}, event)">
                            ‚úï –û—Ç–º–µ–Ω–∏—Ç—å
                        </button>
                    </div>
                </div>
            `;
        });
        
        appointmentsHTML += '</div>';
    }
    
    appointmentsHTML += '</div>';
    
    appointmentsContainer.innerHTML = appointmentsHTML;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å" –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!document.querySelector('.add-appointment-btn')) {
        const addBtn = document.createElement('button');
        addBtn.className = 'btn btn-primary add-appointment-btn';
        addBtn.textContent = '‚úö –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å';
        addBtn.onclick = showAddAppointmentForm;
        addBtn.style.marginTop = '1rem';
        
        const container = document.querySelector('.appointments-container');
        if (container) {
            container.appendChild(addBtn);
        }
    }
}


// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ - –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
async function cancelAppointment(appointmentId, event) {
    if (event) event.stopPropagation();
    
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π confirm
        const confirmed = await confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?');
        
        if (!confirmed) {
            return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
        const card = document.querySelector(`[data-appointment-id="${appointmentId}"]`);
        if (card) {
            card.style.opacity = '0.5';
            card.style.transform = 'scale(0.98)';
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        const response = await fetch(`/api/appointment/${appointmentId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏');
        
        const data = await response.json();
        
        if (data.message === 'success') {
            // –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è
            if (card) {
                card.style.transition = 'all 0.3s ease';
                card.style.opacity = '0';
                card.style.transform = 'translateX(100px)';
                
                setTimeout(() => {
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏
                    loadAppointmentsForDate(window.selectedDate);
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
                    if (typeof generateCalendar === 'function') {
                        generateCalendar();
                    }
                }, 300);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å: ' + error.message);
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        const card = document.querySelector(`[data-appointment-id="${appointmentId}"]`);
        if (card) {
            card.style.opacity = '1';
            card.style.transform = 'scale(1)';
        }
    }
}



// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
function showLoading() {
    document.getElementById('contentContainer').innerHTML = 
        '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
}

function showError(message) {
    document.getElementById('contentContainer').innerHTML = 
        `<div class="error">–û—à–∏–±–∫–∞: ${message}</div>`;
}




// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥ –≤ —Ñ–æ—Ä–º—É
async function loadServicesForForm() {
    try {
        const response = await fetch('/api/services');
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥');
        
        const data = await response.json();
        if (data.message === 'success') {
            const select = document.querySelector('select[name="serviceId"]');
            data.data.forEach(service => {
                const option = document.createElement('option');
                option.value = service.id;
                option.textContent = `${service.–Ω–∞–∑–≤–∞–Ω–∏–µ} - ${service.—Ü–µ–Ω–∞} ‚ÇΩ`;
                select.appendChild(option);
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}



// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–æ–π
let isAddFormOpen = false;

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è showAddAppointmentForm
function showAddAppointmentForm() {
    if (isAddFormOpen) return;
    isAddFormOpen = true;
    
    const formHTML = `
        <div class="add-appointment-form" id="addAppointmentFormContainer">
            <h3>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å</h3>
            <button class="btn btn-danger btn-sm" onclick="cancelAddAppointment()" style="margin-bottom: 1rem;">
                ‚úñ –û—Ç–º–µ–Ω–∏—Ç—å
            </button>
            <form id="addAppointmentForm">
                <div class="form-row">
                    <div class="form-group">
                        <label>–î–∞—Ç–∞:</label>
                        <input type="date" class="form-control" name="date" value="${window.selectedDate}" readonly>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label>–í—Ä–µ–º—è (—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã):</label>
                        <div style="display: flex; gap: 10px; align-items: center;">
                            <input type="number" class="form-control" name="hours" min="0" max="23" 
                                   placeholder="–ß–∞—Å" style="width: 80px;" required>
                            <span>:</span>
                            <input type="number" class="form-control" name="minutes" min="0" max="59" 
                                   placeholder="–ú–∏–Ω—É—Ç—ã" style="width: 80px;" required>
                        </div>
                    </div>
                </div>
                
                <div class="form-group">
                    <label>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</label>
                    <input type="text" class="form-control" name="clientName" required>
                </div>
                
                <div class="form-group">
                    <label>–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:</label>
                    <div class="phone-input-container">
                        <span class="phone-prefix">+7</span>
                        <input type="tel" class="form-control phone-input" name="clientPhone" 
                               placeholder="9255355278" pattern="[0-9]{10}" 
                               maxlength="10" required>
                    </div>
                    <div class="error-message">–í–≤–µ–¥–∏—Ç–µ 10 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</div>
                </div>
                
                <div class="form-group">
                    <label>–£—Å–ª—É–≥–∞:</label>
                    <select class="form-control" name="serviceId" required>
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É</option>
                        <!-- –£—Å–ª—É–≥–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                    </select>
                </div>
                
                <button type="submit" class="btn btn-primary">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å</button>
            </form>
        </div>
    `;
    
    document.getElementById('appointmentsList').insertAdjacentHTML('beforeend', formHTML);
    loadServicesForForm();
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ñ–æ—Ä–º–µ
    setTimeout(() => {
        const formContainer = document.getElementById('addAppointmentFormContainer');
        if (formContainer) {
            formContainer.scrollIntoView({ 
                behavior: 'smooth', 
                block: 'start' 
            });
        }
    }, 100);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneInput = document.querySelector('input[name="clientPhone"]');
    phoneInput.addEventListener('input', function(e) {
        this.value = this.value.replace(/\D/g, '');
        if (this.value.length > 10) {
            this.value = this.value.slice(0, 10);
        }
    });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç
    const hoursInput = document.querySelector('input[name="hours"]');
    const minutesInput = document.querySelector('input[name="minutes"]');
    
    hoursInput.addEventListener('change', function() {
        if (this.value < 0) this.value = 0;
        if (this.value > 23) this.value = 23;
    });
    
    minutesInput.addEventListener('change', function() {
        if (this.value < 0) this.value = 0;
        if (this.value > 59) this.value = 59;
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    document.getElementById('addAppointmentForm').addEventListener('submit', handleAddAppointment);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
function cancelAddAppointment() {
    const formContainer = document.getElementById('addAppointmentFormContainer');
    if (formContainer) {
        formContainer.remove();
    }
    isAddFormOpen = false;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
async function handleAddAppointment(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const phoneDigits = formData.get('clientPhone');
    const hours = parseInt(formData.get('hours'));
    const minutes = parseInt(formData.get('minutes'));
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    if (isNaN(hours) || isNaN(minutes) || hours < 0 || hours > 23 || minutes < 0 || minutes > 59) {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è');
        return;
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç HH:MM
    const time = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (phoneDigits.length !== 10 || !/^\d+$/.test(phoneDigits)) {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (10 —Ü–∏—Ñ—Ä)');
        return;
    }
    
    const appointmentData = {
        specialistId: window.currentSpecialistId,
        serviceId: formData.get('serviceId'),
        date: window.selectedDate,
        time: time,
        clientName: formData.get('clientName'),
        clientPhone: '+7' + phoneDigits
    };
    
  try {
        const response = await fetch('/api/admin/appointment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(appointmentData)
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏');
        }
        
        const data = await response.json();
        if (data.message === 'success') {
            showSuccess('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
            cancelAddAppointment();
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏
            loadAppointmentsForDate(window.selectedDate);
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            generateCalendar();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å: ' + error.message);
    }
}
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
window.addEventListener('orientationchange', function() {
    setTimeout(function() {
        if (window.selectedDate && window.currentSpecialistId) {
            loadAppointmentsForDate(window.selectedDate);
        }
    }, 300);
});

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.addEventListener('load', function() {
    lastWindowWidth = window.innerWidth;
});

function selectDate(date, day) {
    console.log(`Selected date: ${date}`);
    window.selectedDate = date;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
    const dateObj = new Date(date);
    const formattedDate = dateObj.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'long',
        year: 'numeric'
    });
    
    const appointmentsHeader = document.querySelector('#appointmentsList h3');
    if (appointmentsHeader) {
        appointmentsHeader.textContent = `–ó–∞–ø–∏—Å–∏ –Ω–∞ ${formattedDate}`;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
    const appointmentsList = document.getElementById('appointmentsList');
    appointmentsList.style.display = 'block';
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ñ–æ—Ä–º—É
    const existingForm = document.querySelector('.add-appointment-form');
    if (existingForm) existingForm.remove();
    isAddFormOpen = false;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    loadAppointmentsForDate(date);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –∏ –±—É–¥—É—â–∏—Ö –¥–∞—Ç
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const selectedDateObj = new Date(date);
    
    if (selectedDateObj >= today && !document.querySelector('.add-appointment-btn')) {
        const addBtn = document.createElement('button');
        addBtn.className = 'btn btn-primary add-appointment-btn';
        addBtn.textContent = '‚úö –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å';
        addBtn.onclick = showAddAppointmentForm;
        appointmentsList.querySelector('h3').after(addBtn);
    } else {
        // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–∞—Ç
        const existingBtn = document.querySelector('.add-appointment-btn');
        if (existingBtn) existingBtn.remove();
    }
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    setTimeout(() => {
        appointmentsList.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
        });
    }, 300);
}



function showEditAppointmentForm(appointment) {
    if (isAddFormOpen) return;
    isAddFormOpen = true;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    window.originalAppointmentData = appointment;
    
    const formattedPhone = appointment.–∫–ª–∏–µ–Ω—Ç_—Ç–µ–ª–µ—Ñ–æ–Ω?.replace('+7', '') || 
                          appointment.–∫–ª–∏–µ–Ω—Ç_—Ç–µ–ª–µfono?.replace('+7', '') || '';
    
    const [hours, minutes] = appointment.–≤—Ä–µ–º—è.split(':');
    
    const formHTML = `
        <div class="edit-appointment-form" id="editAppointmentFormContainer">
            <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å</h3>
            <button class="btn btn-danger btn-sm" onclick="cancelEditAppointment()" style="margin-bottom: 1rem;">
                ‚úñ –û—Ç–º–µ–Ω–∏—Ç—å
            </button>
            <form id="editAppointmentForm" data-appointment-id="${appointment.id}">
                <div class="form-row">
                    <div class="form-group">
                        <label>–î–∞—Ç–∞:</label>
                        <input type="date" class="form-control" name="date" value="${appointment.–¥–∞—Ç–∞}" required>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label>–í—Ä–µ–º—è (—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã):</label>
                        <div style="display: flex; gap: 10px; align-items: center;">
                            <input type="number" class="form-control" name="hours" min="0" max="23" 
                                   placeholder="–ß–∞—Å" style="width: 80px;" value="${hours}" required>
                            <span>:</span>
                            <input type="number" class="form-control" name="minutes" min="0" max="59" 
                                   placeholder="–ú–∏–Ω—É—Ç—ã" style="width: 80px;" value="${minutes}" required>
                        </div>
                    </div>
                </div>
                
                <div class="form-group">
                    <label>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</label>
                    <input type="text" class="form-control" name="clientName" value="${appointment.–∫–ª–∏–µ–Ω—Ç_–∏–º—è}" required>
                </div>
                
                <div class="form-group">
                    <label>–¢–µ–∫—É—â–∞—è —É—Å–ª—É–≥–∞:</label>
                    <div class="current-service-display" style="padding: 10px; background: #f0f8ff; border-radius: 5px; margin-bottom: 10px;">
                        <strong>${appointment.—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ}</strong> - ${appointment.—Ü–µ–Ω–∞} ‚ÇΩ
                        <input type="hidden" id="originalServiceId" value="${appointment.—É—Å–ª—É–≥–∞_id}">
                    </div>
                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="toggleServiceSelection()" id="toggleServiceBtn">
                        ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É
                    </button>
                </div>
                
                <div class="form-group service-selection" id="serviceSelection" style="display: none;">
                    <label>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —É—Å–ª—É–≥—É:</label>
                    <select class="form-control" name="serviceId" id="serviceSelect">
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É</option>
                        <!-- –£—Å–ª—É–≥–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                    </select>
                    <small style="color: #666;">–û—Å—Ç–∞–≤—å—Ç–µ "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É" —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å —É—Å–ª—É–≥—É</small>
                </div>
                
                <div class="form-group">
                    <label>–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:</label>
                    <div class="phone-input-container">
                        <span class="phone-prefix">+7</span>
                        <input type="tel" class="form-control phone-input" name="clientPhone" 
                               placeholder="9255355278" pattern="[0-9]{10}" 
                               maxlength="10" value="${formattedPhone}" required>
                    </div>
                    <div class="error-message">–í–≤–µ–¥–∏—Ç–µ 10 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</div>
                </div>
                
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
                    <button type="button" class="btn btn-danger" onclick="deleteAppointment(${appointment.id})">
                        –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
                    </button>
                </div>
            </form>
        </div>
    `;
    
    document.getElementById('appointmentsList').insertAdjacentHTML('beforeend', formHTML);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
    loadServicesForEditForm(appointment.—É—Å–ª—É–≥–∞_id);
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ñ–æ—Ä–º–µ
    setTimeout(() => {
        const formContainer = document.getElementById('editAppointmentFormContainer');
        if (formContainer) {
            formContainer.scrollIntoView({ 
                behavior: 'smooth', 
                block: 'start' 
            });
        }
    }, 100);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    const phoneInput = document.querySelector('#editAppointmentForm input[name="clientPhone"]');
    phoneInput.addEventListener('input', function(e) {
        this.value = this.value.replace(/\D/g, '');
        if (this.value.length > 10) {
            this.value = this.value.slice(0, 10);
        }
    });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç
    const hoursInput = document.querySelector('#editAppointmentForm input[name="hours"]');
    const minutesInput = document.querySelector('#editAppointmentForm input[name="minutes"]');
    
    hoursInput.addEventListener('change', function() {
        if (this.value < 0) this.value = 0;
        if (this.value > 23) this.value = 23;
    });
    
    minutesInput.addEventListener('change', function() {
        if (this.value < 0) this.value = 0;
        if (this.value > 59) this.value = 59;
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    document.getElementById('editAppointmentForm').addEventListener('submit', handleEditAppointment);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
function toggleServiceSelection() {
    const serviceSelection = document.getElementById('serviceSelection');
    const toggleBtn = document.getElementById('toggleServiceBtn');
    
    if (serviceSelection.style.display === 'none') {
        serviceSelection.style.display = 'block';
        toggleBtn.textContent = '‚úñ –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª—É–≥–∏';
        toggleBtn.classList.remove('btn-outline-primary');
        toggleBtn.classList.add('btn-outline-secondary');
    } else {
        serviceSelection.style.display = 'none';
        toggleBtn.textContent = '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É';
        toggleBtn.classList.remove('btn-outline-secondary');
        toggleBtn.classList.add('btn-outline-primary');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        const select = document.getElementById('serviceSelect');
        if (select) {
            select.selectedIndex = 0;
        }
    }
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥ –≤ —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function loadServicesForEditForm(selectedServiceId) {
    try {
        const response = await fetch('/api/services');
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥');
        
        const data = await response.json();
        if (data.message === 'success') {
            const select = document.querySelector('#editAppointmentForm select[name="serviceId"]');
            select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É</option>';
            
            data.data.forEach(service => {
                const option = document.createElement('option');
                option.value = service.id;
                option.textContent = `${service.–Ω–∞–∑–≤–∞–Ω–∏–µ} - ${service.—Ü–µ–Ω–∞} ‚ÇΩ`;
                
                // –í—ã–±–∏—Ä–∞–µ–º —É—Å–ª—É–≥—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π
                if (parseInt(service.id) === parseInt(selectedServiceId)) {
                    option.selected = true;
                }
                
                select.appendChild(option);
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}

async function handleEditAppointment(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const appointmentId = e.target.dataset.appointmentId;
    const phoneDigits = formData.get('clientPhone');
    const hours = parseInt(formData.get('hours'));
    const minutes = parseInt(formData.get('minutes'));
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É –∏–∑ —Ñ–æ—Ä–º—ã
    const selectedServiceId = formData.get('serviceId');
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —É—Å–ª—É–≥—É –∏–∑ —Å–∫—Ä—ã—Ç–æ–≥–æ –ø–æ–ª—è
    const originalServiceId = document.getElementById('originalServiceId')?.value;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–µ–Ω—è–ª–∞—Å—å –ª–∏ —É—Å–ª—É–≥–∞
    const serviceChanged = selectedServiceId && selectedServiceId !== '' && selectedServiceId !== originalServiceId;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (isNaN(hours) || isNaN(minutes) || hours < 0 || hours > 23 || minutes < 0 || minutes > 59) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è');
        return;
    }
    
    if (phoneDigits.length !== 10 || !/^\d+$/.test(phoneDigits)) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (10 —Ü–∏—Ñ—Ä)');
        return;
    }
    
    const appointmentData = {
        date: formData.get('date'),
        time: `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`,
        clientName: formData.get('clientName'),
        clientPhone: '+7' + phoneDigits
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º serviceId —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å–ª—É–≥–∞ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞
    if (serviceChanged) {
        appointmentData.serviceId = selectedServiceId;
    }
    
    try {
        const response = await fetch(`/api/appointment/${appointmentId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(appointmentData)
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏');
        }
        
        const data = await response.json();
        if (data.message === 'success') {
            alert('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
            cancelEditAppointment();
            loadAppointmentsForDate(window.selectedDate);
            generateCalendar();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å: ' + error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function cancelEditAppointment() {
    const formContainer = document.getElementById('editAppointmentFormContainer');
    if (formContainer) {
        formContainer.remove();
    }
    isAddFormOpen = false;
    // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    window.originalAppointmentData = null;
    window.currentServiceId = null;
}


// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
async function deleteAppointment(appointmentId) {
    try {
        const confirmed = await confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.');
        
        if (!confirmed) {
            return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ
        }
        
        const response = await fetch(`/api/appointment/${appointmentId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏');
        }
        
        const data = await response.json();
        
        if (data.message === 'success') {
            showSuccess('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!');
            cancelEditAppointment();
            loadAppointmentsForDate(window.selectedDate);
            generateCalendar();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å: ' + error.message);
    }
}



// –î–æ–±–∞–≤–∏—Ç—å –≤ admin.js –ø–æ—Å–ª–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
let autoUpdateInterval = null;
let lastUpdateTime = null;

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function startAutoUpdate() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –±—ã–ª
    if (autoUpdateInterval) {
        clearInterval(autoUpdateInterval);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    autoUpdateInterval = setInterval(() => {
        autoUpdateData();
    }, 30000); // 30 —Å–µ–∫—É–Ω–¥
    
}

// –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function autoUpdateData() {
    const now = new Date().toISOString();
    
    // –ï—Å–ª–∏ –º—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –∂—É—Ä–Ω–∞–ª–∞ –∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
    if (currentActiveSection === 'journal' && window.selectedDate && window.currentSpecialistId) {
        updateAppointmentsSilently();
    }
    
    // –ï—Å–ª–∏ –º—ã –≤ —Ä–∞–∑–¥–µ–ª–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if (currentActiveSection === 'schedule' && window.scheduleManager) {
        window.scheduleManager.loadSchedule();
    }
    
    lastUpdateTime = now;
}

// –¢–∏—Ö–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ –ø–æ–∫–∞–∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function updateAppointmentsSilently() {
    if (!window.selectedDate || !window.currentSpecialistId) return;
    
    fetch(`/api/appointments?specialistId=${window.currentSpecialistId}&startDate=${window.selectedDate}&endDate=${window.selectedDate}`)
        .then(response => {
            if (!response.ok) return;
            return response.json();
        })
        .then(data => {
            if (data && data.message === 'success') {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                updateAppointmentsIfChanged(data.data);
            }
        })
        .catch(error => {
            console.log('–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', error);
        });
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
function updateAppointmentsIfChanged(newAppointments) {
    const currentAppointments = getCurrentAppointmentsData();
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –∏ —Ö—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö
    if (JSON.stringify(currentAppointments) !== JSON.stringify(newAppointments)) {
        displayAppointments(newAppointments);
        
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –µ—Å–ª–∏ –æ–Ω –≤–∏–¥–∏–º
        if (typeof generateCalendar === 'function') {
            generateCalendar();
        }
    }
}

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–µ–π –∏–∑ DOM
function getCurrentAppointmentsData() {
    const appointments = [];
    const cards = document.querySelectorAll('.appointment-card');
    
    cards.forEach(card => {
        const id = card.dataset.appointmentId;
        const time = card.querySelector('.appointment-time')?.textContent;
        const clientName = card.querySelector('.client-name')?.textContent;
        const clientPhone = card.querySelector('.client-phone')?.textContent;
        const serviceName = card.querySelector('.service-name')?.textContent;
        const price = card.querySelector('.service-price')?.textContent;
        
        if (id) {
            appointments.push({
                id,
                –≤—Ä–µ–º—è: time,
                –∫–ª–∏–µ–Ω—Ç_–∏–º—è: clientName?.replace('–ö–ª–∏–µ–Ω—Ç: ', ''),
                –∫–ª–∏–µ–Ω—Ç_—Ç–µ–ª–µ—Ñ–æ–Ω: clientPhone,
                —É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ: serviceName,
                —Ü–µ–Ω–∞: price?.replace('‚ÇΩ', '')
            });
        }
    });
    
    return appointments;
}


document.addEventListener('visibilitychange', function() {
    if (document.hidden) {
        // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –≤–∏–¥–Ω–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (autoUpdateInterval) {
            clearInterval(autoUpdateInterval);
            autoUpdateInterval = null;
        }
        if (window.scheduleManager && window.scheduleManager.autoUpdateInterval) {
            window.scheduleManager.stopAutoUpdate();
        }
    } else {
        // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (currentActiveSection === 'journal' || currentActiveSection === 'schedule') {
            setTimeout(() => startAutoUpdate(), 1000);
        }
    }
});



function hideModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö –æ–±–ª–∞—Å—Ç–∏
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('modal-overlay')) {
        hideModal(e.target.id);
    }
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        const modals = document.querySelectorAll('.modal-overlay');
        modals.forEach(modal => {
            if (modal.style.display === 'block') {
                hideModal(modal.id);
            }
        });
    }
});

// –§—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
function showSuccess(message) {
    showModal('success', message);
}

function showError(message) {
    showModal('error', message);
}

function showInfo(message) {
    showModal('info', message);
}

function showConfirm(message, callback) {
    showModal('confirm', message, callback);
}


// admin.js - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è showModal
function showModal(type, message, callback = null) {
    const modal = document.getElementById(type + 'Modal');
    const messageElement = document.getElementById(type + 'Message');
    
    if (modal && messageElement) {
        messageElement.textContent = message;
        modal.style.display = 'block';
        
        if (type === 'confirm' && callback) {
            // –ö–ª–æ–Ω–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –î–∞
            const confirmYes = document.getElementById('confirmYes').cloneNode(true);
            document.getElementById('confirmYes').replaceWith(confirmYes);
            
            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ù–µ—Ç –ø–æ –∫–ª–∞—Å—Å—É (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
            const confirmNo = document.querySelector('#confirmModal .modal-btn-secondary');
            if (confirmNo) {
                const newConfirmNo = confirmNo.cloneNode(true);
                confirmNo.replaceWith(newConfirmNo);
                
                newConfirmNo.onclick = () => {
                    hideModal('confirmModal');
                    callback(false);
                };
            }
            
            confirmYes.onclick = () => {
                hideModal('confirmModal');
                callback(true);
            };
        }
    }
}

function hideModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö –æ–±–ª–∞—Å—Ç–∏
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('modal-overlay')) {
        hideModal(e.target.id);
    }
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        const modals = document.querySelectorAll('.modal-overlay');
        modals.forEach(modal => {
            if (modal.style.display === 'block') {
                hideModal(modal.id);
            }
        });
    }
});

// –§—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
function showSuccess(message) {
    showModal('success', message);
}

function showError(message) {
    showModal('error', message);
}

function showInfo(message) {
    showModal('info', message);
}

function showConfirm(message, callback) {
    showModal('confirm', message, callback);
}

// –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ alert –∏ confirm
window.alert = function(message) {
    showInfo(message);
};

window.confirm = function(message) {
    return new Promise((resolve) => {
        showConfirm(message, (result) => {
            resolve(result);
        });
    });
};





// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π
function displayAppointmentsHistory(appointments) {
    const historyHTML = `
        <div class="history-content">
            <div class="history-header">
                <h3>üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π</h3>
                <div class="history-info">
                    <span>–ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–º–µ—á–µ–Ω—ã </span>
                    <span class="new-badge">NEW</span>
                </div>
            </div>
            
            <div class="history-list" id="historyList">
                ${generateHistoryItems(appointments)}
            </div>
        </div>
    `;
    
    document.getElementById('contentContainer').innerHTML = historyHTML;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    startHistoryAutoUpdate();
}


// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
function generateHistoryItems(appointments) {
    if (!appointments || appointments.length === 0) {
        return '<div class="empty-history">–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</div>';
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    const sortedAppointments = [...appointments].sort((a, b) => 
        new Date(b.created_at) - new Date(a.created_at)
    );
    
    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const recentAppointments = sortedAppointments.slice(0, 20);
    
    return recentAppointments.map(appointment => {
        const createdDate = new Date(appointment.created_at);
        const isNew = createdDate > new Date(lastViewedTimestamp);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Ç–µ—Ä_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        const masterId = appointment.–º–∞—Å—Ç–µ—Ä_id || appointment.masterId;
        
        return `
            <div class="history-item ${isNew ? 'new-item' : ''}" data-appointment-id="${appointment.id}">
                <div class="history-item-header">
                    <div class="history-date">
                        <strong>üìÖ ${appointment.–¥–∞—Ç–∞} üïí ${appointment.–≤—Ä–µ–º—è}</strong>
                        ${isNew ? '<span class="new-badge">NEW</span>' : ''}
                    </div>
                    <div class="history-created">
                        –°–æ–∑–¥–∞–Ω–æ: ${createdDate.toLocaleString('ru-RU')}
                    </div>
                </div>
                
                <div class="history-item-content">
                    <div class="history-detail">
                        <span class="detail-label">üë§ –ú–∞—Å—Ç–µ—Ä:</span>
                        <span class="detail-value">${appointment.–º–∞—Å—Ç–µ—Ä_–∏–º—è}</span>
                    </div>
                    <div class="history-detail">
                        <span class="detail-label">üíÖ –£—Å–ª—É–≥–∞:</span>
                        <span class="detail-value">${appointment.—É—Å–ª—É–≥–∞_–Ω–∞–∑–≤–∞–Ω–∏–µ}</span>
                    </div>
                    <div class="history-detail">
                        <span class="detail-label">üí∞ –¶–µ–Ω–∞:</span>
                        <span class="detail-value">${appointment.—Ü–µ–Ω–∞} ‚ÇΩ</span>
                    </div>
                    <div class="history-detail">
                        <span class="detail-label">üë®‚Äçüíº –ö–ª–∏–µ–Ω—Ç:</span>
                        <span class="detail-value">${appointment.–∫–ª–∏–µ–Ω—Ç_–∏–º—è}</span>
                    </div>
                    <div class="history-detail">
                        <span class="detail-label">üìû –¢–µ–ª–µ—Ñ–æ–Ω:</span>
                        <span class="detail-value">${appointment.–∫–ª–∏–µ–Ω—Ç_—Ç–µ–ª–µ—Ñ–æ–Ω}</span>
                    </div>
                </div>
                

            </div>
        `;
    }).join('');
}

function viewAppointmentInJournal(date, masterId) {
    console.log('–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø–∏—Å–∏:', { date, masterId });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–∞–∑–¥–µ–ª –∂—É—Ä–Ω–∞–ª–∞
    if (typeof loadSection === 'function') {
        loadSection('journal');
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∂—É—Ä–Ω–∞–ª–∞ –∏ –≤—ã–±–∏—Ä–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –∏ –¥–∞—Ç—É
        setTimeout(() => {
            // –ï—Å–ª–∏ masterId –ø–µ—Ä–µ–¥–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
            if (masterId) {
                const masterCard = document.querySelector(`[data-specialist-id="${masterId}"]`);
                if (masterCard) {
                    masterCard.click();
                    
                    // –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞ –≤—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É
                    setTimeout(() => {
                        selectDateWithMaster(date, masterId);
                    }, 500);
                } else {
                    // –ï—Å–ª–∏ –º–∞—Å—Ç–µ—Ä–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É
                    console.log('–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ, –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É...');
                    selectDateWithMaster(date, masterId);
                }
            } else {
                // –ï—Å–ª–∏ masterId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –º–∞—Å—Ç–µ—Ä–∞ –≤—Ä—É—á–Ω—É—é)
                console.log('MasterId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É');
                selectDateWithMaster(date, null);
            }
        }, 500);
    }
}

function selectDateWithMaster(date, masterId) {
    if (typeof selectDate === 'function') {
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–≥—Ä—É–∂–µ–Ω
        if (typeof generateCalendar === 'function') {
            generateCalendar().then(() => {
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                setTimeout(() => {
                    selectDate(date);
                    console.log('–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞:', date, '–ú–∞—Å—Ç–µ—Ä:', masterId || '–Ω–µ —É–∫–∞–∑–∞–Ω');
                    
                    // –ï—Å–ª–∏ –º–∞—Å—Ç–µ—Ä —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
                    if (masterId) {
                        setTimeout(() => {
                            showInfo(`–í—ã–±—Ä–∞–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ ${date}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ "${window.currentSpecialistName || ''}" –≤ —Å–ø–∏—Å–∫–µ –≤—ã—à–µ.`);
                        }, 1000);
                    }
                }, 500);
            });
        } else {
            selectDate(date);
        }
    }
}

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
let historyUpdateInterval = null;

function startHistoryAutoUpdate() {
    if (historyUpdateInterval) {
        clearInterval(historyUpdateInterval);
    }
    
    historyUpdateInterval = setInterval(() => {
        updateHistorySilently();
    }, 30000); // 30 —Å–µ–∫—É–Ω–¥
}

function updateHistorySilently() {
    fetch('/api/appointments?createdSince=' + new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString())
        .then(response => {
            if (!response.ok) return;
            return response.json();
        })
        .then(data => {
            if (data && data.message === 'success') {
                // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                displayAppointmentsHistoryInJournal(data.data);
            }
        })
        .catch(error => {
            console.log('–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏: –æ—à–∏–±–∫–∞', error);
        });
}

// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–∞–∑–¥–µ–ª–∞
function stopHistoryAutoUpdate() {
    if (historyUpdateInterval) {
        clearInterval(historyUpdateInterval);
        historyUpdateInterval = null;
    }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
function setupViewToggleButtons() {
    const journalBtn = document.querySelector('[data-view="journal"]');
    const historyBtn = document.querySelector('[data-view="history"]');
    
    journalBtn.addEventListener('click', () => switchView('journal'));
    historyBtn.addEventListener('click', () => switchView('history'));
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –≤–∏–¥–∞–º–∏
function switchView(view) {
    if (currentView === view) return;
    
    currentView = view;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º offset –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
    resetHistoryOffset();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    document.querySelectorAll('.view-toggle-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[data-view="${view}"]`).classList.add('active');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    document.getElementById('journalView').style.display = view === 'journal' ? 'block' : 'none';
    document.getElementById('historyView').style.display = view === 'history' ? 'block' : 'none';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞
    if (view === 'journal') {
        showJournalView();
    } else {
        showHistoryView();
    }
}


// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∂—É—Ä–Ω–∞–ª–∞
function showJournalView() {
    // –ï—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –º–∞—Å—Ç–µ—Ä–∞ –∏ –≤—ã–±—Ä–∞–Ω –º–∞—Å—Ç–µ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    if (window.currentSpecialistId) {
        const calendarSection = document.getElementById('calendarSection');
        if (calendarSection) {
            calendarSection.style.display = 'block';
            if (typeof generateCalendar === 'function') {
                generateCalendar();
            }
        }
        
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
        if (window.selectedDate) {
            const appointmentsList = document.getElementById('appointmentsList');
            if (appointmentsList) {
                appointmentsList.style.display = 'block';
                loadAppointmentsForDate(window.selectedDate);
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏
function showHistoryView() {
    const historyView = document.getElementById('historyView');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    historyView.innerHTML = `
        <div class="loading-history">
            <div class="spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π...</p>
        </div>
    `;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø–∏—Å–µ–π
    loadAppointmentsHistory();
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
function loadAppointmentsHistory() {
    const historyView = document.getElementById('historyView');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º offset –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    resetHistoryOffset();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑ localStorage
    const savedTimestamp = localStorage.getItem('lastViewedTimestamp');
    if (savedTimestamp) {
        lastViewedTimestamp = parseInt(savedTimestamp);
    }
    
    fetch('/api/appointments?createdSince=' + new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString())
        .then(response => {
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
            return response.json();
        })
        .then(data => {
            if (data.message === 'success') {
                displayAppointmentsHistoryInJournal(data.data);
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞:', error);
            historyView.innerHTML = `
                <div class="error-message">
                    <p>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø–∏—Å–µ–π</p>
                    <button onclick="loadAppointmentsHistory()" class="btn btn-primary">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É</button>
                </div>
            `;
        });
}
function displayAppointmentsHistoryInJournal(appointments) {
    const historyView = document.getElementById('historyView');
    
    const historyHTML = `
        <div class="history-content">
            <div class="history-header">
                <h3>üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π</h3>
                <div class="history-info">
                    <span>–ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–º–µ—á–µ–Ω—ã </span>
                    <span class="new-badge">NEW</span>
                    <button class="btn btn-outline btn-sm" onclick="markAllAsViewed()" style="margin-left: 10px;">
                        üìç –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ
                    </button>
                </div>
            </div>
            
            <div class="history-list" id="historyList">
                ${generateHistoryItems(appointments)}
            </div>
            
            <div class="history-actions">
                <button class="btn btn-outline" onclick="loadMoreHistory()">
                    üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ
                </button>
                <button class="btn btn-primary" onclick="refreshHistory()">
                    üîÑ –û–±–Ω–æ–≤–∏—Ç—å
                </button>
            </div>
        </div>
    `;
    
    historyView.innerHTML = historyHTML;
}


function markAllAsViewed() {
    lastViewedTimestamp = Date.now();
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('lastViewedTimestamp', lastViewedTimestamp);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const historyItems = document.querySelectorAll('.history-item');
    historyItems.forEach(item => {
        item.classList.remove('new-item');
        const badge = item.querySelector('.new-badge');
        if (badge) badge.remove();
    });
    
    showSuccess('–í—Å–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ');
}

function refreshHistory() {
    const historyView = document.getElementById('historyView');
    historyView.innerHTML = `
        <div class="loading-history">
            <div class="spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π...</p>
        </div>
    `;
    
    loadAppointmentsHistory();
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
let historyOffset = 0;
const HISTORY_LIMIT = 20;

function loadMoreHistory() {
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏...');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const loadMoreBtn = document.querySelector('.history-actions .btn-outline');
    const originalText = loadMoreBtn.textContent;
    loadMoreBtn.textContent = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...';
    loadMoreBtn.disabled = true;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º offset –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Ä—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    historyOffset += HISTORY_LIMIT;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    const olderDate = new Date();
    olderDate.setDate(olderDate.getDate() - 7 - (historyOffset / 2)); // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    
    fetch(`/api/appointments?createdSince=${olderDate.toISOString()}`)
        .then(response => {
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
            return response.json();
        })
        .then(data => {
            if (data.message === 'success' && data.data.length > 0) {
                appendHistoryItems(data.data);
                showSuccess(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.data.length} –∑–∞–ø–∏—Å–µ–π`);
            } else {
                showInfo('–ë–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Ç');
                // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –±–æ–ª—å—à–µ –Ω–µ—Ç
                loadMoreBtn.style.display = 'none';
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏');
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º offset –ø—Ä–∏ –æ—à–∏–±–∫–µ
            historyOffset -= HISTORY_LIMIT;
        })
        .finally(() => {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            loadMoreBtn.textContent = originalText;
            loadMoreBtn.disabled = false;
        });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏
function appendHistoryItems(newAppointments) {
    const historyList = document.getElementById('historyList');
    
    if (!historyList) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç historyList –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç", –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    const emptyMessage = historyList.querySelector('.empty-history');
    if (emptyMessage) {
        emptyMessage.remove();
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
    const newItemsHTML = generateHistoryItems(newAppointments);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
    historyList.insertAdjacentHTML('beforeend', newItemsHTML);
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–æ–≤—ã–º –∑–∞–ø–∏—Å—è–º
    setTimeout(() => {
        const newItems = historyList.querySelectorAll('.history-item');
        if (newItems.length > 0) {
            const lastItem = newItems[newItems.length - 1];
            lastItem.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
    }, 100);
}


function resetHistoryOffset() {
    historyOffset = 0;
}


// –î–æ–±–∞–≤–∏–º —Å—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤ admin.css
const historyStyles = `
/* –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ */
.loading-history {
    text-align: center;
    padding: 3rem;
    color: #6c757d;
}

.loading-history .spinner {
    width: 40px;
    height: 40px;
    border: 4px solid #f3f3f3;
    border-top: 4px solid #3498db;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 1rem;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.error-message {
    text-align: center;
    padding: 2rem;
    color: #e74c3c;
}

.history-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-top: 2rem;
    padding-top: 2rem;
    border-top: 1px solid #e9ecef;
}

@media (max-width: 768px) {
    .history-actions {
        flex-direction: column;
        align-items: center;
    }
    
    .history-actions .btn {
        min-width: 200px;
    }
}
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç
const styleSheet = document.createElement('style');
styleSheet.textContent = historyStyles;
document.head.appendChild(styleSheet);



// –û–±–Ω–æ–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é autoUpdateData –¥–ª—è —É—á–µ—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–∞
function autoUpdateData() {
    const now = new Date().toISOString();
    
    // –ï—Å–ª–∏ –º—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –∂—É—Ä–Ω–∞–ª–∞ –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –∂—É—Ä–Ω–∞–ª
    if (currentActiveSection === 'journal' && currentView === 'journal' && 
        window.selectedDate && window.currentSpecialistId) {
        updateAppointmentsSilently();
    }
    
    // –ï—Å–ª–∏ –º—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –∂—É—Ä–Ω–∞–ª–∞ –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if (currentActiveSection === 'journal' && currentView === 'history') {
        updateHistorySilently();
    }
    
    // –ï—Å–ª–∏ –º—ã –≤ —Ä–∞–∑–¥–µ–ª–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if (currentActiveSection === 'schedule' && window.scheduleManager) {
        window.scheduleManager.loadSchedule();
    }
    
    lastUpdateTime = now;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const modals = document.querySelectorAll('.modal-overlay');
    modals.forEach(modal => {
        modal.style.display = 'none';
    });
});