// setting.js
class NotificationSettingsManager {
    constructor() {
        this.masters = [];
        this.settings = {};
        this.init();
    }

    async init() {
        await this.loadSettings();
        await this.loadMasters();
        this.setupEventListeners();
    }

    async loadSettings() {
        try {
            const response = await fetch('/api/settings');
            if (response.ok) {
                const data = await response.json();
                if (data.message === 'success') {
                    this.settings = data.data;
                    this.displaySettings();
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        }
    }

    async loadMasters() {
        try {
            const response = await fetch('/api/specialists-all');
            if (response.ok) {
                const data = await response.json();
                if (data.message === 'success') {
                    this.masters = data.data;
                    this.displayMasters();
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤:', error);
        }
    }

    displaySettings() {
        const container = document.getElementById('contentVisibilitySettings');
        if (!container) return;

        container.innerHTML = `
            <div class="visibility-controls">
                <div class="visibility-item">
                    <label>
                        <input type="checkbox" id="showSpecialistsToggle" 
                               ${this.settings.show_specialists === '1' ? 'checked' : ''}>
                        –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
                    </label>
                    <div class="description">–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–ª–æ–∫ —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ</div>
                </div>
                
                <div class="visibility-item">
                    <label>
                        <input type="checkbox" id="showServicesToggle" 
                               ${this.settings.show_services === '1' ? 'checked' : ''}>
                        –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É—Å–ª—É–≥–∏
                    </label>
                    <div class="description">–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–ª–æ–∫ —Å —É—Å–ª—É–≥–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏</div>
                </div>
                
                <div class="visibility-item">
                    <label>
                        <input type="checkbox" id="showContactsToggle" 
                               ${this.settings.show_contacts === '1' ? 'checked' : ''}>
                        –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
                    </label>
                    <div class="description">–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∫–∞—Ä—Ç—É</div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        const checkboxes = container.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', (e) => {
                let key = e.target.id.replace('Toggle', '');
                key = this.camelToSnake(key);  // Convert to snake_case for DB
                this.updateSetting(key, e.target.checked ? '1' : '0');
                
                // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
                const item = e.target.closest('.visibility-item');
                item.classList.add('changed');
                setTimeout(() => item.classList.remove('changed'), 1000);
            });
        });
    }

    // Add this helper method to the NotificationSettingsManager class
    camelToSnake(camelCase) {
        return camelCase.replace(/([A-Z])/g, '_$1').toLowerCase();
    }

    displayMasters() {
        const container = document.getElementById('mastersNotificationsList');
        if (!container) return;

        container.innerHTML = this.masters.map(master => `
            <div class="master-notification-item" data-master-id="${master.id}">
                <div class="master-info">
                    <img src="${master.—Ñ–æ—Ç–æ || 'photo/—Ä–∞–±–æ—Ç–Ω–∏–∫–∏/default.jpg'}" 
                         alt="${master.–∏–º—è}" 
                         class="master-avatar"
                         onerror="this.src='photo/—Ä–∞–±–æ—Ç–Ω–∏–∫–∏/default.jpg'">
                    <span class="master-name">${master.–∏–º—è}</span>
                </div>
                <div class="tg-id-input">
                    <input type="text" 
                           class="tg-id-field" 
                           placeholder="Telegram ID"
                           value="${master.tg_id || ''}"
                           data-master-id="${master.id}">
                    <button class="save-tg-id-btn" onclick="notificationSettings.saveTgId(${master.id})">
                        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </button>
                </div>
            </div>
        `).join('');
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            background: ${type === 'success' ? '#4CAF50' : type === 'error' ? '#f44336' : '#2196F3'};
            color: white;
            border-radius: 4px;
            z-index: 10000;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        `;

        document.body.appendChild(notification);
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    async updateSetting(key, value) {
        try {
            const response = await fetch(`/api/settings/${key}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ –∑–Ω–∞—á–µ–Ω–∏–µ: value })
            });

            if (response.ok) {
                const data = await response.json();
                if (data.message === 'success') {
                    this.settings[key] = value;
                    this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', 'success');
                }
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'error');
        }
    }

    async saveTgId(masterId) {
        const input = document.querySelector(`.tg-id-field[data-master-id="${masterId}"]`);
        const tgId = input.value.trim();

        try {
            const response = await fetch(`/api/specialist/${masterId}/tg-id`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ tg_id: tgId })
            });

            if (response.ok) {
                const data = await response.json();
                if (data.message === 'success') {
                    this.showNotification('Telegram ID —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
                    const master = this.masters.find(m => m.id === masterId);
                    if (master) {
                        master.tg_id = tgId;
                    }
                }
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Telegram ID:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Telegram ID', 'error');
        }
    }

    // setting.js - –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å NotificationSettingsManager
async uploadAdminPhoto(file) {
    const formData = new FormData();
    formData.append('photo', file);
    
    try {
        const response = await fetch('/api/upload-default-admin-photo', {
            method: 'POST',
            body: formData
        });
        
        if (response.ok) {
            const data = await response.json();
            if (data.message === 'success') {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                const preview = document.getElementById('adminPhotoPreview');
                if (preview) {
                    const timestamp = new Date().getTime();
                    preview.src = `photo/–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä/admin_default.jpg?t=${timestamp}`;
                }
                
                this.showNotification('‚úÖ –§–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
                return true;
            }
        }
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
        this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ', 'error');
        return false;
    }
}

handleAdminPhotoUpload(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    if (!file.type.startsWith('image/')) {
        this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'error');
        return;
    }
    
    if (file.size > 5 * 1024 * 1024) {
        this.showNotification('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB', 'error');
        return;
    }
    
    // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
    const reader = new FileReader();
    reader.onload = (e) => {
        const preview = document.getElementById('adminPhotoPreview');
        if (preview) {
            preview.src = e.target.result;
            preview.style.display = 'block';
        }
    };
    reader.readAsDataURL(file);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ
    this.uploadAdminPhoto(file);
}

    async uploadDefaultPhoto(type, file) {
        const formData = new FormData();
        formData.append('photo', file);
        formData.append('type', type);
        
        try {
            const response = await fetch('/api/upload-default-photo', {
                method: 'POST',
                body: formData
            });
            
            if (response.ok) {
                const data = await response.json();
                if (data.message === 'success') {
                    this.showNotification('–§–æ—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
                    return true;
                }
            }
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ', 'error');
            return false;
        }
    }

    handleDefaultPhotoUpload(type, event) {
        const file = event.target.files[0];
        if (!file) return;
        
        if (!file.type.startsWith('image/')) {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'error');
            return;
        }
        
        if (file.size > 5 * 1024 * 1024) {
            this.showNotification('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB', 'error');
            return;
        }
        
        const reader = new FileReader();
        reader.onload = (e) => {
            const previewId = `default${type}Preview`;
            const preview = document.getElementById(previewId);
            if (preview) {
                preview.src = e.target.result;
                preview.style.display = 'block';
            }
        };
        reader.readAsDataURL(file);
        
        this.uploadDefaultPhoto(type, file);
    }

    openPhotoSettingsModal() {
        const modal = document.getElementById('photoSettingsModal');
        if (modal) {
            modal.style.display = 'block';
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–æ—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            this.loadDefaultPhotos();
        }
    }

    closePhotoSettingsModal() {
        const modal = document.getElementById('photoSettingsModal');
        if (modal) {
            modal.style.display = 'none';
        }
    }

// setting.js - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ loadDefaultPhotos
async loadDefaultPhotos() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        const adminPreview = document.getElementById('adminPhotoPreview');
        if (adminPreview) {
            const timestamp = new Date().getTime();
            adminPreview.src = `photo/–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä/admin_default.jpg?t=${timestamp}`;
            adminPreview.style.display = 'block';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–æ—Ç–æ
            const img = new Image();
            img.onload = function() {
                // –§–æ—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ
                adminPreview.style.display = 'block';
            };
            img.onerror = function() {
                // –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                adminPreview.style.display = 'none';
            };
            img.src = adminPreview.src;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥—Ä—É–≥–∏–µ —Ñ–æ—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const masterPreview = document.getElementById('defaultMasterPreview');
        if (masterPreview) {
            masterPreview.src = 'photo/—Ä–∞–±–æ—Ç–Ω–∏–∫–∏/default.jpg';
            masterPreview.style.display = 'block';
        }
        
        const servicePreview = document.getElementById('defaultServicePreview');
        if (servicePreview) {
            servicePreview.src = 'photo/—É—Å–ª—É–≥–∏/default.jpg';
            servicePreview.style.display = 'block';
        }
        
    } catch (error) {
        console.log('–§–æ—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }
}

setupEventListeners() {
    document.getElementById('openNotificationsBtn')?.addEventListener('click', () => {
        this.openNotificationsModal();
    });

    document.getElementById('closeNotificationsModal')?.addEventListener('click', () => {
        this.closeNotificationsModal();
    });

    document.getElementById('openContentSettingsBtn')?.addEventListener('click', () => {
        this.openContentSettingsModal();
    });

    document.getElementById('closeContentSettingsModal')?.addEventListener('click', () => {
        this.closeContentSettingsModal();
    });
    
    document.getElementById('openPhotoSettingsBtn')?.addEventListener('click', () => {
        this.openPhotoSettingsModal();
    });

    document.getElementById('closePhotoSettingsModal')?.addEventListener('click', () => {
        this.closePhotoSettingsModal();
    });

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    document.getElementById('adminPhotoUpload')?.addEventListener('change', (e) => {
        this.handleAdminPhotoUpload(e);
    });

    document.getElementById('masterDefaultPhoto')?.addEventListener('change', (e) => {
        this.handleDefaultPhotoUpload('Master', e);
    });

    document.getElementById('serviceDefaultPhoto')?.addEventListener('change', (e) => {
        this.handleDefaultPhotoUpload('Service', e);
    });

    document.addEventListener('keypress', (e) => {
        if (e.target.classList.contains('tg-id-field') && e.key === 'Enter') {
            const masterId = e.target.getAttribute('data-master-id');
            this.saveTgId(parseInt(masterId));
        }
    });
}

    openNotificationsModal() {
        const modal = document.getElementById('notificationsModal');
        if (modal) {
            modal.style.display = 'block';
            this.loadMasters();
        }
    }

    closeNotificationsModal() {
        const modal = document.getElementById('notificationsModal');
        if (modal) {
            modal.style.display = 'none';
        }
    }

    openContentSettingsModal() {
        const modal = document.getElementById('contentSettingsModal');
        if (modal) {
            modal.style.display = 'block';
            this.loadSettings();
        }
    }

    closeContentSettingsModal() {
        const modal = document.getElementById('contentSettingsModal');
        if (modal) {
            modal.style.display = 'none';
        }
    }
}


class ContentManager {
    constructor() {
        this.pages = ['–≥–ª–∞–≤–Ω–∞—è', 'about', '–∫–æ–Ω—Ç–∞–∫—Ç—ã'];
        this.currentPage = '–≥–ª–∞–≤–Ω–∞—è';
        this.content = {};
        this.links = {};
        this.linksVisibility = {}; // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ
    }

    async init() {
        await this.loadSettings();
        await this.loadPageContent();
        await this.loadLinks();
        this.setupEventListeners();
    }

    async loadSettings() {
        try {
            const response = await fetch('/api/settings');
            if (response.ok) {
                const data = await response.json();
                if (data.message === 'success') {
                    this.settings = data.data;
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        }
    }

    async loadPageContent() {
        try {
            const response = await fetch(`/api/page-content-full/${this.currentPage}`);
            if (response.ok) {
                const data = await response.json();
                if (data.message === 'success') {
                    this.content = data.data;
                    this.displayContent();
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
        }
    }

// setting.js - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ loadLinks –≤ ContentManager
// setting.js - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ loadLinks –≤ ContentManager
async loadLinks() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Å—ã–ª–∫–∏
        const linksResponse = await fetch('/api/links');
        if (linksResponse.ok) {
            const linksData = await linksResponse.json();
            if (linksData.message === 'success') {
                this.links = linksData.data;
            }
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è telegram_bot)
        const visibilityResponse = await fetch('/api/contact-visibility');
        if (visibilityResponse.ok) {
            const visibilityData = await visibilityResponse.json();
            if (visibilityData.message === 'success') {
                this.linksVisibility = visibilityData.data;
                console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', this.linksVisibility);
            }
        }

        this.displayContent();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Å—ã–ª–æ–∫ –∏–ª–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏:', error);
    }
}

    displayContent() {
        const container = document.getElementById('contentTextSettings');
        if (!container) return;

        container.innerHTML = this.generateContentForm();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ getPageElements –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    getPageElements(page) {
        const elementsMap = {
            '–≥–ª–∞–≤–Ω–∞—è': [
                { key: '–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å–∞–ª–æ–Ω–∞', label: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞', type: 'text' },
                { key: '–∑–∞–≥–æ–ª–æ–≤–æ–∫', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', type: 'text' },
                { key: '–æ–ø–∏—Å–∞–Ω–∏–µ', label: '–û–ø–∏—Å–∞–Ω–∏–µ', type: 'textarea' },
                { key: '–∫–Ω–æ–ø–∫–∞_–∑–∞–ø–∏—Å–∏', label: '–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∑–∞–ø–∏—Å–∏', type: 'text' },
                { key: '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π_—Ç–µ–∫—Å—Ç', label: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç', type: 'textarea' }
            ],
            'about': [
                { key: '–∑–∞–≥–æ–ª–æ–≤–æ–∫', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', type: 'text' },
                { key: '–æ–ø–∏—Å–∞–Ω–∏–µ', label: '–û–ø–∏—Å–∞–Ω–∏–µ', type: 'textarea' },
                { key: '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π_—Ç–µ–∫—Å—Ç', label: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç', type: 'textarea' }
            ],
            '–∫–æ–Ω—Ç–∞–∫—Ç—ã': [
                { key: '–∏–º—è_–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', label: '–ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', type: 'text' }
            ]
        };
        
        return elementsMap[page] || [];
    }

// setting.js - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ generateContentForm
generateContentForm() {
    const elements = this.getPageElements(this.currentPage);
    const currentElements = Array.isArray(this.content) ? this.content.filter(item => 
        elements.some(e => e.key === item.—ç–ª–µ–º–µ–Ω—Ç)
    ) : [];

    return `
        <div class="page-selector">
            <label for="pageSelector">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</label>
            <select id="pageSelector" class="page-select">
                <option value="–≥–ª–∞–≤–Ω–∞—è" ${this.currentPage === '–≥–ª–∞–≤–Ω–∞—è' ? 'selected' : ''}>–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</option>
                <option value="about" ${this.currentPage === 'about' ? 'selected' : ''}>–°—Ç—Ä–∞–Ω–∏—Ü–∞ "–û –Ω–∞—Å"</option>
                <option value="–∫–æ–Ω—Ç–∞–∫—Ç—ã" ${this.currentPage === '–∫–æ–Ω—Ç–∞–∫—Ç—ã' ? 'selected' : ''}>–ö–æ–Ω—Ç–∞–∫—Ç—ã</option>
            </select>
        </div>
        
        <div class="content-management">
            <div class="content-elements">
                <h4>–≠–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã "${this.getPageDisplayName(this.currentPage)}":</h4>
                <div id="elementsList" class="elements-list">
                    ${currentElements.map((item, index) => `
                        <div class="element-item" data-element="${item.—ç–ª–µ–º–µ–Ω—Ç}">
                            <div class="element-content">
                                <label>${this.getElementLabel(item.—ç–ª–µ–º–µ–Ω—Ç)}:</label>
                                ${this.getElementInput(item.—ç–ª–µ–º–µ–Ω—Ç, item.—Ç–µ–∫—Å—Ç)}
                                <button class="save-element-btn" data-element="${item.—ç–ª–µ–º–µ–Ω—Ç}">
                                    üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                                </button>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
            
            ${this.currentPage === '–∫–æ–Ω—Ç–∞–∫—Ç—ã' ? this.generateLinksForm() : ''}
        </div>
    `;
}

// –û–±–Ω–æ–≤–∏–º getElementLabel
getElementLabel(elementKey) {
    const labels = {
        '–∑–∞–≥–æ–ª–æ–≤–æ–∫': '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
        '–æ–ø–∏—Å–∞–Ω–∏–µ': '–û–ø–∏—Å–∞–Ω–∏–µ',
        '–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å–∞–ª–æ–Ω–∞': '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞',
        '–∫–Ω–æ–ø–∫–∞_–∑–∞–ø–∏—Å–∏': '–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∑–∞–ø–∏—Å–∏',
        '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π_—Ç–µ–∫—Å—Ç': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç',
        '–∏–º—è_–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞': '–ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ
        '—Ñ–æ—Ç–æ_–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞': '–§–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
    };
    return labels[elementKey] || elementKey;
}

    getElementInput(elementKey, value) {
        const isLongText = ['–æ–ø–∏—Å–∞–Ω–∏–µ', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π_—Ç–µ–∫—Å—Ç'].includes(elementKey);
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        const safeValue = this.escapeHtml(value || '');
        
        if (isLongText) {
            return `<textarea class="content-input" data-element="${elementKey}" rows="4">${safeValue}</textarea>`;
        } else {
            return `<input type="text" class="content-input" data-element="${elementKey}" value="${safeValue}">`;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

setupEventListeners() {
    // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    document.addEventListener('click', (e) => {
        if (e.target.classList.contains('save-element-btn')) {
            const elementKey = e.target.getAttribute('data-element');
            if (elementKey) {
                const input = document.querySelector(`.content-input[data-element="${elementKey}"]`);
                if (input) {
                    this.saveContent(elementKey, input.value);
                }
            }
        }
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ Enter
    document.addEventListener('keypress', (e) => {
        if (e.target.classList.contains('content-input') && e.key === 'Enter') {
            const elementKey = e.target.getAttribute('data-element');
            if (elementKey) {
                this.saveContent(elementKey, e.target.value);
            }
        }
    });
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    document.addEventListener('input', (e) => {
        if (e.target.classList.contains('content-input') && 
            e.target.getAttribute('data-element') === 'phone_contact') {
            
            let value = e.target.value;
            
            // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
            value = value.replace(/\D/g, '');
            
            // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –º–µ–Ω—è–µ–º –Ω–∞ 8
            if (value.startsWith('7') && value.length === 11) {
                value = '8' + value.substring(1);
            }
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É 11 —Å–∏–º–≤–æ–ª–∞–º–∏
            if (value.length > 11) {
                value = value.substring(0, 11);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ
            if (value !== e.target.value) {
                e.target.value = value;
            }
            
            // –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
            if (value.length === 11 && value.startsWith('89')) {
                e.target.style.borderColor = '#4CAF50';
            } else {
                e.target.style.borderColor = '#ff4444';
            }
        }
    });


        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('change', (e) => {
            if (e.target.id === 'pageSelector') {
                this.changePage(e.target.value);
            }
        });
    }
// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å ContentManager
validatePhoneInput(input) {
    let value = input.value;
    
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    value = value.replace(/\D/g, '');
    
    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –º–µ–Ω—è–µ–º –Ω–∞ 8
    if (value.startsWith('7') && value.length === 11) {
        value = '8' + value.substring(1);
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É 11 —Å–∏–º–≤–æ–ª–∞–º–∏
    if (value.length > 11) {
        value = value.substring(0, 11);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ
    if (value !== input.value) {
        input.value = value;
    }
    
    // –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
    if (value.length === 11 && value.startsWith('8')) {
        input.style.borderColor = '#4CAF50';
    } else {
        input.style.borderColor = '#ff4444';
    }
}
    async changePage(page) {
        this.currentPage = page;
        await this.loadPageContent();
        this.displayContent();
    }
// setting.js - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ generateLinksForm
generateLinksForm() {
    const linksConfig = [
        { key: 'telegram_bot', label: 'Telegram –±–æ—Ç', placeholder: 'https://t.me/your_bot' },
        { key: 'vk_contact', label: 'VK –∫–æ–Ω—Ç–∞–∫—Ç', placeholder: 'https://vk.com/your_page' },
        { key: 'telegram_contact', label: 'Telegram –∫–æ–Ω—Ç–∞–∫—Ç', placeholder: 'https://t.me/username' },
        { key: 'whatsapp_contact', label: 'WhatsApp', placeholder: 'https://wa.me/number' },
        { key: 'email_contact', label: 'Email', placeholder: 'email@example.com' },
        { key: 'phone_contact', label: '–¢–µ–ª–µ—Ñ–æ–Ω', placeholder: '89255355278 (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)' }
    ];

    return `
        <div class="links-management">
            <h4>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</h4>
            ${linksConfig.map(link => `
                <div class="link-item-with-visibility">
                    <div class="link-content">
                        <label>${link.label}:</label>
                        <input type="${link.key === 'phone_contact' ? 'tel' : 'url'}" 
                               id="link_input_${link.key}" 
                               value="${this.links[link.key] || ''}"
                               placeholder="${link.placeholder}"
                               class="link-input ${link.key === 'phone_contact' ? 'phone-input' : ''}"
                               ${link.key === 'phone_contact' ? 'oninput="contentManager.validatePhoneInput(this)"' : ''}>
                        <button onclick="contentManager.saveLink('${link.key}')" 
                                class="save-link-btn">
                            üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                        </button>
                    </div>
                    <div class="visibility-control">
                        <label class="visibility-toggle">
                            <input type="checkbox" 
                                   id="visibility_${link.key}" 
                                   ${this.linksVisibility[link.key] ? 'checked' : ''}
                                   onchange="contentManager.toggleLinkVisibility('${link.key}', this.checked)">
                            <span class="toggle-slider"></span>
                        </label>
                        <span class="visibility-label">–í–∏–¥–∏–º–æ—Å—Ç—å</span>
                    </div>
                    ${link.key === 'phone_contact' ? '<div class="phone-hint">–§–æ—Ä–º–∞—Ç: 89255355278 (11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8)</div>' : ''}
                </div>
            `).join('')}
        </div>
    `;
}


// setting.js - –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–ª–∞—Å—Å ContentManager
async toggleLinkVisibility(linkType, isVisible) {
    try {
        const response = await fetch(`/api/contact-visibility/${linkType}`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ –¥–æ—Å—Ç—É–ø–µ–Ω: isVisible })
        });

        if (response.ok) {
            const data = await response.json();
            if (data.message === 'success') {
                this.linksVisibility[linkType] = isVisible;
                this.showNotification(`–í–∏–¥–∏–º–æ—Å—Ç—å ${this.getLinkLabel(linkType)} ${isVisible ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}!`, 'success');
            }
        } else {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏:', error);
        this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏', 'error');
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
getLinkLabel(linkType) {
    const labels = {
        'vk_contact': 'VK',
        'telegram_contact': 'Telegram',
        'whatsapp_contact': 'WhatsApp',
        'email_contact': 'Email',
        'phone_contact': '–¢–µ–ª–µ—Ñ–æ–Ω–∞',
        'telegram_bot': 'Telegram –±–æ—Ç–∞'
    };
    return labels[linkType] || linkType;
}

    // –û–±–Ω–æ–≤–ª—è–µ–º getPageDisplayName –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    getPageDisplayName(page) {
        const names = {
            '–≥–ª–∞–≤–Ω–∞—è': '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
            'about': '–°—Ç—Ä–∞–Ω–∏—Ü–∞ "–û –Ω–∞—Å"',
            '–∫–æ–Ω—Ç–∞–∫—Ç—ã': '–ö–æ–Ω—Ç–∞–∫—Ç—ã'
        };
        return names[page] || page;
    }


async uploadAdminPhoto(file) {
    const formData = new FormData();
    formData.append('photo', file);
    
    try {
        const response = await fetch('/api/upload-default-admin-photo', {
            method: 'POST',
            body: formData
        });
        
        if (response.ok) {
            const data = await response.json();
            if (data.message === 'success') {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                const preview = document.getElementById('adminPhotoPreview');
                if (preview) {
                    const timestamp = new Date().getTime();
                    preview.src = `photo/–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä/admin_default.jpg?t=${timestamp}`;
                }
                
                this.showNotification('‚úÖ –§–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
                return true;
            }
        }
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
        this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ', 'error');
        return false;
    }
}

// –ú–µ—Ç–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
showPhotoConfirmation(type) {
    const preview = document.getElementById('adminPhotoPreview');
    if (preview) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        const timestamp = new Date().getTime();
        preview.src = `photo/–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä/admin_default.jpg?t=${timestamp}`;
        preview.style.display = 'block';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        preview.classList.add('photo-confirmed');
        setTimeout(() => preview.classList.remove('photo-confirmed'), 2000);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    this.showNotification('‚úÖ –§–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!', 'success');
}



// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
showFileSelectionConfirmation(file) {
    const fileName = file.name;
    const fileSize = (file.size / 1024 / 1024).toFixed(2);
    
    this.showNotification(`üìÅ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: ${fileName} (${fileSize}MB)`, 'info');
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
showConfirmationButton() {
    const uploadArea = document.querySelector('.photo-upload-area');
    if (!uploadArea) return;
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingBtn = uploadArea.querySelector('.confirm-upload-btn');
    if (existingBtn) existingBtn.remove();
    
    const confirmBtn = document.createElement('button');
    confirmBtn.className = 'confirm-upload-btn';
    confirmBtn.innerHTML = '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É';
    confirmBtn.onclick = () => {
        const fileInput = document.getElementById('adminPhotoUpload');
        if (fileInput.files[0]) {
            this.uploadAdminPhoto(fileInput.files[0]);
        }
    };
    
    uploadArea.appendChild(confirmBtn);
}




// setting.js - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ saveContent
// setting.js - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ saveContent
// setting.js - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ saveContent —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async saveContent(elementKey, value) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
    if (elementKey === 'phone_contact') {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ —Å–∫–æ–±–∫–∏
        const cleanPhone = value.replace(/[\s\-\(\)]/g, '');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç: 11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 89
        const phoneRegex = /^89\d{9}$/;
        
        if (!phoneRegex.test(cleanPhone)) {
            this.showNotification('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –î–æ–ª–∂–µ–Ω –±—ã—Ç—å: 89255355279 (11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 89)', 'error');
            return false;
        }
    }

    // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –º–µ—Ç–æ–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const input = document.querySelector(`.content-input[data-element="${elementKey}"]`);
    
    if (!input) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', elementKey);
        this.showNotification('–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }

    const trimmedValue = value.trim();

    try {
        const response = await fetch(`/api/pages/${this.currentPage}/${elementKey}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ —Ç–µ–∫—Å—Ç: trimmedValue })
        });

        if (response.ok) {
            this.showNotification('–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
            if (this.currentPage === '–≥–ª–∞–≤–Ω–∞—è') {
                this.updateLiveContent();
            }
            return true;
        } else {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:', error);
        this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞', 'error');
        return false;
    }
}

// setting.js - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ saveLink
async saveLink(linkKey) {
    const input = document.getElementById(`link_input_${linkKey}`);
    let value = input.value.trim();

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (linkKey === 'phone_contact') {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        const cleanPhone = value.replace(/\D/g, '');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç: 11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8
        const phoneRegex = /^8\d{10}$/;
        
        if (!phoneRegex.test(cleanPhone)) {
            this.showNotification('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –î–æ–ª–∂–µ–Ω –±—ã—Ç—å: 89255355278 (11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8)', 'error');
            
            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø–æ–ª–µ –∫—Ä–∞—Å–Ω—ã–º
            input.style.borderColor = '#ff4444';
            input.focus();
            return false;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
        value = cleanPhone;
        input.value = value;
    }

    try {
        const response = await fetch(`/api/links/${linkKey}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ url: value })
        });

        if (response.ok) {
            this.showNotification('–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', 'success');
            this.links[linkKey] = value;
            
            // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if (linkKey === 'phone_contact') {
                input.style.borderColor = '#4CAF50';
            }
            return true;
        } else {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏:', error);
        this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏', 'error');
        return false;
    }
}

    updateLiveContent() {
        if (typeof updateHomeContent === 'function') {
            updateHomeContent();
        }
        if (typeof loadLinks === 'function') {
            loadLinks();
        }
    }

    showNotification(message, type) {
        if (typeof notificationSettings !== 'undefined' && notificationSettings.showNotification) {
            notificationSettings.showNotification(message, type);
        } else {
            alert(message);
        }
    }

    openTextSettingsModal() {
        const modal = document.getElementById('textSettingsModal');
        if (modal) {
            modal.style.display = 'block';
            this.init().then(() => {
                this.displayContent();
            });
        }
    }

    closeTextSettingsModal() {
        const modal = document.getElementById('textSettingsModal');
        if (modal) {
            modal.style.display = 'none';
        }
    }
}


class MapSettingsManager {
    constructor() {
        this.map = null;
        this.marker = null;
        this.currentCoordinates = null;
        this.searchControl = null;
        this.init();
    }

    async init() {
        await this.loadCurrentCoordinates();
        this.setupEventListeners();
    }

    async loadCurrentCoordinates() {
        try {
            const response = await fetch('/api/map-coordinates');
            if (response.ok) {
                const data = await response.json();
                if (data.message === 'success') {
                    this.currentCoordinates = data.data;
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', error);
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            this.currentCoordinates = {
                latitude: 52.97103104736177,
                longitude: 36.06383468318084
            };
        }
    }

    setupEventListeners() {
        document.getElementById('openMapSettingsBtn')?.addEventListener('click', () => {
            this.openMapSettingsModal();
        });

        document.getElementById('closeMapSettingsModal')?.addEventListener('click', () => {
            this.closeMapSettingsModal();
        });
    }

openMapSettingsModal() {
    const modal = document.getElementById('mapSettingsModal');
    if (modal) {
        modal.style.display = 'block';
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        setTimeout(() => {
            this.initMap();
        }, 100);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤–Ω–µ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
        document.addEventListener('click', (e) => {
            if (!e.target.closest('.address-search')) {
                this.hideSuggestions();
            }
        });
    }
}

    closeMapSettingsModal() {
        const modal = document.getElementById('mapSettingsModal');
        if (modal) {
            modal.style.display = 'none';
            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –∫–∞—Ä—Ç—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
            if (this.map) {
                this.map.destroy();
                this.map = null;
                this.marker = null;
            }
        }
    }
    setupSearch() {
    const addressInput = document.getElementById('addressSearch');
    const suggestionsContainer = document.getElementById('searchSuggestions');
    
    if (!addressInput) return;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
    addressInput.addEventListener('input', this.debounce((e) => {
        this.handleAddressSearch(e.target.value);
    }, 300));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter
    addressInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            this.performSearch(addressInput.value);
        }
    });
}

// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (debounce)
debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞
async handleAddressSearch(query) {
    if (!query || query.length < 3) {
        this.hideSuggestions();
        return;
    }
    
    try {
        const response = await this.searchAddress(query);
        this.displaySuggestions(response);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞:', error);
    }
}

// –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –ì–µ–æ–∫–æ–¥–µ—Ä
async searchAddress(query) {
    return new Promise((resolve, reject) => {
        if (!window.ymaps) {
            reject(new Error('Yandex Maps API –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'));
            return;
        }
        
        ymaps.geocode(query, { results: 5 })
            .then((res) => {
                const suggestions = res.geoObjects.toArray().map(geoObject => ({
                    address: geoObject.getAddressLine(),
                    coords: geoObject.geometry.getCoordinates(),
                    name: geoObject.properties.get('name')
                }));
                resolve(suggestions);
            })
            .catch(reject);
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
displaySuggestions(suggestions) {
    const suggestionsContainer = document.getElementById('searchSuggestions');
    if (!suggestionsContainer) return;
    
    if (suggestions.length === 0) {
        this.hideSuggestions();
        return;
    }
    
    suggestionsContainer.innerHTML = suggestions.map(suggestion => `
        <div class="suggestion-item" data-coords="${suggestion.coords}">
            <strong>${suggestion.name || ''}</strong><br>
            <small>${suggestion.address}</small>
        </div>
    `).join('');
    
    suggestionsContainer.style.display = 'block';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–∞ –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    suggestionsContainer.querySelectorAll('.suggestion-item').forEach(item => {
        item.addEventListener('click', () => {
            const coords = item.getAttribute('data-coords').split(',').map(Number);
            this.selectSuggestion(coords, item.textContent);
        });
    });
}

// –°–∫—Ä—ã—Ç–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
hideSuggestions() {
    const suggestionsContainer = document.getElementById('searchSuggestions');
    if (suggestionsContainer) {
        suggestionsContainer.style.display = 'none';
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
selectSuggestion(coords, address) {
    const addressInput = document.getElementById('addressSearch');
    if (addressInput) {
        addressInput.value = address;
    }
    
    this.hideSuggestions();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
    if (this.map && this.marker) {
        this.map.setCenter(coords, 15);
        this.marker.geometry.setCoordinates(coords);
        this.updateCoordinates(coords);
    }
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
performSearch(query) {
    if (!this.searchControl) return;
    
    this.searchControl.search(query).then(() => {
        const results = this.searchControl.getResultsArray();
        if (results.length > 0) {
            const firstResult = results[0];
            const coords = firstResult.geometry.getCoordinates();
            
            this.map.setCenter(coords, 15);
            this.marker.geometry.setCoordinates(coords);
            this.updateCoordinates(coords);
        }
    });
}

    initMap() {
        if (!this.currentCoordinates) return;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
        this.map = new ymaps.Map('mapContainer', {
            center: [this.currentCoordinates.latitude, this.currentCoordinates.longitude],
            zoom: 15,
            controls: ['zoomControl', 'fullscreenControl']
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫
        this.searchControl = new ymaps.control.SearchControl({
            options: {
                provider: 'yandex#search',
                noPlacemark: true
            }
        });
        
        this.map.controls.add(this.searchControl);

        // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä
        this.marker = new ymaps.Placemark(
            [this.currentCoordinates.latitude, this.currentCoordinates.longitude],
            {
                hintContent: '–í–∞—à–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ',
                balloonContent: '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è'
            },
            {
                preset: 'islands#redDotIcon',
                draggable: true
            }
        );

        this.map.geoObjects.add(this.marker);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
        this.marker.events.add('dragend', (e) => {
            const coords = this.marker.geometry.getCoordinates();
            this.updateCoordinates(coords);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
        this.map.events.add('click', (e) => {
            const coords = e.get('coords');
            this.marker.geometry.setCoordinates(coords);
            this.updateCoordinates(coords);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        this.searchControl.events.add('resultselect', (e) => {
            const results = this.searchControl.getResultsArray();
            const selected = results[e.get('index')];
            const coords = selected.geometry.getCoordinates();
            
            this.marker.geometry.setCoordinates(coords);
            this.map.setCenter(coords, 15);
            this.updateCoordinates(coords);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        this.updateCoordinatesDisplay();
        this.setupSearch();

    }

    updateCoordinates(coords) {
        this.currentCoordinates = {
            latitude: coords[0],
            longitude: coords[1]
        };
        this.updateCoordinatesDisplay();
    }

    updateCoordinatesDisplay() {
        const latElement = document.getElementById('currentLatitude');
        const lngElement = document.getElementById('currentLongitude');
        
        if (latElement && lngElement && this.currentCoordinates) {
            latElement.textContent = this.currentCoordinates.latitude.toFixed(6);
            lngElement.textContent = this.currentCoordinates.longitude.toFixed(6);
        }
    }

    async saveCoordinates() {
        if (!this.currentCoordinates) {
            this.showNotification('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ', 'error');
            return;
        }

        try {
            const response = await fetch('/api/map-coordinates', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    latitude: this.currentCoordinates.latitude,
                    longitude: this.currentCoordinates.longitude
                })
            });

            if (response.ok) {
                const data = await response.json();
                if (data.message === 'success') {
                    this.showNotification('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
                    this.closeMapSettingsModal();
                }
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç', 'error');
        }
    }

    showNotification(message, type) {
        if (typeof notificationSettings !== 'undefined' && notificationSettings.showNotification) {
            notificationSettings.showNotification(message, type);
        } else {
            alert(message);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
let notificationSettings;
let contentManager;

function loadSettingsSection() {
    const contentContainer = document.getElementById('contentContainer');
    contentContainer.innerHTML = `
        <div class="settings-management">
            <div class="settings-header">
                <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</h2>
            </div>
            
            <div class="settings-cards">
                <div class="setting-card">
                    <h3>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤</h3>
                    <p>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞</p>
                    <button id="openNotificationsBtn" class="setting-btn">
                        ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    </button>
                </div>
                
                <div class="setting-card">
                    <h3>üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º</h3>
                    <p>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é –±–ª–æ–∫–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ</p>
                    <button id="openContentSettingsBtn" class="setting-btn">
                        ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                    </button>
                </div>

                <div class="setting-card">
                    <h3>‚úèÔ∏è –¢–µ–∫—Å—Ç—ã –∏ —Å—Å—ã–ª–∫–∏</h3>
                    <p>–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏</p>
                    <button id="openTextSettingsBtn" class="setting-btn">
                        ‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
                    </button>
                </div>
                
                <div class="setting-card">
                    <h3>üó∫Ô∏è –í–∞—à–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ</h3>
                    <p>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ</p>
                    <button id="openMapSettingsBtn" class="setting-btn">
                        ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—Ç—É
                    </button>
                </div>

                <div class="setting-card">
                    <h3>üñºÔ∏è –§–æ—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</h3>
                    <p>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–æ—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ —É—Å–ª—É–≥</p>
                    <button id="openPhotoSettingsBtn" class="setting-btn">
                        ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
                    </button>
                </div>
            </div>
        </div>



                <div id="mapSettingsModal" class="modal" style="display: none;">
            <div class="modaal-content map-settings">
                <div class="modal-header">
                    <h3>üó∫Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ</h3>
                    <button id="closeMapSettingsModal" class="close-btn">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="map-instructions">
                        <h4>–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</h4>
                        <ol>
                            <li>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∏–ª–∏</li>
                            <li>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ –∏–ª–∏</li>
                            <li>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –º–∞—Ä–∫–µ—Ä –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ</li>
                        </ol>
                    </div>
                    
                    <div class="coordinates-display">
                        <p><strong>–¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong></p>
                        <p>–®–∏—Ä–æ—Ç–∞: <span id="currentLatitude">--</span></p>
                        <p>–î–æ–ª–≥–æ—Ç–∞: <span id="currentLongitude">--</span></p>
                    </div>
                    <div class="address-search">
                        <input type="text" 
                            id="addressSearch" 
                            class="address-input" 
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞..."
                            autocomplete="off">
                        <div id="searchSuggestions" class="search-suggestions" style="display: none;"></div>
                    </div>
                    
                    <div id="mapContainer" class="map-container"></div>
                    
                    <button onclick="mapSettingsManager.saveCoordinates()" class="confirm-location-btn">
                        ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                    </button>
                </div>
            </div>
        </div>
        <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –∏ —Å—Å—ã–ª–æ–∫ -->
        <div id="textSettingsModal" class="modal" style="display: none;">
            <div class="modaal-content text-settings-content">
                <div class="modal-header">
                    <h3>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –∏ —Å—Å—ã–ª–æ–∫</h3>
                    <button id="closeTextSettingsModal" class="close-btn">&times;</button>
                </div>
                <div class="modal-body">
                    <div id="contentTextSettings">
                        <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π -->
        <div id="notificationsModal" class="modal" style="display: none;">
            <div class="modaal-content">
                <div class="modal-header">
                    <h3>üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
                    <button id="closeNotificationsModal" class="close-btn">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="notifications-help">
                        <h4>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Telegram ID –º–∞—Å—Ç–µ—Ä–∞:</h4>
                        <ol>
                            <li>–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É: @your_bot_username</li>
                            <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /id –≤ –±–æ—Ç–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID</li>
                            <li>–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π ID –≤ –ø–æ–ª–µ –Ω–∏–∂–µ</li>
                        </ol>
                    </div>
                    
                    <div class="masters-notifications-list" id="mastersNotificationsList">
                        <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤...</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div id="photoSettingsModal" class="modal" style="display: none;">
            <div class="modaal-content photo-settings">
                <div class="modal-header">
                    <h3>üñºÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</h3>
                    <button id="closePhotoSettingsModal" class="close-btn">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="photo-settings-grid">
                        <div class="photo-setting-item">
                            <h4>–§–æ—Ç–æ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</h4>
                            <div class="photo-upload-area">
                                <img id="defaultMasterPreview" class="default-photo-preview" 
                                    style="display: none; max-width: 200px; max-height: 200px;">
                                <input type="file" id="masterDefaultPhoto" 
                                    accept="image/*" class="photo-input">
                                <label for="masterDefaultPhoto" class="photo-upload-btn">
                                    üì∏ –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ
                                </label>
                                <small>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 400x400px</small>
                            </div>
                        </div>
                        <div class="photo-setting-item">
                            <h4>–§–æ—Ç–æ –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö</h4>
                            <div class="photo-upload-area">
                                <img id="adminPhotoPreview" class="default-photo-preview" 
                                    style="display: none; max-width: 200px; max-height: 200px;">
                                <input type="file" id="adminPhotoUpload" 
                                    accept="image/*" class="photo-input">
                                <label for="adminPhotoUpload" class="photo-upload-btn">
                                    üì∏ –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ
                                </label>
                                <small>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 400x400px</small>
                            </div>
                        </div>
                        <div class="photo-setting-item">
                            <h4>–§–æ—Ç–æ —É—Å–ª—É–≥–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</h4>
                            <div class="photo-upload-area">
                                <img id="defaultServicePreview" class="default-photo-preview" 
                                    style="display: none; max-width: 200px; max-height: 200px;">
                                <input type="file" id="serviceDefaultPhoto" 
                                    accept="image/*" class="photo-input">
                                <label for="serviceDefaultPhoto" class="photo-upload-btn">
                                    üì∏ –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ
                                </label>
                                <small>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 400x300px</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º -->
        <div id="contentSettingsModal" class="modal" style="display: none;">
            <div class="modaal-content">
                <div class="modal-header">
                    <h3>üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Å–∞–π—Ç–∞</h3>
                    <button id="closeContentSettingsModal" class="close-btn">&times;</button>
                </div>
                <div class="modal-body">
                    <div id="contentVisibilitySettings">
                        <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...</div>
                    </div>
                </div>
            </div>
        </div>
    `;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    notificationSettings = new NotificationSettingsManager();
    contentManager = new ContentManager();
    mapSettingsManager = new MapSettingsManager();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π - –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    document.getElementById('openTextSettingsBtn')?.addEventListener('click', () => {
        contentManager.openTextSettingsModal();
    });

    document.getElementById('closeTextSettingsModal')?.addEventListener('click', () => {
        contentManager.closeTextSettingsModal();
    });
}
let mapSettingsManager;