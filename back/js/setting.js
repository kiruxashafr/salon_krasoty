// setting.js
class NotificationSettingsManager {
    constructor() {
        this.masters = [];
        this.init();
    }

    async init() {
        await this.loadMasters();
        this.setupEventListeners();
    }

    async loadMasters() {
        try {
            const response = await fetch('/api/specialists-all');
            if (response.ok) {
                const data = await response.json();
                if (data.message === 'success') {
                    this.masters = data.data;
                    this.displayMasters();
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤:', error);
        }
    }

    displayMasters() {
        const container = document.getElementById('mastersNotificationsList');
        if (!container) return;

        container.innerHTML = this.masters.map(master => `
            <div class="master-notification-item" data-master-id="${master.id}">
                <div class="master-info">
                    <img src="${master.—Ñ–æ—Ç–æ || 'photo/—Ä–∞–±–æ—Ç–Ω–∏–∫–∏/default.jpg'}" 
                         alt="${master.–∏–º—è}" 
                         class="master-avatar"
                         onerror="this.src='photo/—Ä–∞–±–æ—Ç–Ω–∏–∫–∏/default.jpg'">
                    <span class="master-name">${master.–∏–º—è}</span>
                </div>
                <div class="tg-id-input">
                    <input type="text" 
                           class="tg-id-field" 
                           placeholder="Telegram ID"
                           value="${master.tg_id || ''}"
                           data-master-id="${master.id}">
                    <button class="save-tg-id-btn" onclick="notificationSettings.saveTgId(${master.id})">
                        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </button>
                </div>
            </div>
        `).join('');
    }

    async saveTgId(masterId) {
        const input = document.querySelector(`.tg-id-field[data-master-id="${masterId}"]`);
        const tgId = input.value.trim();

        try {
            const response = await fetch(`/api/specialist/${masterId}/tg-id`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ tg_id: tgId })
            });

            if (response.ok) {
                const data = await response.json();
                if (data.message === 'success') {
                    this.showNotification('Telegram ID —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
                    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
                    const master = this.masters.find(m => m.id === masterId);
                    if (master) {
                        master.tg_id = tgId;
                    }
                }
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Telegram ID:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Telegram ID', 'error');
        }
    }

    showNotification(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            background: ${type === 'success' ? '#4CAF50' : type === 'error' ? '#f44336' : '#2196F3'};
            color: white;
            border-radius: 4px;
            z-index: 10000;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        `;

        document.body.appendChild(notification);

        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        document.getElementById('openNotificationsBtn')?.addEventListener('click', () => {
            this.openNotificationsModal();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.getElementById('closeNotificationsModal')?.addEventListener('click', () => {
            this.closeNotificationsModal();
        });

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ Enter
        document.addEventListener('keypress', (e) => {
            if (e.target.classList.contains('tg-id-field') && e.key === 'Enter') {
                const masterId = e.target.getAttribute('data-master-id');
                this.saveTgId(parseInt(masterId));
            }
        });
    }

    openNotificationsModal() {
        const modal = document.getElementById('notificationsModal');
        if (modal) {
            modal.style.display = 'block';
            this.loadMasters(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        }
    }

    closeNotificationsModal() {
        const modal = document.getElementById('notificationsModal');
        if (modal) {
            modal.style.display = 'none';
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
let notificationSettings;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function loadSettingsSection() {
    const contentContainer = document.getElementById('contentContainer');
    contentContainer.innerHTML = `
        <div class="settings-management">
            <div class="settings-header">
                <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</h2>
            </div>
            
            <div class="settings-cards">
                <div class="setting-card">
                    <h3>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤</h3>
                    <p>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞</p>
                    <button id="openNotificationsBtn" class="setting-btn">
                        ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    </button>
                </div>
                

            </div>
        </div>

        <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π -->
        <div id="notificationsModal" class="modal" style="display: none;">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
                    <button id="closeNotificationsModal" class="close-btn">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="notifications-help">
                        <h4>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Telegram ID –º–∞—Å—Ç–µ—Ä–∞:</h4>
                        <ol>
                            <li>–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É: @your_bot_username</li>
                            <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /id –≤ –±–æ—Ç–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID</li>
                            <li>–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π ID –≤ –ø–æ–ª–µ –Ω–∏–∂–µ</li>
                        </ol>
                    </div>
                    
                    <div class="masters-notifications-list" id="mastersNotificationsList">
                        <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤...</div>
                    </div>
                </div>
            </div>
        </div>
    `;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notificationSettings = new NotificationSettingsManager();
}



